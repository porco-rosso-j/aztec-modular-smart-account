/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
	AztecAddress,
	AztecAddressLike,
	CompleteAddress,
	Contract,
	ContractArtifact,
	ContractBase,
	ContractFunctionInteraction,
	ContractInstanceWithAddress,
	ContractMethod,
	ContractStorageLayout,
	ContractNotes,
	DeployMethod,
	EthAddress,
	EthAddressLike,
	FieldLike,
	Fr,
	FunctionSelectorLike,
	loadContractArtifact,
	NoirCompiledContract,
	Point,
	PublicKey,
	Wallet,
	WrappedFieldLike,
} from "@aztec/aztec.js";
import MultisigAccountSchnorrContractArtifactJson from "../../contracts/accounts/multisig_schnorr/target/multi_sig_schnorr-MultisigAccountSchnorr.json" assert { type: "json" };
export const MultisigAccountSchnorrContractArtifact = loadContractArtifact(
	MultisigAccountSchnorrContractArtifactJson as NoirCompiledContract
);

/**
 * Type-safe interface for contract MultisigAccountSchnorr;
 */
export class MultisigAccountSchnorrContract extends ContractBase {
	private constructor(instance: ContractInstanceWithAddress, wallet: Wallet) {
		super(instance, MultisigAccountSchnorrContractArtifact, wallet);
	}

	/**
	 * Creates a contract instance.
	 * @param address - The deployed contract's address.
	 * @param wallet - The wallet to use when interacting with the contract.
	 * @returns A promise that resolves to a new Contract instance.
	 */
	public static async at(address: AztecAddress, wallet: Wallet) {
		return Contract.at(
			address,
			MultisigAccountSchnorrContract.artifact,
			wallet
		) as Promise<MultisigAccountSchnorrContract>;
	}

	/**
	 * Creates a tx to deploy a new instance of this contract.
	 */
	public static deploy(
		wallet: Wallet,
		owners: AztecAddressLike[],
		signing_pubkeys: { x: FieldLike; y: FieldLike }[],
		threshold: bigint | number,
		iv_secret_key: { high: FieldLike; low: FieldLike },
		ov_secret_key: { high: FieldLike; low: FieldLike }
	) {
		return new DeployMethod<MultisigAccountSchnorrContract>(
			Fr.ZERO,
			wallet,
			MultisigAccountSchnorrContractArtifact,
			MultisigAccountSchnorrContract.at,
			Array.from(arguments).slice(1)
		);
	}

	/**
	 * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
	 */
	public static deployWithPublicKeysHash(
		publicKeysHash: Fr,
		wallet: Wallet,
		owners: AztecAddressLike[],
		signing_pubkeys: { x: FieldLike; y: FieldLike }[],
		threshold: bigint | number,
		iv_secret_key: { high: FieldLike; low: FieldLike },
		ov_secret_key: { high: FieldLike; low: FieldLike }
	) {
		return new DeployMethod<MultisigAccountSchnorrContract>(
			publicKeysHash,
			wallet,
			MultisigAccountSchnorrContractArtifact,
			MultisigAccountSchnorrContract.at,
			Array.from(arguments).slice(2)
		);
	}

	/**
	 * Creates a tx to deploy a new instance of this contract using the specified constructor method.
	 */
	public static deployWithOpts<
		M extends keyof MultisigAccountSchnorrContract["methods"]
	>(
		opts: { publicKeysHash?: Fr; method?: M; wallet: Wallet },
		...args: Parameters<MultisigAccountSchnorrContract["methods"][M]>
	) {
		return new DeployMethod<MultisigAccountSchnorrContract>(
			opts.publicKeysHash ?? Fr.ZERO,
			opts.wallet,
			MultisigAccountSchnorrContractArtifact,
			MultisigAccountSchnorrContract.at,
			Array.from(arguments).slice(1),
			opts.method ?? "constructor"
		);
	}

	/**
	 * Returns this contract's artifact.
	 */
	public static get artifact(): ContractArtifact {
		return MultisigAccountSchnorrContractArtifact;
	}

	public static get storage(): ContractStorageLayout<
		"signing_pubkeys" | "multisig_note"
	> {
		return {
			signing_pubkeys: {
				slot: new Fr(1n),
				typ: "Map<AztecAddress, PrivateMutable<PublicKeyNote, Context>, Context>",
			},
			multisig_note: {
				slot: new Fr(2n),
				typ: "PrivateMutable<MultiSigNote, Context>",
			},
		} as ContractStorageLayout<"signing_pubkeys" | "multisig_note">;
	}

	public static get notes(): ContractNotes<"PublicKeyNote" | "MultiSigNote"> {
		return {
			PublicKeyNote: {
				id: new Fr(8011798108105997510112178111116101n),
			},
			MultiSigNote: {
				id: new Fr(771171081161058310510378111116101n),
			},
		} as ContractNotes<"PublicKeyNote" | "MultiSigNote">;
	}

	/** Type-safe wrappers for the public methods exposed by the contract. */
	// @ts-ignore
	public override methods!: {
		/** entrypoint(app_payload: struct, fee_payload: struct) */
		entrypoint: ((
			app_payload: {
				function_calls: {
					args_hash: FieldLike;
					function_selector: FunctionSelectorLike;
					target_address: AztecAddressLike;
					is_public: boolean;
					is_static: boolean;
				}[];
				nonce: FieldLike;
			},
			fee_payload: {
				function_calls: {
					args_hash: FieldLike;
					function_selector: FunctionSelectorLike;
					target_address: AztecAddressLike;
					is_public: boolean;
					is_static: boolean;
				}[];
				nonce: FieldLike;
				is_fee_payer: boolean;
			}
		) => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** constructor(owners: array, signing_pubkeys: array, threshold: integer, iv_secret_key: struct, ov_secret_key: struct) */
		constructor: ((
			owners: AztecAddressLike[],
			signing_pubkeys: { x: FieldLike; y: FieldLike }[],
			threshold: bigint | number,
			iv_secret_key: { high: FieldLike; low: FieldLike },
			ov_secret_key: { high: FieldLike; low: FieldLike }
		) => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** spend_private_authwit(inner_hash: field) */
		spend_private_authwit: ((
			inner_hash: FieldLike
		) => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** get_nonce() */
		get_nonce: (() => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** get_owners() */
		get_owners: (() => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** get_threshold() */
		get_threshold: (() => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** spend_public_authwit(inner_hash: field) */
		spend_public_authwit: ((
			inner_hash: FieldLike
		) => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** update_owners(new_owners: array, new_threshold: integer) */
		update_owners: ((
			new_owners: AztecAddressLike[],
			new_threshold: bigint | number
		) => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** compute_note_hash_and_nullifier(contract_address: struct, nonce: field, storage_slot: field, note_type_id: field, serialized_note: array) */
		compute_note_hash_and_nullifier: ((
			contract_address: AztecAddressLike,
			nonce: FieldLike,
			storage_slot: FieldLike,
			note_type_id: FieldLike,
			serialized_note: FieldLike[]
		) => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** get_pubkeys_by_owner(owner: struct) */
		get_pubkeys_by_owner: ((
			owner: AztecAddressLike
		) => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;
	};
}
