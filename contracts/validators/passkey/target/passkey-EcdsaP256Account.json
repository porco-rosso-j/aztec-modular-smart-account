{"transpiled":true,"noir_version":"0.30.0+c363d6fb324a83b35cf5aa1bfd39f62b9198f0b6","name":"EcdsaP256Account","functions":[{"name":"entrypoint","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"param_witnesses":{"app_payload":[{"end":60,"start":39}],"fee_payload":[{"end":72,"start":60}],"inputs":[{"end":39,"start":0}]},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"app_payload","type":{"fields":[{"name":"function_calls","type":{"kind":"array","length":4,"type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall"}}},{"name":"nonce","type":{"kind":"field"}}],"kind":"struct","path":"authwit::entrypoint::app::AppPayload"},"visibility":"private"},{"name":"fee_payload","type":{"fields":[{"name":"function_calls","type":{"kind":"array","length":2,"type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall"}}},{"name":"nonce","type":{"kind":"field"}},{"name":"is_fee_payer","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::fee::FeePayload"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":32,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"},"return_witnesses":[5857,5858,5859,5860,5861,5862,5863,5864,5865,5866,5867,5868,5869,5870,5871,5872,5873,5874,5875,5876,5877,5878,5879,5880,5881,5882,5883,5884,5885,5886,5887,5888,5889,5890,5891,5892,5893,5894,5895,5896,5897,5898,5899,5900,5901,5902,5903,5904,5905,5906,5907,5908,5909,5910,5911,5912,5913,5914,5915,5916,5917,5918,5919,5920,5921,5922,5923,5924,5925,5926,5927,5928,5929,5930,5931,5932,5933,5934,5935,5936,5937,5938,5939,5940,5941,5942,5943,5944,5945,5946,5947,5948,5949,5950,5951,5952,5953,5954,5955,5956,5957,5958,5959,5960,5961,5962,5963,5964,5965,5966,5967,5968,5969,5970,5971,5972,5973,5974,5975,5976,5977,5978,5979,5980,5981,5982,5983,5984,5985,5986,5987,5988,5989,5990,5991,5992,5993,5994,5995,5996,5997,5998,5999,6000,6001,6002,6003,6004,6005,6006,6007,6008,6009,6010,6011,6012,6013,6014,6015,6016,6017,6018,6019,6020,6021,6022,6023,6024,6025,6026,6027,6028,6029,6030,6031,6032,6033,6034,6035,6036,6037,6038,6039,6040,6041,6042,6043,6044,6045,6046,6047,6048,6049,6050,6051,6052,6053,6054,6055,6056,6057,6058,6059,6060,6061,6062,6063,6064,6065,6066,6067,6068,6069,6070,6071,6072,6073,6074,6075,6076,6077,6078,6079,6080,6081,6082,6083,6084,6085,6086,6087,6088,6089,6090,6091,6092,6093,6094,6095,6096,6097,6098,6099,6100,6101,6102,6103,6104,6105,6106,6107,6108,6109,6110,6111,6112,6113,6114,6115,6116,6117,6118,6119,6120,6121,6122,6123,6124,6125,6126,6127,6128,6129,6130,6131,6132,6133,6134,6135,6136,6137,6138,6139,6140,6141,6142,6143,6144,6145,6146,6147,6148,6149,6150,6151,6152,6153,6154,6155,6156,6157,6158,6159,6160,6161,6162,6163,6164,6165,6166,6167,6168,6169,6170,6171,6172,6173,6174,6175,6176,6177,6178,6179,6180,6181,6182,6183,6184,6185,6186,6187,6188,6189,6190,6191,6192,6193,6194,6195,6196,6197,6198,6199,6200,6201,6202,6203,6204,6205,6206,6207,6208,6209,6210,6211,6212,6213,6214,6215,6216,6217,6218,6219,6220,6221,6222,6223,6224,6225,6226,6227,6228,6229,6230,6231,6232,6233,6234,6235,6236,6237,6238,6239,6240,6241,6242,6243,6244,6245,6246,6247,6248,6249,6250,6251,6252,6253,6254,6255,6256,6257,6258,6259,6260,6261,6262,6263,6264,6265,6266,6267,6268,6269,6270,6271,6272,6273,6274,6275,6276,6277,6278,6279,6280,6281,6282,6283,6284,6285,6286,6287,6288,6289,6290,6291,6292,6293,6294,6295,6296,6297,6298,6299,6300,6301,6302,6303,6304,6305,6306,6307,6308,6309,6310,6311,6312,6313]},"bytecode":"","debug_symbols":""},{"name":"spend_private_authwit","is_unconstrained":false,"custom_attributes":["aztec(private)","aztec(noinitcheck)"],"abi":{"error_types":{},"param_witnesses":{"inner_hash":[{"end":40,"start":39}],"inputs":[{"end":39,"start":0}]},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"inner_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":32,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"},"return_witnesses":[645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101]},"bytecode":"","debug_symbols":""},{"name":"constructor","is_unconstrained":false,"custom_attributes":["aztec(private)","aztec(initializer)"],"abi":{"error_types":{},"param_witnesses":{"inputs":[{"end":39,"start":0}],"signing_pub_key_x":[{"end":71,"start":39}],"signing_pub_key_y":[{"end":103,"start":71}]},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"signing_pub_key_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"signing_pub_key_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":32,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"},"return_witnesses":[10439,10440,10441,10442,10443,10444,10445,10446,10447,10448,10449,10450,10451,10452,10453,10454,10455,10456,10457,10458,10459,10460,10461,10462,10463,10464,10465,10466,10467,10468,10469,10470,10471,10472,10473,10474,10475,10476,10477,10478,10479,10480,10481,10482,10483,10484,10485,10486,10487,10488,10489,10490,10491,10492,10493,10494,10495,10496,10497,10498,10499,10500,10501,10502,10503,10504,10505,10506,10507,10508,10509,10510,10511,10512,10513,10514,10515,10516,10517,10518,10519,10520,10521,10522,10523,10524,10525,10526,10527,10528,10529,10530,10531,10532,10533,10534,10535,10536,10537,10538,10539,10540,10541,10542,10543,10544,10545,10546,10547,10548,10549,10550,10551,10552,10553,10554,10555,10556,10557,10558,10559,10560,10561,10562,10563,10564,10565,10566,10567,10568,10569,10570,10571,10572,10573,10574,10575,10576,10577,10578,10579,10580,10581,10582,10583,10584,10585,10586,10587,10588,10589,10590,10591,10592,10593,10594,10595,10596,10597,10598,10599,10600,10601,10602,10603,10604,10605,10606,10607,10608,10609,10610,10611,10612,10613,10614,10615,10616,10617,10618,10619,10620,10621,10622,10623,10624,10625,10626,10627,10628,10629,10630,10631,10632,10633,10634,10635,10636,10637,10638,10639,10640,10641,10642,10643,10644,10645,10646,10647,10648,10649,10650,10651,10652,10653,10654,10655,10656,10657,10658,10659,10660,10661,10662,10663,10664,10665,10666,10667,10668,10669,10670,10671,10672,10673,10674,10675,10676,10677,10678,10679,10680,10681,10682,10683,10684,10685,10686,10687,10688,10689,10690,10691,10692,10693,10694,10695,10696,10697,10698,10699,10700,10701,10702,10703,10704,10705,10706,10707,10708,10709,10710,10711,10712,10713,10714,10715,10716,10717,10718,10719,10720,10721,10722,10723,10724,10725,10726,10727,10728,10729,10730,10731,10732,10733,10734,10735,10736,10737,10738,10739,10740,10741,10742,10743,10744,10745,10746,10747,10748,10749,10750,10751,10752,10753,10754,10755,10756,10757,10758,10759,10760,10761,10762,10763,10764,10765,10766,10767,10768,10769,10770,10771,10772,10773,10774,10775,10776,10777,10778,10779,10780,10781,10782,10783,10784,10785,10786,10787,10788,10789,10790,10791,10792,10793,10794,10795,10796,10797,10798,10799,10800,10801,10802,10803,10804,10805,10806,10807,10808,10809,10810,10811,10812,10813,10814,10815,10816,10817,10818,10819,10820,10821,10822,10823,10824,10825,10826,10827,10828,10829,10830,10831,10832,10833,10834,10835,10836,10837,10838,10839,10840,10841,10842,10843,10844,10845,10846,10847,10848,10849,10850,10851,10852,10853,10854,10855,10856,10857,10858,10859,10860,10861,10862,10863,10864,10865,10866,10867,10868,10869,10870,10871,10872,10873,10874,10875,10876,10877,10878,10879,10880,10881,10882,10883,10884,10885,10886,10887,10888,10889,10890,10891,10892,10893,10894,10895]},"bytecode":"","debug_symbols":"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/Wu3+l1Kt/pdSrf6XUq3+l1Kt/pdyrb6Xcq2+l3Ktvpdyrb6Xcp0q3/tVr9L2Va/S9lWv0vZVr9L2Va/S7WtfpdqW/0u1bb6Xapt9btU063+tVv9LtW2+l2qbfW7VNvqd6m21e9SfavfpfpWv0v9qwrsX/9rt/pd6l9V+v36X7vV71L/qqLk1//arX6X+ld1577+1271u9S/qm/09b92q9+l/lUdja//tVv9LvWv6rV7/a/d6nepf1UX2Ot/7Va/S/2r+pNe/2u3+l3qX9U58/pfu9XvUv+qno7X/9qtfpf6V3UbvP7XbvW71L9qFvzrf+1Wv0v9q2aqv/7X7vS7VN1q7nndau553Wrued1q7nk9dKt/7U6/S9Wt5p7Xreae163mntet5p7Xreae163mntet5p7Xreae163mntet5p7Xreae163mntet5p7Xreae163mntet5p7Xreae163mntet5p7Xreae163mntet5p7Xreae163mntet5p7Xreae163mntet5p7Xreae163mntet5p7Xreae163mntet5p7Xreae163mntet5p7Xreae163mntet5p7Xreae163mntet5p7Xreae163mntet5p7Xreae163mntet5p7Xreae163mntet5p7Xreae163mntet5p7Xreae163mntet5p7Xreae163mntet5p7Xreae163mntet5p7Xreae163mntet5p7Xreae163mntet5p7Xreae163mntet5p7Xreae163mntet5p7Xreae163mntet5p7Xreae163mntet5p7Xreae163mntet5p7Xreae163mntet5p7Xreae163mntet5p7Xreae163mntet5p7rVnPPdau557rV3HPdau65HrrVv3an36V0q7nnutXcc91q7rluNfdct5p7rlvNPdet5p7rVnPPdau557rV3HPdau65bjX3XLeae65bzT3Xreae61Zzz3Wruee61dxz3WruuW4191y3mnuuW809163mnutWc891q7nnutXcc91q7rluNfdct5p7rlvNPdet5p7rVnPPdau557rV3HPdau65bjX3XLeae65bzT3Xreae61Zzz3Wruee61dxz3WruuW4191y3mnuuW809163mnutWc891q7nnutXcc91q7rluNfdct5p7rlvNPdet5p7rVnPPdau557rV3HPdau65bjX3XLeae65bzT3Xreae61Zzz3Wruee61dxz3WruuW4191y3mnuuW809163mnutWc891q7nnutXcc91q7rluNfdct5p7rlvNPdet5p7rVnPPdau557rV3HPdau65bjX3XLeae65bzT3Xreae61Zzz3Wruee61dxz3WruuW4191y3mnuuW809t63mnttWc89tq7nnttXcczt0q3/tTr9L2VZzz22ruee21dxz22ruuW0199y2mntuW809t63mnttWc89tq7nnttXcc9tq7rltNffctpp7blvNPbet5p7bVnPPbau557bV3HPbau65bTX33Laae25bzT23reae21Zzz22ruee21dxz22ruuW0199y2mntuW809t63mnttWc89tq7nnttXcc9tq7rltNffctpp7blvNPbet5p7bVnPPbau557bV3HPbau65bTX33Laae25bzT23reae21Zzz22ruee21dxz22ruuW0199y2mntuW809t63mnttWc89tq7nnttXcc9tq7rltNffctpp7blvNPbet5p7bVnPPbau557bV3HPbau65bTX33Laae25bzT23reae21Zzz22ruee21dxz22ruuW0199y2mntuW809t63mnttWc89tq7nnttXcc9tq7rltNffctpp7blvNPbet5p7bVnPPbau557bV3HPbau65bTX33Laae962mnvetpp73raae962mnveDt3qX7vT71Jtq7nnbau5522ruedtq7nnbau5522ruedtq7nnbau5522ruedtq7nnbau5522ruedtq7nnbau5522ruedtq7nnbau5522ruedtq7nnbau5522ruedtq7nnbau5522ruedtq7nnbau5522ruedtq7nnbau5522ruedtq7nnbau5522ruedtq7nnbau5522ruedtq7nnbau5522ruedtq7nnbau5522ruedtq7nnbau5522ruedtq7nnbau5522ruedtq7nnbau5522ruedtq7nnbau5522ruedtq7nnbau5522ruedtq7nnbau5522ruedtq7nnbau5522ruedtq7nnbau5522ruedtq7nnbau5522ruedtq7nnbau5522ruedtq7nnbau5522ruedtq7nnbau5522ruedtq7nnbau5522ruedtq7nnbau5522ruedtq7nnbau5522ruedtq7nnbau5522ruedtq7nnbau5522ruedtq7nnfau5532rued9q7nnfau55/3Qrf61O/0u1beae963mnvet5p73reae963mnvet5p73reae963mnvet5p73reae963mnvet5p73reae963mnvet5p73reae963mnvet5p73reae963mnvet5p73reae963mnvet5p73reae963mnvet5p73reae963mnvet5p73reae963mnvet5p73reae963mnvet5p73reae963mnvet5p73reae963mnvet5p73reae963mnvet5p73reae963mnvet5p73reae963mnvet5p73reae963mnvet5p73reae963mnvet5p73reae963mnvet5p73reae963mnvet5p73reae963mnvet5p73reae963mnvet5p73reae963mnvet5p73reae963mnvet5p73reae963mnvet5p73reae963mnvet5p73reae963mnvet5p73reae963mnvet5p73reae963mnvet5p73reae963mnvet5p73reaez62mns+tpp7Praaez62mns+Dt3qX7vT71Jjq7nnY6u552Oruedjq7nnY6u552Oruedjq7nnY6u552Oruedjq7nnY6u552Oruedjq7nnY6u552Oruedjq7nnY6u552Oruedjq7nnY6u552Oruedjq7nnY6u552Oruedjq7nnY6u552Oruedjq7nnY6u552Oruedjq7nnY6u552Oruedjq7nn498097yXeVz/WrF286/9F/0u1cfx97/28Tvxf/9r/++XzzHPLz7K318rj3/jX9+a21+8TsLx829Kb+cXjuPv718pd9+SVo/zG9iq1J9r10OO8xP8+N9Vbn6mlVF86H/uX4A3Oz8Dbf7NKEf766n7F8kvnypvPSVvPVX/8VNF2n/u38b063vebf7XY3Y91t97bLz32Hzrsfv/Yn39WHnvMXnvsduf29+7zDjuH9P3HrP3HmvvPdbfe2y899h867H7s3i0c+cefdw+Vt57TN57rL73mL73mL33WHvvsftPyejnY7PdPjbee2y+9dj9dPXXj5X3HpP3HqvvPXb7KZnlXDiz3C6c+1HOrx9r7z3W33tsvPfYfOux+7mxrx8rLx6T25/b/STT14/V9x67/5TUc3VPvV3d90MqXz/W3nusv/fYeO+x+dZj9xPxXj92/ylp7fpPDNX/9dz/+ydffEIkA1IzIJoBsQxIy4D0DMjIgMwEyP0kpm9DMlb8yFjxI2PFj4wVPzJW/MhY8SNjxY+MFT8yVvzMWPEzY8XPjBU/M1b8zFjxM2PFz4wVPzNW/MxY8TNjxZfjSKGUFIqkUGoKRVMolkJpKZSeQhkplJS1X1LWfklZ+yVl7ZeUtV9S1n5JWfslZe2XlLVfUtZ+SVn7krL2JWXtS8ral5S1LylrX1LWvqSsfUlZ+5Ky9iVl7deUtV9T1n5NWfs1Ze3XlLVfU9Z+TVn7NWXt15S1X1PWvqasfU1Z+5qy9jVl7WvK2teUta8pa19T1r6mrH1NWfuWsvYtZe1bytq3lLVvKWvfUta+pax9S1n7lrL2LWXtt5S131LWfktZ+y1l7beUtd9S1n5LWfstZe23lLXfUtZ+T1n7KXf3SsrlvZJye6+kXN8rKff3SsoFvpJyg6+kXOErKXf4SsolvpJyi6+kXOMrKff4SspFvpJyk6+kXOUrKXf5SsplvpJym6+kXOcrKff5SsqFvpJyo6+kXOkrKXf6SsqlvpJyq6+kXOsrKff6JOVen6Tc65OUe32Scq9PDk2hWAqlpVB6CmWkUFLWfsq9Pkm51ycp9/ok5V6fpNzrk5R7fZJyr09S7vVJyr0+SbnXJyn3+iTlXp+k3OuTlHt9knKvT1Lu9UnKvT5JudcnKff6JOVen6Tc65OUe32Scq9PUu71Scq9Pkm51ycp9/ok5V6fpNzrk5R7fZJyr09S7vVJyr0+SbnXJyn3+uQLd+HsOGezWPl7NsvjJ/43ZCRAvnB7zOSCVLuHSAakZkA0A2IZkH96sFwP9jcf/MIf+V9/nr/wN/5fgFgGpGVAMjayL/x93/Scvmsm95CZAPnCX/d/AVIyIJIB+cKKr+OC1HuIZkAsA9IyID0DMjIgM+GY/MLf9H8BkvFL2Mz4JWxm/BL2hb/n/wIk45ewL/w1/xcgPQMyMiAJK74eRwakZEAkA1IzIJoBsQxIy4D0DMjIgGSs+JKx4kvGii8ZK75krPiSseJLxoovGSu+ZKz4krHiS8aKl4wVLxkrXjJWvGSseMlY8ZKx4iVjxUv0iq/ynyfleHqWPxRr/e/nyg1i2PmOaIzy8y8tZVzu8l+tTCKnzsDSmVg65QDzKWA+AuZTwXwUzMfAfBqYD9juXMC25wK2PwvY/ixg+7OA7c8Ctj8L2P4sYPuzBO7PJ6LHIz7fRedVgjv/q0z23e/qxPKpB5hPAfMRMJ8K5qNgPgbm08B8OpgP2P5cwfZnBdufFWx/VrD9WcH2ZwXbnxVsf1aw/VkD9+cTMeIRMxxhRzyixCMkHlHjERqPsHhEi0fEr+72+Ye2HEc9v/gocgeRDMjnP/Ii+vd+2+7eD7SZ8C/pRwYk4wff9QuQNi/IaHcQy4C0DEjPgIwMyEyAjG+sk1b+hvQ7SMmASAakZkA0A2IZkJYB6RmQkQGZCZD5hRVfip5fXPTuV6JZMiCSAakZEM2AWAakZUB6BmRkQL6w4kuXCzLGDeRJY/PXKSWFogn/iVIOS6G0FErPoHzh7t6vUEoKRVIoNYUSv170/pZtv57q/cVLWj3OpKyK/fxLx7VDzOPv28GPt7n//NWv3l/HJfCepN73mwSDeGEVF1bxyiqurOLGKt5YxVnPzcJ6cBbWk1NYT05hPTmF9eQU1pNTWE9OYT05JezkPAE9GvDxSWTn31/V9A4wgwH1iAaUaIBEAz7e0ca5aHTUO4BGAywa0KIBn65kO843TnaMO8CIBsxggB7RgBIN+PRjanJ+qcktoEUDPv0ht3remGgmNwA7ogHR3yL7eCVf747N+h1gRANmMKAd0YASDZBoQI0GaDTAogEtGvDFldzaHWBEAz5fyddm1+8A/eOVfG3XTwAlGiDRgE9XcruusLZj3gE0GmDRgBYN6NGAj1fytBNQjjvADAaMIxpQogESDajRAI0GWDSgRQP6FwF3K3mMaMDnK/m89dbkDjA/XsnXe80ngBINkGjAx2fyi//KnBoNsGhAiwb0aMCIBkS/DHlys/RbBH1ys6y0et2rbfbiDyZFj3O/K1rKDePJ1cV/BtFxQfqrP+F8bWaQPruZxCIvzPKVWV6Z5Y1ZvjHLd2b5wSw/ieWF+YQV5hNWmE9YYT5hhfmEFeYTVphPWGE+YYX5hBWUE/Yvn4pyaJ4+yefg94Z86bM7aizylVlemeWNWb4xy3dm+cEsP4nl9WCWZz5hlfmEVeYTVplPWGU+YZX5hFXmE1aZT1hlPmEN5YQ9fVAOzdMH5Rw8fVCOttMH5bQ6fVAOoNMH5Uw5fVCOidMHZec/fVA28798Gtj+3JLX+4uJyvos+PFbjZI/0y8meumzWMPv/B51gTOqcEYt2+in86X1WbDhtxoNOKOJZjQOOKMCZ5S+H/10srM+i3/8ViOFMzI4owZn1OGMBpzRRDOaB5xRgTPK3rN/PgBcnwV9fquRwhkZnFGDM+pwRgPOaKIZPZvM/1uVsnftn8/8X0qCp1TxlBraS6Rn1QO/VQnuVVs5JpxSdjDvV5QqnpLiKRmeEta+ZIWzruLhTTl1++FNOXT74c1ZV+HilEO3XZxy6LaLUw7ddnFlFaccuu3ilHUVLs56bnLWVbg468nJWVfh4qwnJ2ddhYuznpycdRUuznpyxtZVOKBHA0LrKhwwgwGxdRUOKNEAiQaE1lU4QKMBFg1o0YDQugoHjGjADAbE1lU4oEQDQusqHNCiAaETGh+A2LoKB0R/i2LrKhwwogEzGBBbV+GAEg2QaECNBmg0wKIBLRoQWlfhgBENCK2r8L9MhdZVOKBEAyQaEFpX4QCNBlg0oEUDejQgtK7CATMYEFtX4YASDZBoQI0GaDTAogEtGhBaV+GAEQ0Iravw2wuhdRUOKNEAiQaE1lU4QKMBFg1o0YAeDRjRgOiXIcF1Fe2Ir6t4MHjrKlyedpi2y9MO03Z52mHaLq/M8rTDtF2edpi2y9MO03Z52mHaLk9bV/GQ562rcHnmE5a3rsLlmU9Y3roKl2c+YXnrKlye+YTlratweaS6iocPVF2F+9AO03Z52mHaLk87TNvllVmedpi2y9MO03Z52mHaLk87TNvlaYdpP+R56ypcnvmE5a2rcHnmE5a3rsLlmU9Y3roKl2c+YXnrKlye+YSFqqtwH6S6CvdBqqtwH6S6CvdBOa1OH6S6CvdBqqtwH6S6CvdBqqtwH6S6iocPVF2F+ySv9xdD/d0Iq67CjbBm6Pm9K6y6CjfCqqtwI6y6CjfCqqtwI6y6CjfCqqtwI6y6iocRWF2FG2HVVbgRVl2FG2HVVbiRwhlh1VW4EVZdhRth1VW4EVZdhRth1VU8jMDqKtwIq67CjbDqKtwIq67CjRTOCKuuwo2w6ircCKuuwo2w6ircCKuuYiWPsOoqlhJWXcVSwqqrWEpYdRVLCWss/FLCqqtYSnCv2tDqKlaoEKuuYilh1VUsJcVTwqqrWEpg+1JPCBV35lBxZw4Vd+ZQcWcOFXfmUHFnDhV35lBxZw4Vd+ZQcWcOFXfmUHFnDhV35lBxZw4Vd+ZQcWcOFXfmUHFnDhV35lBxBwsVd7BQcWcOFXfmUHFnDhV35lBxZw4Vd+ZQcWcOFXfmUHFnDhV35lBxZw4Vd+ZQcWcOFXfmUHFnDhV35lBxZw4Vd+ZQcWcOFXewUHEHCxV3sFBxBwsVd7BQcQcLFXewUHEHCxV3sFBxBwsVd7BQcYcLFXe4UHGHCxV3uFBxhwsVd7hQcYcLFXe4UHGHCxV3uFBxhwsVd7hQcYcLFXe4UHGHCxV3uFBxhwsVd7hQcYcLFXe4UHGHCxV3uFBxhwsVd7hQcYcLFXe4UHGHCxV3uFBxhwsVd7hQcccLFXe8UHHHCxV3vFBxxwsVd7xQcccLFXe8UHHHCxV3vFBxxwsVd7xQcYcLFXf7z6dt0XqcNiovZMa1bc9D//5S+ed/en94D1LvSepdDlbxwiourOKVVVxZxY1VvLGKs56bhfXgLKwnp7CenMJ6cgrrySmsJ6ewnpzCenJK2Ml5Ano04OOTyM4rQGp6B5jBgHpEA0o0QKIBH+9o41w0OuodQKMBFg1o0YBPV7Id/a8vtWPcAUY0YAYD9IgGlGjApx9Tk/NLTW4BLRrw6Q+51fOaWjO5AdgRDYj+FtnHK1mvT5H1O8CIBsxgQDuiASUaINGAGg3QaIBFA1o04IsrubU7wIgGfL6Sr82u3wH6xyv52q6fAEo0QKIBn67kdqUo2jHvABoNsGhAiwb0aMDHK3meQ59bOe4AMxgwjmhAiQZINKBGAzQaYNGAFg3oXwTcreQxogGfr+TzIkqTO8D8eCVf7zWfAEo0QKIBH5/JL/4rc2o0wKIBLRrQowEjGhD9MuTJdetvEYbF11UMI66rGEZcVzGMuK5iGHFdxTDiuophxHUVw4jrKoYR11UMI66rGEZcVzGMuK5iGHFdxTDiuophxHUVw4jrKoYR11UMI66rGEZcVzGMuK5iGFZdxTCsuophxHUVw4jrKoYR11UMI66rGEZcVzGMuK5iGHFdxTDiuophxHUVw4jrKoYR11W4PPMJy1tX4fLMJyxvXcUw4roKl2c+YXnrKoYR11UMw6qrcB+kugr3QaqrcB+kugr3QTmtTh+kuophWHUVw7DqKoZh1VUMw6qrGIZVVzEMra5iGFpdxTC0uophaHUVw9DqKoah1VUMQ6urGIZWVzEMra5iGFpdxTC0uophaHUVw9DqKoah1VUMQ6urGIZWVzEMra5iGFpdxTC0uophaHUVw9DqKoah1VUMQ6urGIZWVzEMra5iGFpdxTC0uophaHUVw9DqKoah1VUMg6urWEpYdRVLCauuYilh1VUsJayx8EsJq65iKcG9akOrq1ihQqy6iqWEVVexlBRPCauuYilh7UtTOOsqHt6UU7cf3pRDtx/enHUVLk45dNvFKYduuzjl0G0XV1ZxyqHbLk5ZV+HirOcmZ12Fi7OenJx1FS7OenJy1lW4OOvJyVlX4eKsJ2dsXYUDejQgtK7CATMYEFtX4YASDZBoQGhdhQM0GmDRgBYNCK2rcMCIBsxgQGxdhQNKNCC0rsIBLRoQOqHxAYitq3BA9Lcotq7CASMaMIMBsXUVDijRAIkG1GiARgMsGtCiAaF1FQ4Y0YDQugr/y1RoXYUDSjRAogGhdRUO0GiARQNaNKBHA0LrKhwwgwGxdRUOKNEAiQbUaIBGAywa0KIBoXUVDhjRgNC6Cr+9EFpX4YASDZBoQGhdhQM0GmDRgBYN6NGAEQ2IfhkSW1chRwmvq3AGbV3Fkmcdpr3kWYdpL3nWYdpLXpnlWYdpL3nWYdpLnnWY9pJnHaa95FnrKlyetq5iyTOfsLR1FUue+YSlratY8swnLG1dxZJnPmFp6yqWPFBdhfsg1VUsH9Zh2kuedZj2kmcdpr3klVmedZj2kmcdpr3kWYdpL3nWYdpLnnWYtsvT1lUseeYTlrauYskzn7C0dRVLnvmEpa2rWPLMJyxtXcWSZz5hkeoqlg9QXcXyAaqrWD5AdRXLB+W0On2A6iqWD1BdxfIBqqtYPkB1FcsHqK7CfZDqKpZP8nr/+VD/ZQRVV7GMoGborXtXUHUVywiqrmIZQdVVLCOouoplBFVXsYyg6iqWEVRdhRth1VUsI6i6imUEVVexjKDqKpaRwhlB1VUsI6i6imUEVVexjKDqKpYRVF2FG2HVVSwjqLqKZQRVV7GMoOoqlpHCGUHVVSwjqLqKZQRVV7GMoOoqlhFUXcWP5BFUXcUPJai6ih9KUHUVP5Sg6ip+KEGNhf+hBFVX8UMJ7lUbWF3Fj1AhVF3FDyWouoofSoqnBFVX8UMJbF8aCaHiwRwqHsyh4sEcKh7MoeLBHCoezKHiwRwqHsyh4sEcKh7MoeLBHCoezKHiwRwqHsyh4sEcKh7MoeLBHCoezKHiwRwqHmCh4gEWKh7MoeLBHCoezKHiwRwqHsyh4sEcKh7MoeLBHCoezKHiwRwqHsyh4sEcKh7MoeLBHCoezKHiwRwqHsyh4sEcKh7MoeIBFioeYKHiARYqHmCh4gEWKh5goeIBFioeYKHiARYqHmCh4gEWKh5woeIBFyoecKHiARcqHnCh4gEXKh5woeIBFyoecKHiARcqHnCh4gEXKh5woeIBFyoecKHiARcqHnCh4gEXKh5woeIBFyoecKHiARcqHnCh4gEXKh5woeIBFyoecKHiARcqHnCh4gEXKh54oeKBFyoeeKHigRcqHnih4oEXKh54oeKBFyoeeKHigRcqHnih4oEXKh5woWI5noSKTfv5mLX+c8b3Lp4/dAaWzsTSeZLO/n0+BcxHwHwqmI+C+RiYTwPzAdudC9j2XMD2ZwHbnwVsfxaw/VnA9mcB258FbH+WwP35RPR4xOe76PdusbrPxPKpB5hPAfMRMJ8K5qNgPgbm08B8OpgP2P5cwfZnBdufFWx/VrD9WcH2ZwXbnxVsf1aw/VkD9+cTMeIRMxxhRzyixCMkHlHjERqPsHhEi0fEr+72+Yf2xX1/h0gG5PMf+es/ybWZ8C/pRwYk4wff9QuQn95wd4hlQFoGpGdARgZkJkDGN9bJT+/iOqRkQCQDUjMgmgGxDEjLgPQMyMiAzATI/MKK//nVUoeUDIhkQGoGRDMglgFpGZCeARkZkC+s+J9fF17Xqo4USkmhaMJ/opTDUigthdIzKF+4u/crlJJCkRRKTaHErxe5v2Xbr6d6f/GSVo/zzq/Kiyu/49oh5qH/819vc//5q1+5v45L4D1Jve83CQbxwiourOKVVVxZxY1VvLGKs56bhfXgLKwnp7CenMJ6cgrrySmsJ6ewnpzCenJK2Ml5Ano04OOTyM6/v6rpHWAGA+oRDSjRAIkGfLyjjXPR6Kh3AI0GWDSgRQM+Xcl2nG+c7Bh3gBENmMEAPaIBJRrw6cfU5PxSk1tAiwZ8+kNu9bwx0UxuAHZEA6K/RfbxSr7eHZv1O8CIBsxgQDuiASUaINGAGg3QaIBFA1o04IsrubU7wIgGfL6Sr82u3wH6xyv52q6fAEo0QKIBn67kdl1hbce8A2g0wKIBLRrQowEfr+RpJ6Acd4AZDBhHNKBEAyQaUKMBGg2waECLBvQvAu5W8hjRgM9X8nnrrckdYH68kq/3mk8AJRog0YCPz+QX/5U5NRpg0YAWDejRgBENiH4Z8uRm6bcI9cnNsn84UPI497uipdwwSvJk5u/NDKrPbiaxyAuzfGWWV2Z5Y5ZvzPKdWX4wy09ieWE+YYX5hBXmE1aYT1hhPmGF+YQV5hNWmE9YYT5hBeWE/cunohyap0/yOfi9IV/12R01FvnKLK/M8sYs35jlO7P8YJafxPJ6MMszn7DKfMIq8wmrzCesMp+wynzCKvMJq8wnrDKfsIZywp4+KIfm6YNyDp4+KEfb6YNyWp0+KAfQ6YNyppw+KMfE6YOy858+KJv5Xz4NbH9uyev9xUTl+iz48VuNsJqq67NYw+/8HnWBM6pwRtn9yz+fL12fBRt+q9GAM5poRuOAMypwRun70U8nO9dn8Y/faqRwRgZn1OCMOpzRgDOaaEbzgDMqcEbZe/bPB4DXZ0Gf32qkcEYGZ9TgjDqc0YAzmmhGzybz/1al7F375zP/l5LgKVU8pYb2EulZ9cBvVYJ71VaOCaeUHcz7FaWKp6R4SoanBLYvTc66ioc35dTthzfl0O2HN2ddhYtTDt12ccqh2y5OOXTbxZVVnHLototT1lW4OOu5yVlX4eKsJydnXYWLs56cnHUVLs56cnLWVbg468kZW1fhgB4NCK2rcMAMBsTWVTigRAMkGhBaV+EAjQZYNKBFA0LrKhwwogEzGBBbV+GAEg0IratwQIsGhE5ofABi6yocEP0tiq2rcMCIBsxgQGxdhQNKNECiATUaoNEAiwa0aEBoXYUDRjQgtK7C/zIVWlfhgBINkGhAaF2FAzQaYNGAFg3o0YDQugoHzGBAbF2FA0o0QKIBNRqg0QCLBrRoQGhdhQNGNCC0rsJvL4TWVTigRAMkGhBaV+EAjQZYNKBFA3o0YEQDol+GBNdV6Iivq3gweOsqXJ52mLbL0w7TdnnaYdour8zytMO0XZ52mLbL0w7TdnnaYdouT1tX8ZDnratweeYTlreuwuWZT1jeugqXZz5heesqXJ75hOWtq3B5pLqKhw9UXYX70A7TdnnaYdouTztM2+WVWZ52mLbL0w7TdnnaYdouTztM2+Vph2k/5HnrKlye+YTlratweeYTlreuwuWZT1jeugqXZz5heesqXJ75hIWqq3AfpLoK90Gqq3AfpLoK90E5rU4fpLoK90Gqq3AfpLoK90Gqq3AfpLqKhw9UXYX7JK/3F0P93QirrsKNsGbo+b0rrLoKN8Kqq3AjrLoKN8Kqq3AjrLoKN8Kqq3AjrLqKhxFYXYUbYdVVuBFWXYUbYdVVuJHCGWHVVbgRVl2FG2HVVbgRVl2FG2HVVTyMwOoq3AirrsKNsOoq3AirrsKNFM4Iq67CjbDqKtwIq67CjbDqKtwIq65iJY+w6iqWElZdxVLCqqtYSlh1FUsJayz8UsKqq1hKcK/a0OoqVqgQq65iKWHVVSwlxVPCqqtYSlj7kll8qPjB4A0Vuzxt5MnlaSNPLk8beXJ5ZZanjTy5PG3kyeVpI08uTxt5cnnaUPFDnjdU7PLMJyxvqNjlmU9Y3lCxyzOfsLyhYpdnPmF5Q8UujxQqfvhAhYrdhzby5PK0kSeXp408ubwyy9NGnlyeNvLk8rSRJ5enjTy5PG3k6SHPGyp2eeYTljdU7PLMJyxvqNjlmU9Y3lCxyzOfsLyhYpdnPmGhQsXugxQqdh+kULH7IIWK3QfltDp9kELF7oMUKnYfpFCx+yCFit0HKVT88IEKFbtP8np/Eb10I6xQsRth3XT0e1dYoWI3wgoVuxFWqNiNsELFboQVKnYjrFCxG2GFih9GYKFiN8IKFbsRVqjYjbBCxW6kcEZYoWI3wgoVuxFWqNiNsELFboQVKn4YgYWK3QgrVOxGWKFiN8IKFbuRwhlhhYrdCCtU7EZYoWI3wgoVuxFWqHglj7BCxUsJK1S8lLBCxUsJK1S8lODCe2ih4qUE96oNLVS8QoVYoeKlhBUqXkqKp4QVKl5KWPtSq//5tC1aj9NG5YXMuLbteejfXyr//E/vD+9B6j1JvcvBKl5YxYVVvLKKK6u4sYo3VnHWc7OwHpyF9eQU1pNTWE9OYT05hfXkFNaTU1hPTgk7OU9AjwZ8fBLZeQVITe8AMxhQj2hAiQZINODjHW2ci0ZHvQNoNMCiAS0a8OlKtqP/9aV2jDvAiAbMYIAe0YASDfj0Y2pyfqnJLaBFAz79Ibd6XlNrJjcAO6IB0d8i+3gl6/Upsn4HGNGAGQxoRzSgRAMkGlCjARoNsGhAiwZ8cSW3dgcY0YDPV/K12fU7QP94JV/b9RNAiQZINODTldyuFEU75h1AowEWDWjRgB4N+Hglz3PocyvHHWAGA8YRDSjRAIkG1GiARgMsGtCiAf2LgLuVPEY04POVfF5EaXIHmB+v5Ou95hNAiQZINODjM/nFf2VOjQZYNKBFA3o0YEQDol+GPLlu/S1Cr/F1Fb0S11X0SlxX0StxXUWvxHUVvRLXVfRKXFfRK3FdRa/EdRW9EtdV9EpcV9ErcV1Fr8R1Fb0S11X0SlxX0StxXUWvxHUVvRLXVfRKXFfRK3FdRa9YdRW9YtVV9EpcV9ErcV1Fr8R1Fb0S11X0SlxX0StxXUWvxHUVvRLXVfRKXFfRK3FdRa/EdRUuz3zC8tZVuDzzCctbV9ErcV2FyzOfsLx1Fb0S11X0ilVX4T5IdRXug1RX4T5IdRXug3JanT5IdRW9YtVV9IpVV9ErVl1Fr1h1Fb1i1VX0ilZX0StaXUWvaHUVvaLVVfSKVlfRK1pdRa9odRW9otVV9IpWV9ErWl1Fr2h1Fb2i1VX0ilZX0StaXUWvaHUVvaLVVfSKVlfRK1pdRa9odRW9otVV9IpWV9ErWl1Fr2h1Fb2i1VX0ilZX0StaXUWvaHUVvaLVVfSKVlfRK1pdRa9wdRVLCauuYilh1VUsJay6iqWENRZ+KWHVVSwluFdtaHUVK1SIVVexlLDqKpaS4ilh1VUsJax9aRycdRUPb8qp2w9vyqHbD2/OugoXpxy67eKUQ7ddnHLotosrqzjl0G0Xp6yrcHHWc5OzrsLFWU9OzroKF2c9OTnrKlyc9eTkrKtwcdaTM7auwgE9GhBaV+GAGQyIratwQIkGSDQgtK7CARoNsGhAiwaE1lU4YEQDZjAgtq7CASUaEFpX4YAWDQid0PgAxNZVOCD6WxRbV+GAEQ2YwYDYugoHlGiARANqNECjARYNaNGA0LoKB4xoQGhdhf9lKrSuwgElGiDRgNC6CgdoNMCiAS0a0KMBoXUVDpjBgNi6CgeUaIBEA2o0QKMBFg1o0YDQugoHjGhAaF2F314IratwQIkGSDQgtK7CARoNsGhAiwb0aMCIBkS/DAmuqxgzvq7iweCtq3B52mHaLk87TNvlaYdpu7wyy9MO03Z52mHaLk87TNvlaYdpuzxtXcVDnreuwuWZT1jeugqXZz5heesqXJ75hOWtq3B55hOWt67C5ZHqKh4+UHUV7kM7TNvlaYdpuzztMG2XV2Z52mHaLk87TNvlaYdpuzztMG2Xpx2m/ZDnratweeYTlreuwuWZT1jeugqXZz5heesqXJ75hOWtq3B55hMWqq7CfZDqKtwHqa7CfZDqKtwH5bQ6fZDqKtwHqa7CfZDqKtwHqa7CfZDqKh4+UHUV7pO83l8M9XcjrLoKN8Kaoef3rrDqKtwIq67CjbDqKtwIq67CjbDqKtwIq67CjbDqKh5GYHUVboRVV+FGWHUVboRVV+FGCmeEVVfhRlh1FW6EVVfhRlh1FW6EVVfxMAKrq3AjrLoKN8Kqq3AjrLoKN1I4I6y6CjfCqqtwI6y6CjfCqqtwI6y6ipU8wqqrWEpYdRVLCauuYilh1VUsJbCx8BOurmIpwb1qQ6urWKFCrLqKpYRVV7GUFE8Jq65iKWHtS7PFh4ofDN5QscvTRp5cnjby5PK0kSeXV2Z52siTy9NGnlyeNvLk8rSRJ5enDRU/5HlDxS7PfMLyhopdnvmE5Q0VuzzzCcsbKnZ55hOWN1Ts8kih4ocPVKjYfWgjTy5PG3lyedrIk8srszxt5MnlaSNPLk8beXJ52siTy9NGnh7yvKFil2c+YXlDxS7PfMLyhopdnvmE5Q0VuzzzCcsbKnZ55hMWKlTsPkihYvdBChW7D1Ko2H1QTqvTBylU7D5IoWL3QQoVuw9SqNh9kELFDx+oULH7JK/3F9FLN8IKFbsR1k1Hv3eFFSp2I6xQsRthhYrdCCtU7EZYoWI3wgoVuxFWqPhhBBYqdiOsULEbYYWK3QgrVOxGCmeEFSp2I6xQsRthhYrdCCtU7EZYoeKHEVio2I2wQsVuhBUqdiOsULEbKZwRVqjYjbBCxW6EFSp2I6xQsRthhYpX8ggrVLyUsELFSwkrVLyUsELFSwkuvIcWKl5KcK/a0ELFK1SIFSpeSlih4qWkeEpYoeKlBLUv2dOAQD9OoW5/F32Xw67H+nuPjfcem289dn9r/PVj5b3H5L3HbtfyOI6/HhvH/WP63mP23mPtvcf6e4+N9x6bbz12f01yXO88Rx+3j5X3HpP3HqvvPabvPWbvPdbee+z+UzL6+dhst4+N9x6bbz12f9Xn9WPlvcfkvcfqe4/dfkpmORfOLLcL5/62yOvH2nuP9fceG+89Nt967P7CwevHyovH5Pbn1uS9x+p7j91/Suq5uqferu77GwavH2vvPdbfe2y899h867F+vPfY/aekXb/hHar/67n/90+++IRIBqRmQDQDYhmQlgHpGZCRAZkJkPtrAd+GZKz4kbHiR8aKHxkrfmSs+JGx4kfGih8ZK35krPiZseJnxoqfGSt+Zqz4mbHiZ8aKnxkrfmas+Jmx4mfGin/yJ8mvU0oKRVIoNYWiKRRLobQUSk+hjBRKytovKWu/pKz9krL2S8raLylrv6Ss/ZKy9kvK2i8pa7+krH1JWfuSsvYlZe1LytqXlLUvKWtfUta+pKx9SVn7krL2a8rarylrv6as/Zqy9mvK2q8pa7+mrP2asvZrytqvKWtfU9a+pqx9TVn7mrL2NWXta8ra15S1rylrX1PWvqasfUtZ+5ay9i1l7VvK2reUtW8pa99S1r6lrH1LWfuWsvZbytpvKWu/paz9lrL2W8rabylrv6Ws/Zay9lvK2m8pa7+nrP2Uu3sl5fJeSbm9V1Ku75WU+3sl5QJfSbnBV1Ku8JWUO3wl5RJfSbnFV1Ku8ZWUe3wl5SJfSbnJV1Ku8pWUu3wl5TJfSbnNV1Ku85WU+3wl5UJfSbnRV1Ku9JWUO30l5VJfSbnVV1Ku9ZWUe32Scq9PUu71Scq9Pkm51yeHplAshdJSKD2FMlIoKWs/5V6fpNzrk5R7fZJyr09S7vVJyr0+SbnXJyn3+iTlXp+k3OuTlHt9knKvT1Lu9UnKvT5JudcnKff6JOVen6Tc65OUe32Scq9PUu71Scq9Pkm51ycp9/ok5V6fpNzrk5R7fZJyr09S7vVJyr0+SbnXJyn3+iTlXp+k3OuTlHt98oW7cHacs1ms/NfAUf17jN4XrsK9hnzh9pjJBal2D5EMSM2AaAbEMiD/9GC5HuxvPviFP/K//jx/4W/8vwCxDEjLgGRsZF/4+77pOZ/ZTO4hMwHyhb/u/wKkZEAkA/KFFV/HBan3EM2AWAakZUB6BmRkQGbCMfmFv+n/AiTjl7CZ8UvYzPgl7At/z/8FSMYvYV/4a/4vQHoGZGRAElZ8PY4MSMmASAakZkA0A2IZkJYB6RmQkQHJWPElY8WXjBVfMlZ8yVjxJWPFl4wVXzJWfMlY8SVjxZeMFS8ZK14yVrxkrHjJWPGSseIlY8VLxoqX4BXfDvnPfb+Y6Vn+UKz9rx7Q/4sYdr4jGqP8/EtLGZe7yH/9J7+cOgNLZ2Lp3P8W8xt9CpiPgPlUMB8F8zEwnwbmA7Y7F7DtuYDtzwK2PwvY/ixg+7OA7c8Ctj8L2P4sgfvziejxiM930XmUv7521uPj7+rE8qkHmE8B8xEwnwrmo2A+BubTwHw6mA/Y/lzB9mcF258VbH9WsP1ZwfZnBdufFWx/VrD9WQP35xMx4hEzHGFHPKLEIyQeUeMRGo+weESLR8Sv7vb5h7YcRz2/+ChyB5EMyOc/8iL6937b7t4PtJnwL+lHBiTjB9/1C5A2L8hodxDLgLQMSM+AjAzITICMb6yTVv6G9DtIyYBIBqRmQDQDYhmQlgHpGZCRAZkJkPmFFV+Knl9c9O5XolkyIJIBqRkQzYBYBqRlQHoGZGRAvrDiS5cLMsYN5Elj89cpJYWiCf+JUg5LobQUSs+gfOHu3q9QSgpFUig1hRK/XvT+lm2/nur9xUtaPc6krIr9/EvHtUPM4+/bwY+3uf/81a/eX8cl8J6k3vebBIN4YRUXVvHKKq6s4sYq3ljFWc/NwnpwFtaTU1hPTmE9OYX15BTWk1NYT05hPTkl7OQ8AT0a8PFJZOffX9X0DjCDAfWIBpRogEQDPt7RxrlodNQ7gEYDLBrQogGfrmQ7zjdOdow7wIgGzGCAHtGAEg349GNqcn6pyS2gRQM+/SG3et6YaCY3ADuiAdHfIvt4JV/vjs36HWBEA2YwoB3RgBINkGhAjQZoNMCiAS0a8MWV3NodYEQDPl/J12bX7wD945V8bddPACUaINGAT1dyu66wtmPeATQaYNGAFg3o0YCPV/K0E1COO8AMBowjGlCiARINqNEAjQZYNKBFA/oXAXcreYxowOcr+bz11uQOMD9eydd7zSeAEg2QaMDHZ/KL/8qcGg2waECLBvRowIgGRL8MeXKz9FuE8uRmWWn1ulfb7MUfTIoe535XtJQbxpOri/8MouOC9Fd/wvnazKDy7GYSi7wwy1dmeWWWN2b5xizfmeUHs/wklhfmE1aYT1hhPmGF+YQV5hNWmE9YYT5hhfmEFeYTVlBO2L98Ksqhefokn4PfG/JVnt1RY5GvzPLKLG/M8o1ZvjPLD2b5SSyvB7M88wmrzCesMp+wynzCKvMJq8wnrDKfsMp8wirzCWsoJ+zpg3Jonj4o5+Dpg3K0nT4op9Xpg3IAnT4oZ8rpg3JMnD4oO//pg7KZ/+XTwPbnlrzeX0xULs+CH7/VKPkz/WKiV3kWa/id36MucEYVzqhlG/10vnR5Fmz4rUYDzmiiGY0DzqjAGaXvRz+d7FyexT9+q5HCGRmcUYMz6nBGA85oohnNA86owBll79k/HwBengV9fquRwhkZnFGDM+pwRgPOaKIZPZvM/1uVsnftn8/8X0qCp1TxlBraS6Rn1QO/VQnuVVs5JpxSdjDvV5QqnpLiKRmeEta+JIWzruLhTTl1++FNOXT74c1ZV+HilEO3XZxy6LaLUw7ddnFlFaccuu3ilHUVLs56bnLWVbg468nJWVfh4qwnJ2ddhYuznpycdRUuznpyxtZVOKBHA0LrKhwwgwGxdRUOKNEAiQaE1lU4QKMBFg1o0YDQugoHjGjADAbE1lU4oEQDQusqHNCiAaETGh+A2LoKB0R/i2LrKhwwogEzGBBbV+GAEg2QaECNBmg0wKIBLRoQWlfhgBENCK2r8L9MhdZVOKBEAyQaEFpX4QCNBlg0oEUDejQgtK7CATMYEFtX4YASDZBoQI0GaDTAogEtGhBaV+GAEQ0Iravw2wuhdRUOKNEAiQaE1lU4QKMBFg1o0YAeDRjRgOiXIcF1FfWIr6t4MHjrKlyedpi2y9MO03Z52mHaLq/M8rTDtF2edpi2y9MO03Z52mHaLk9bV/GQ562rcHnmE5a3rsLlmU9Y3roKl2c+YXnrKlye+YTlratweaS6iocPVF2F+9AO03Z52mHaLk87TNvllVmedpi2y9MO03Z52mHaLk87TNvlaYdpP+R56ypcnvmE5a2rcHnmE5a3rsLlmU9Y3roKl2c+YXnrKlye+YSFqqtwH6S6CvdBqqtwH6S6CvdBOa1OH6S6CvdBqqtwH6S6CvdBqqtwH6S6iocPVF2F+ySv9xdD/d0Iq67CjbBm6Pm9K6y6CjfCqqtwI6y6CjfCqqtwI6y6CjfCqqtwI6y6iocRWF2FG2HVVbgRVl2FG2HVVbiRwhlh1VW4EVZdhRth1VW4EVZdhRth1VU8jMDqKtwIq67CjbDqKtwIq67CjRTOCKuuwo2w6ircCKuuwo2w6ircCKuuYiWPsOoqlhJWXcVSwqqrWEpYdRVLCWss/FLCqqtYSnCv2tDqKlaoEKuuYilh1VUsJcVTwqqrWEpg+1JPCBV35lBxZw4Vd+ZQcWcOFXfmUHFnDhV35lBxZw4Vd+ZQcWcOFXfmUHFnDhV35lBxZw4Vd+ZQcWcOFXfmUHFnDhV35lBxBwsVd7BQcWcOFXfmUHFnDhV35lBxZw4Vd+ZQcWcOFXfmUHFnDhV35lBxZw4Vd+ZQcWcOFXfmUHFnDhV35lBxZw4Vd+ZQcWcOFXewUHEHCxV3sFBxBwsVd7BQcQcLFXewUHEHCxV3sFBxBwsVd7BQcYcLFXe4UHGHCxV3uFBxhwsVd7hQcYcLFXe4UHGHCxV3uFBxhwsVd7hQcYcLFXe4UHGHCxV3uFBxhwsVd7hQcYcLFXe4UHGHCxV3uFBxhwsVd7hQcYcLFXe4UHGHCxV3uFBxhwsVd7hQcccLFXe8UHHHCxV3vFBxxwsVd7xQcccLFXe8UHHHCxV3vFBxxwsVd7xQcYcLFav959O2aD1OG5UXMuPatuehf3+p/PM/vT+8B6n3JPUuB6t4YRUXVvHKKq6s4sYq3ljFWc/NwnpwFtaTU1hPTmE9OYX15BTWk1NYT05hPTkl7OQ8AT0a8PFJZOcVIDW9A8xgQD2iASUaINGAj3e0cS4aHfUOoNEAiwa0aMCnK9mO/teX2jHuACMaMIMBekQDSjTg04+pyfmlJreAFg349Ifc6nlNrZncAOyIBkR/i+zjlazXp8j6HWBEA2YwoB3RgBINkGhAjQZoNMCiAS0a8MWV3NodYEQDPl/J12bX7wD945V8bddPACUaINGAT1dyu1IU7Zh3AI0GWDSgRQN6NODjlTzPoc+tHHeAGQwYRzSgRAMkGlCjARoNsGhAiwb0LwLuVvIY0YDPV/J5EaXJHWB+vJKv95pPACUaINGAj8/kF/+VOTUaYNGAFg3o0YARDYh+GfLkuvW3CGbxdRVmxHUVZsR1FWbEdRVmxHUVZsR1FWbEdRVmxHUVZsR1FWbEdRVmxHUVZsR1FWbEdRVmxHUVZsR1FWbEdRVmxHUVZsR1FWbEdRVmxHUVZlh1FWZYdRVmxHUVZsR1FWbEdRVmxHUVZsR1FWbEdRVmxHUVZsR1FWbEdRVmxHUVZsR1FS7PfMLy1lW4PPMJy1tXYUZcV+HyzCcsb12FGXFdhRlWXYX7INVVuA9SXYX7INVVuA/KaXX6INVVmGHVVZhh1VWYYdVVmGHVVZhh1VWYodVVmKHVVZih1VWYodVVmKHVVZih1VWYodVVmKHVVZih1VWYodVVmKHVVZih1VWYodVVmKHVVZih1VWYodVVmKHVVZih1VWYodVVmKHVVZih1VWYodVVmKHVVZih1VWYodVVmKHVVZih1VWYodVVmKHVVZih1VWYwdVVLCWsuoqlhFVXsZSw6iqWEtZY+KWEVVexlOBetaHVVaxQIVZdxVLCqqtYSoqnhFVXsZSw9qUmnHUVD2/KqdsPb8qh2w9vzroKF6ccuu3ilEO3XZxy6LaLK6s45dBtF6esq3Bx1nOTs67CxVlPTs66ChdnPTk56ypcnPXk5KyrcHHWkzO2rsIBPRoQWlfhgBkMiK2rcECJBkg0ILSuwgEaDbBoQIsGhNZVOGBEA2YwILauwgElGhBaV+GAFg0IndD4AMTWVTgg+lsUW1fhgBENmMGA2LoKB5RogEQDajRAowEWDWjRgNC6CgeMaEBoXYX/ZSq0rsIBJRog0YDQugoHaDTAogEtGtCjAaF1FQ6YwYDYugoHlGiARANqNECjARYNaNGA0LoKB4xoQGhdhd9eCK2rcECJBkg0ILSuwgEaDbBoQIsG9GjAiAZEvwwJrqvoJb6u4sHgratwedph2i5PO0zb5WmHabu8MsvTDtN2edph2i5PO0zb5WmHabs8bV3FQ563rsLlmU9Y3roKl2c+YXnrKlye+YTlratweeYTlreuwuWR6ioePlB1Fe5DO0zb5WmHabs87TBtl1dmedph2i5PO0zb5WmHabs87TBtl6cdpv2Q562rcHnmE5a3rsLlmU9Y3roKl2c+YXnrKlye+YTlratweeYTFqquwn2Q6ircB6muwn2Q6ircB+W0On2Q6ircB6muwn2Q6ircB6muwn2Q6ioePlB1Fe6TvN5fDPV3I6y6CjfCmqHn966w6ircCKuuwo2w6ircCKuuwo2w6ircCKuuwo2w6ioeRmB1FW6EVVfhRlh1FW6EVVfhRgpnhFVX4UZYdRVuhFVX4UZYdRVuhFVX8TACq6twI6y6CjfCqqtwI6y6CjdSOCOsugo3wqqrcCOsugo3wqqrcCOsuoqVPMKqq1hKWHUVSwmrrmIpYdVVLCWssfBLCauuYinBvWpDq6tYoUKsuoqlhFVXsZQUTwmrrmIpge1LIyFUPJhDxYM5VDyYQ8WDOVQ8mEPFgzlUPJhDxYM5VDyYQ8WDOVQ8mEPFgzlUPJhDxYM5VDyYQ8WDOVQ8mEPFgzlUPJhDxQMsVDzAQsWDOVQ8mEPFgzlUPJhDxYM5VDyYQ8WDOVQ8mEPFgzlUPJhDxYM5VDyYQ8WDOVQ8mEPFgzlUPJhDxYM5VDyYQ8WDOVQ8wELFAyxUPMBCxQMsVDzAQsUDLFQ8wELFAyxUPMBCxQMsVDzAQsUDLlQ84ELFAy5UPOBCxQMuVDzgQsUDLlQ84ELFAy5UPOBCxQMuVDzgQsUDLlQ84ELFAy5UPOBCxQMuVDzgQsUDLlQ84ELFAy5UPOBCxQMuVDzgQsUDLlQ84ELFAy5UPOBCxQMuVDzgQsUDL1Q88ELFAy9UPPBCxQMvVDzwQsUDL1Q88ELFAy9UPPBCxQMvVDzwQsUDLlQ8jyehYtN+Pmat/5zxvYvnD52BpTOxdJ6ks3+fTwHzETCfCuajYD4G5tPAfMB25wK2PRew/VnA9mcB258FbH8WsP1ZwPZnAdufJXB/PhE9HvH5Lvq9W6zuM7F86gHmU8B8BMyngvkomI+B+TQwnw7mA7Y/V7D9WcH2ZwXbnxVsf1aw/VnB9mcF258VbH/WwP35RIx4xAxH2BGPKPEIiUfUeITGIywe0eIR8au7ff6hfXHf3yGSAfn8R/76T3JtJvxL+pEByfjBd/0C5Kc33B1iGZCWAekZkJEBmQmQ8Y118tO7uA4pGRDJgNQMiGZALAPSMiA9AzIyIDMBMr+w4n9+tdQhJQMiGZCaAdEMiGVAWgakZ0BGBuQLK/7n14XXtaojhVJSKJrwnyjlsBRKS6H0DMoX7u79CqWkUCSFUlMo8etF7m/Z9uup3l+8pNXjvPOr8uLK77h2iHno//zX29x//upX7q/jEnhPUu/7TYJBvLCKC6t4ZRVXVnFjFW+s4qznZmE9OAvrySmsJ6ewnpzCenIK68kprCensJ6cEnZynoAeDfj4JLLz769qegeYwYB6RANKNECiAR/vaONcNDrqHUCjARYNaNGAT1eyHecbJzvGHWBEA2YwQI9oQIkGfPoxNTm/1OQW0KIBn/6QWz1vTDSTG4Ad0YDob5F9vJKvd8dm/Q4wogEzGNCOaECJBkg0oEYDNBpg0YAWDfjiSm7tDjCiAZ+v5Guz63eA/vFKvrbrJ4ASDZBowKcruV1XWNsx7wAaDbBoQIsG9GjAxyt52gkoxx1gBgPGEQ0o0QCJBtRogEYDLBrQogH9i4C7lTxGNODzlXzeemtyB5gfr+TrveYTQIkGSDTg4zP5xX9lTo0GWDSgRQN6NGBEA6Jfhjy5WfolQj+e3Cz7hwMlj3O/K1rKDaMkT2b+2sygJV+Y5YVZvjLLK7O8Mcs3ZvnOLD+Y5SexvDCfsMJ8wgrzCSvMJ6wwn7DCfMIK8wkrzCesMJ+wgnLC/uVTUQ7N0yf5HPzakK8lL8zylVlemeWNWb4xy3dm+cEsP4nl9WCWZz5hlfmEVeYTVplPWGU+YZX5hFXmE1aZT1hlPmEN5YQ9fVAOzdMH5Rw8fVCOttMH5bQ6fVAOoNMH5Uw5fVCOidMHZec/fVA28798Gtj+3JLX+88nKi8jgzOCaqpe964K2veoC5xRhTPK7l/+6XzpZdThjAac0UQzGgecUYEzSt+PfjbZeRlVOCOFMzI4owZn1OGMBpzRRDOaB5xRgTPK3rN/OgB8GVU4I4UzMjijBmfU4YwGnNFEM3o2mf+3KmXv2j+d+f9DSfCUKp5SQ3uJ9Kx64Lcqwb1qK8eEU8oO5v2KUsVTUjwlw1MC25cmZV2FezNO3XZvxqHb7k1ZV7HEGYduL3HGodtLnHHo9hJXVnHGodtLnLGuYomznpuUdRVLnPXkpKyrWOKsJydlXcUSZz05KesqljjryRlaV7EAPRoQWVexADMYEFpXsQAlGiDRgMi6igXQaIBFA1o0ILKuYgFGNGAGA0LrKhagRAMi6yoWoEUDIic0OsCOaED0tyi0rmIBRjRgBgNC6yoWoEQDJBpQowEaDbBoQIsGRNZVLMCIBkTWVay/TEXWVSxAiQZINCCyrmIBNBpg0YAWDejRgMi6igWYwYDQuooFKNEAiQbUaIBGAywa0KIBkXUVCzCiAZF1Fev2QmRdxQKUaIBEAyLrKhZAowEWDWjRgB4NGNGA6JchwXUVZcTXVTwYvHUVLk87TNvlaYdpuzztMG2XV2Z52mHaLk87TNvlaYdpuzztMG2Xp62reMjz1lW4PPMJy1tX4fLMJyxvXYXLM5+wvHUVLs98wvLWVbg8Ul3FwweqrsJ9aIdpuzztMG2Xpx2m7fLKLE87TNvlaYdpuzztMG2Xpx2m7fK0w7Qf8rx1FS7PfMLy1lW4PPMJy1tX4fLMJyxvXYXLM5+wvHUVLs98wkLVVbgPUl2F+yDVVbgPUl2F+6CcVqcPUl2F+yDVVbgPUl2F+yDVVbgPUl3FwweqrsJ9ktf7i6H+boRVV+FGWDP0/N4VVl2FG2HVVbgRVl2FG2HVVbgRVl2FG2HVVbgRVl3FwwisrsKNsOoq3AirrsKNsOoq3EjhjLDqKtwIq67CjbDqKtwIq67CjbDqKh5GYHUVboRVV+FGWHUVboRVV+FGCmeEVVfhRlh1FW6EVVfhRlh1FW6EVVexkkdYdRVLCauuYilh1VUsJay6iqWENRZ+KWHVVSwluFdtaHUVK1SIVVexlLDqKpaS4ilh1VUsJax9SSw+VPxg8IaKXZ428uTytJEnl6eNPLm8MsvTRp5cnjby5PK0kSeXp408uTxtqPghzxsqdnnmE5Y3VOzyzCcsb6jY5ZlPWN5Qscszn7C8oWKXRwoVP3ygQsXuQxt5cnnayJPL00aeXF6Z5WkjTy5PG3lyedrIk8vTRp5cnjby9JDnDRW7PPMJyxsqdnnmE5Y3VOzyzCcsb6jY5ZlPWN5Qscszn7BQoWL3QQoVuw9SqNh9kELF7oNyWp0+SKFi90EKFbsPUqjYfZBCxe6DFCp++ECFit0neb2/iF66EVao2I2wbjr6vSusULEbYYWK3QgrVOxGWKFiN8IKFbsRVqjYjbBCxQ8jsFCxG2GFit0IK1TsRlihYjdSOCOsULEbYYWK3QgrVOxGWKFiN8IKFT+MwELFboQVKnYjrFCxG2GFit1I4YywQsVuhBUqdiOsULEbYYWK3QgrVLySR1ih4qWEFSpeSlih4qWEFSpeSnDhPbRQ8VKCe9WGFipeoUKsUPFSwgoVLyXFU8IKFS8lrH2p1v982hatx2mj8kJmXNv2PPTvL5V//qf3h/cg9Z6k3uVgFS+s4sIqXlnFlVXcWMUbqzjruVlYD87CenIK68kprCensJ6cwnpyCuvJKawnp4SdnCegRwM+PonsvAKkpneAGQyoRzSgRAMkGvDxjjbORaOj3gE0GmDRgBYN+HQl29H/+lI7xh1gRANmMECPaECJBnz6MTU5v9TkFtCiAZ/+kFs9r6k1kxuAHdGA6G+RfbyS9foUWb8DjGjADAa0IxpQogESDajRAI0GWDSgRQO+uJJbuwOMaMDnK/na7PodoH+8kq/t+gmgRAMkGvDpSm5XiqId8w6g0QCLBrRoQI8GfLyS5zn0uZXjDjCDAeOIBpRogEQDajRAowEWDWjRgP5FwN1KHiMa8PlKPi+iNLkDzI9X8vVe8wmgRAMkGvDxmfzivzKnRgMsGtCiAT0aMKIB0S9Dnly3/hZBa3xdhVbiugqtxHUVWonrKrQS11VoJa6r0EpcV6GVuK5CK3FdhVbiugqtxHUVWonrKrQS11VoJa6r0EpcV6GVuK5CK3FdhVbiugqtxHUVWonrKrRi1VVoxaqr0EpcV6GVuK5CK3FdhVbiugqtxHUVWonrKrQS11VoJa6r0EpcV6GVuK5CK3Fdhcszn7C8dRUuz3zC8tZVaCWuq3B55hOWt65CK3FdhVasugr3QaqrcB+kugr3QaqrcB+U0+r0Qaqr0IpVV6EVq65CK1ZdhVasugqtWHUVWtHqKrSi1VVoRaur0IpWV6EVra5CK1pdhVa0ugqtaHUVWtHqKrSi1VVoRaur0IpWV6EVra5CK1pdhVa0ugqtaHUVWtHqKrSi1VVoRaur0IpWV6EVra5CK1pdhVa0ugqtaHUVWtHqKrSi1VVoRaur0IpWV6EVra5CK1pdhVa4uoqlhFVXsZSw6iqWElZdxVLCGgu/lLDqKpYS3Ks2tLqKFSrEqqtYSlh1FUtJ8ZSw6iqWEta+ZAdnXcXDm3Lq9sObcuj2w5uzrsLFKYduuzjl0G0Xpxy67eLKKk45dNvFKesqXJz13OSsq3Bx1pOTs67CxVlPTs66ChdnPTk56ypcnPXkjK2rcECPBoTWVThgBgNi6yocUKIBEg0IratwgEYDLBrQogGhdRUOGNGAGQyIratwQIkGhNZVOKBFA0InND4AsXUVDoj+FsXWVThgRANmMCC2rsIBJRog0YAaDdBogEUDWjQgtK7CASMaEFpX4X+ZCq2rcECJBkg0ILSuwgEaDbBoQIsG9GhAaF2FA2YwILauwgElGiDRgBoN0GiARQNaNCC0rsIBIxoQWlfhtxdC6yocUKIBEg0IratwgEYDLBrQogE9GjCiAdEvQ4LrKmzG11U8GLx1FS5PO0zb5WmHabs87TBtl1dmedph2i5PO0zb5WmHabs87TBtl6etq3jI89ZVuDzzCctbV+HyzCcsb12FyzOfsLx1FS7PfMLy1lW4PFJdxcMHqq7CfWiHabs87TBtl6cdpu3yyixPO0zb5WmHabs87TBtl6cdpu3ytMO0H/K8dRUuz3zC8tZVuDzzCctbV+HyzCcsb12FyzOfsLx1FS7PfMJC1VW4D1Jdhfsg1VW4D1JdhfugnFanD1Jdhfsg1VW4D1Jdhfsg1VW4D1JdxcMHqq7CfZLX+4uh/m6EVVfhRlgz9PzeFVZdhRth1VW4EVZdhRth1VW4EVZdhRth1VW4EVZdxcMIrK7CjbDqKtwIq67CjbDqKtxI4Yyw6ircCKuuwo2w6ircCKuuwo2w6ioeRmB1FW6EVVfhRlh1FW6EVVfhRgpnhFVX4UZYdRVuhFVX4UZYdRVuhFVXsZJHWHUVSwmrrmIpYdVVLCWsuoqlBDYWfsLVVSwluFdtaHUVK1SIVVexlLDqKpaS4ilh1VUsJax9qbX4UPGDwRsqdnnayJPL00aeXJ428uTyyixPG3lyedrIk8vTRp5cnjby5PK0oeKHPG+o2OWZT1jeULHLM5+wvKFil2c+YXlDxS7PfMLyhopdHilU/PCBChW7D23kyeVpI08uTxt5cnlllqeNPLk8beTJ5WkjTy5PG3lyedrI00OeN1Ts8swnLG+o2OWZT1jeULHLM5+wvKFil2c+YXlDxS7PfMJChYrdBylU7D5IoWL3QQoVuw/KaXX6IIWK3QcpVOw+SKFi90EKFbsPUqj44QMVKnaf5PX+InrpRlihYjfCuuno966wQsVuhBUqdiOsULEbYYWK3QgrVOxGWKFiN8IKFT+MwELFboQVKnYjrFCxG2GFit1I4YywQsVuhBUqdiOsULEbYYWK3QgrVPwwAgsVuxFWqNiNsELFboQVKnYjhTPCChW7EVao2I2wQsVuhBUqdiOsUPFKHmGFipcSVqh4KWGFipcSVqh4KcGF99BCxUsJ7lUbWqh4hQqxQsVLCStUvJQUTwkrVLyUoPalxzb5LCHQj9Oo299N3+Wwv5/rbz433nxuvvfc/dXxX3iuvPmcvPnc7Zoex/HXc+N48py++Zy9+Vx787n+5nPjzefme8/d35oc1yvQ0cf9c+XN5+TN5+qbz+mbz9mbz7U3n7v/vIx+Pjfb/XPjzefme8/d3wH6hefKm8/Jm8/VN5+7/bzMcq6jWe7X0f1dkl94rr35XH/zufHmc/O95+7vJPzCc+XFc3L/82vy5nP1zefuPy/1XO9T79f7/U2EX3iuvflcf/O58eZz873n+vHmc/efl3b9Pnio/q8H/98/+eKLIimUmkLRFIqlUFoKpadQRgplZlDubxN8nZKy9kfK2h8pa3+krP2RsvZHytofKWt/pKz9kbL2Z8ranylrf6as/Zmy9mfK2p8pa3+mrP2ZsvZnytqfKWv/yV83v48pORjJwdQcjOZgLAfTcjA9BzNyMDm7QMnZBUrOLlBydoGSswuUnF2g5OwCJWcXKDm7QMnZBUrOLiA5u4Dk7AKSswtIzi4gObuA5OwCkrMLSM4uIDm7gOTsAjVnF6g5u0DN2QVqzi5Qc3aBmrML1JxdoObsAjVnF6g5u4Dm7AKaswtozi6gObuA5uwCmrMLaM4uoDm7gObsApqzC1jOLmA5u4Dl7AKWswtYzi5gObuA5ewClrMLWM4uYDm7QMvZBVrOLtBydoGWswu0nF2g5ewCLWcXaDm7QMvZBVrOLtBzdoGc+4El54JgybkhWHKuCJacO4Il55JgybklWHKuCZace4Il56JgybkpWHKuCpacu4Il57JgybktWHKuC5ac+4Il58JgybkxWHKuDJacO4Ml59Jgybk1WHKuDZace4Ml5+Jgybk5WHKuDpacu4OSc3dQcu4OSs7dQcm5OyiH5mAsB9NyMD0HM3IwObtAzt1Bybk7KDl3ByXn7qDk3B2UnLuDknN3UHLuDkrO3UHJuTsoOXcHJefuoOTcHZScu4OSc3dQcu4OSs7dQcm5Oyg5dwcl5+6g5NwdlJy7g5Jzd1By7g5Kzt1Bybk7KDl3ByXn7qDk3B2UnLuDknN3UHLuDkrO3UHJuTsoOXcH5Qu37ew4R8lY+a9hqvpfIwK/cNnuFyhfuJ1mclGqPaFICqWmUDSFYimUf3rQ/P1kf/fJL9wa+IXP9RcuDfwKxVIoLYWSsqt94cKA6TmJ2kyeUGYG5QvXBX6FUlIokkL5wtqv46LUJxRNoVgKpaVQegplpFBmxsn5hUsCv0JJ+e1spvx2NlN+O/vCBYFfoaT8dvaF6wG/QukplJFCyVj79ThSKCWFIimUmkLRFIqlUFoKpadQRgolZe2XlLVfUtZ+SVn7JWXtl5S1X1LWfklZ+yVl7ZeUtV9S1r6krH1JWfuSsvYlZe1LytqXlLUvKWtfwtd+l//cd6+ZnuUXxdr/6kj9v4xh5xulMcrPv7SUccmL/NerAbl8BpjPBPO5/9XmdwoVNCFBE6poQoomZGhCDU0IbZ8uaBt1QdupBW2nFrSdWtB2akHbqQVtpxa0nVoCd+qL0RMYn++n8yh/fe2sx+ff2AkmVA80oYImJGhCFU1I0YQMTaihCXU0IbSduqLt1Iq2UyvaTq1oO7Wi7dSKtlMr2k6taDu1Bu7UF2MkMGY8w44ERklgSAKjJjA0gWEJjJbASFjn7fPPbjmOen7xUeSWIimUz3/uRfTv3bfdvkBoM+Pf0o8USspPv+sXKG1elNFuKZZCaSmUnkIZKZSZQRnfWC+t/E3pt5SSQpEUSk2haArFUigthdJTKCOFMjMo8wtrvxQ9v7jo7W9Ks6RQJIVSUyiaQrEUSkuh9BTKSKF8Ye2XLhdljDvKk1br72NKDkYz/hOmHJaDaTmYnoL5wo3AX8KUHIzkYGoOJmHd6P0d3n491vuLd7t6nHldFfv5l45rr5jH35ePHy+B33hjrPeXfRnEJ6v4/WZBYV5ozYXWvNKaK6250Zo3WnPaE7TQHqGF9gwV2jNUaM9QoT1DhfYMFdozVGjPUAk7Qy9CDyd8fCbZ+adbNb0lzGhCPcIJJZwg4YSP97ZxLh4d9Zag4QQLJ7Rwwqdr2o7zhZQd45YwwgkzmqBHOKGEEz79tJqcX2pyT2jhhE9/0q2e1y6ayR3BjnBC+HfJPl7T10tms35LGOGEGU1oRzihhBMknFDDCRpOsHBCCyd8cU23dksY4YTP1/S18/VbQv94TV+79zNCCSdIOOHTNd2uC7LtmLcEDSdYOKGFE3o44eM1Pe0klOOWMKMJ4wgnlHCChBNqOEHDCRZOaOGE/kXC7ZoeI5zw+Zo+r9I1uSXMj9f09Tr0GaGEEySc8PE5/eq/RaeGEyyc0MIJPZwwwgnhb06e3Fv9GmI8ua1WWr0u7jZ78SeXose5+RUt5Q7y5FLkP6PouCj91V+BvjfUaDy760RjL9T2ldpeqe2N2r5R23dq+0FtP5nthfqsFeqzVqjPWqE+a4X6rBXqs1aoz1qhPmuF+qwVlLP2FKoox+cllHwifnEK2Xh2643GvlLbK7W9Uds3avtObT+o7SezvR7U9tRnrVKftUp91ir1WavUZ61Sn7VKfdYq9Vmr1GetoZy1lxDK8XkJoZyIlxDKIXcJoZxblxDKUXQJoZwulxDKgXEJoZwBlxDKtn4KNbSduiUv+1fzn8ezRMnvVUr+YL8aLjaeZSV+63epC55SxVNq2Uo/n4Y9nmUlfq/SwFOacErjwFMqeErp+9LPZ1CPZ4mS36ukeEqGp9TwlDqe0sBTmnBK88BTKnhK2bv3i1nl41l26PcqKZ6S4Sk1PKWOpzTwlCac0rMqgd/rlL1/vygpWE4C6FQBnRrcS6ZnXQm/1wnvZVw5Jp5Tdt7vl5wqoJMCOhmgE9j+NAtpw8ZDnHM8+EOcczr4Q5y0YcPNOaeDuznndHA355wO7uZKa845HdzNORs23Jz2BCVt2HBz2jOUtGHDzWnPUNKGDTenPUNJGzbcnPYMDW7YcEIPJ8Q2bDhhRhOCGzacUMIJEk6IbdhwgoYTLJzQwgmxDRtOGOGEGU0IbthwQgknxDZsOKGFE2LnRD4IwQ0bTgj/LgU3bDhhhBNmNCG4YcMJJZwg4YQaTtBwgoUTWjghtmHDCSOcENuw4X/Oim3YcEIJJ0g4IbZhwwkaTrBwQgsn9HBCbMOGE2Y0IbhhwwklnCDhhBpO0HCChRNaOCG2YcMJI5wQ27DhlyBiGzacUMIJEk6IbdhwgoYTLJzQwgk9nDDCCeFvToIbNh7/9/ENGw7hbdhY9rRTv5c97dTvZV+p7ZXannbq97Knnfq97Gmnfi972qnfy562YcPteRs2lj31WcvbsLHsqc9a3oaNZU991vI2bCx76rOWt2Fj2SM1bLgQVMPGEqKd+r3saad+L3vaqd/LXqntaad+L3vaqd/Lnnbq97Knnfq97Gmnfrs9b8PGsqc+a3kbNpY99VnL27Cx7KnPWt6GjWVPfdbyNmwse+qzFqphYwkhNWwsIaSGjSWE1LCxhFDOrUsIqWFjCSE1bCwhpIaNJYTUsLGEkBo2XAiqYWMJJS/7FxUESwmrYWMpYQ31W9e1sBo2lhJWw8ZSwmrYWEpYDRtLCathYylhNWwsJayGDVcCa9hYSlgNG0sJq2FjKWE1bCwlxVPCathYSlgNG0sJq2FjKWE1bCwlrIYNVwJr2FhKWA0bSwmrYWMpYTVsLCXFU8Jq2FhKWA0bSwmrYWMpYTVsLCWsho0fUSasho0fTlgNGz+csBo2fjhhNWz8cMKaYP/DCath44cT3ss4tIaNH2FFrIaNH05YDRs/nBTQCath44cT2v7UMzLLnTqz3Kkzy506s9ypM8udOrPcqTPLnTqz3Kkzy506s9ypM8udOrPcqTPLnTqz3Kkzy506s9ypM8udOrPcqTPLnTqz3NEyyx0ts9ypM8udOrPcqTPLnTqz3Kkzy506s9ypM8udOrPcqTPLnTqz3Kkzy506s9ypM8udOrPcqTPLnTqz3Kkzy506s9ypM8sdLbPc0TLLHS2z3NEyyx0ts9zRMssdLbPc0TLLHS2z3NEyyx0ts9zxMssdL7Pc8TLLHS+z3PEyyx0vs9zxMssdL7Pc8TLLHS+z3PEyyx0vs9zxMssdL7Pc8TLLHS+z3PEyyx0vs9zxMssdL7Pc8TLLHS+z3PEyyx0vs9zxMssdL7Pc8TLLHS+z3PEyyx0vs9wBM8sdMLPcATPLHTCz3AEzyx0ws9wBM8sdMLPcATPLHTCz3AEzyx0ws9zxMsvF/vNp37Uep47KC5txbeDz0L+/VN74i/1DfLCKT1bxctCaF1pzoTWvtOZKa2605o3WnPYELbRHaKE9Q4X2DBXaM1Roz1ChPUOF9gwV2jNUws7Qi9DDCR+fSXbeHlLTW8KMJtQjnFDCCRJO+HhvG+fi0VFvCRpOsHBCCyd8uqbt6H99qR3jljDCCTOaoEc4oYQTPv20mpxfanJPaOGET3/SrZ533ZrJHcGOcEL4d8k+XtN6fZas3xJGOGFGE9oRTijhBAkn1HCChhMsnNDCCV9c063dEkY44fM1fe18/ZbQP17T1+79jFDCCRJO+HRNtyuj0Y55S9BwgoUTWjihhxM+XtPzHEjdynFLmNGEcYQTSjhBwgk1nKDhBAsntHBC/yLhdk2PEU74fE2fN1qa3BLmx2v6eh36jFDCCRJO+PicfvXfolPDCRZOaOGEHk4Y4YTwNydPrnN/DSGW0LAhxtywIcbcsCHG3LAhxtywIcbcsCHG3LAhxtywIcbcsCHG3LAhxtywIcbcsCHG3LAhxtywIcbcsCHG3LAhxtywIcbcsCHG3LAhxtywIQbWsCEG1rAhxtywIcbcsCHG3LAhxtywIcbcsCHG3LAhxtywIcbcsCHG3LAhxtywIcbcsOH21GctccOG21OftcQNG2LMDRtuT33WEjdsiDE3bIiBNWy4EFTDhgtBNWy4EFTDhguhnFuXEFTDhhhYw4YYWMOGGFjDhhhYw4YYWMOGGFzDhhhcw4YYXMOGGFzDhhhcw4YYXMOGGFzDhhhcw4YYXMOGGFzDhhhcw4YYXMOGGFzDhhhcw4YYXMOGGFzDhhhcw4YYXMOGGFzDhhhcw4YYXMOGGFzDhhhcw4YYXMOGGFzDhhhcw4YYXMOGGFzDhhhcw4YYXMOGGF7DxnICa9hYTmANG8sJrGFjOYFNsF9OYA0bywnvZRxcw8YKK4I1bCwnsIaN5aSATmANG8sJbH+qQtqw8RDnHA/+EOecDv4QJ23YcHPO6eBuzjkd3M05p4O7udKac04Hd3POhg03pz1BSRs23Jz2DCVt2HBz2jOUtGHDzWnPUNKGDTenPUODGzac0MMJsQ0bTpjRhOCGDSeUcIKEE2IbNpyg4QQLJ7RwQmzDhhNGOGFGE4IbNpxQwgmxDRtOaOGE2DmRD0Jww4YTwr9LwQ0bThjhhBlNCG7YcEIJJ0g4oYYTNJxg4YQWToht2HDCCCfENmz4n7NiGzacUMIJEk6IbdhwgoYTLJzQwgk9nBDbsOGEGU0IbthwQgknSDihhhM0nGDhhBZOiG3YcMIIJ8Q2bPgliNiGDSeUcIKEE2IbNpyg4QQLJ7RwQg8njHBC+JuT6IYNLQkNGw8IccOG2/NO/XZ73qnfbs879dvtldqed+q32/NO/XZ73qnfbs879dvteRs2HvbEDRtuT33WEjdsuD31WUvcsOH21GctccOG21OftcQNG24P1bDxEMJq2HAh3qnfbs879dvtead+u71S2/NO/XZ73qnfbs879dvtead+uz3v1O+HPXHDhttTn7XEDRtuT33WEjdsuD31WUvcsOH21GctccOG21OftVgNGy4E1bDhQlANGy4E1bDhQijn1iUE1bDhQlANGy4E1bDhQlANGy4E1bDxEMJq2HCh5GX/qoLAlcAaNlwJbKifX9cCa9hwJbCGDVcCa9hwJbCGDVcCa9hwJbCGDVcCa9h4KKE1bLgSWMOGK4E1bLgSWMOGKymeEljDhiuBNWy4EljDhiuBNWy4EljDxkMJrWHDlcAaNlwJrGHDlcAaNlxJ8ZTAGjZcCaxhw5XAGjZcCaxhw5XAGjZWlAmsYWM5gTVsLCewho3lBNawsZzAJtgvJ7CGjeWE9zIOrmFjhRXBGjaWE1jDxnJSQCewho3lhLY/jYzM8qDOLA/qzPKgziwP6szyoM4sD+rM8qDOLA/qzPKgziwP6szyoM4sD+rM8qDOLA/qzPKgziwP6szyoM4sD+rM8qDOLA+0zPJAyywP6szyoM4sD+rM8qDOLA/qzPKgziwP6szyoM4sD+rM8qDOLA/qzPKgziwP6szyoM4sD+rM8qDOLA/qzPKgziwP6szyQMssD7TM8kDLLA+0zPJAyywPtMzyQMssD7TM8kDLLA+0zPJAyywPvMzywMssD7zM8sDLLA+8zPLAyywPvMzywMssD7zM8sDLLA+8zPLAyywPvMzywMssD7zM8sDLLA+8zPLAyywPvMzywMssD7zM8sDLLA+8zPLAyywPvMzywMssD7zM8sDLLA+8zPLAyywPwMzyAMwsD8DM8gDMLA/AzPIAzCwPwMzyAMwsD8DM8gDMLA/AzPIAzCwPvMxyO55klk37+Zy1/nPIFy+xP3wGmM8E83kS//6NQgVNSNCEKpqQogkZmlBDE0LbpwvaRl3QdmpB26kFbacWtJ1a0HZqQdupBW2nlsCd+mL0BMbn++kXb8S60AQTqgeaUEETEjShiiakaEKGJtTQhDqaENpOXdF2akXbqRVtp1a0nVrRdmpF26kVbadWtJ1aA3fqizESGDOeYUcCoyQwJIFRExiawLAERktgJKzz9vln91WQwCmSQvn85/4Lf8hrM+Pf0o8USspPv+sXKD+/Ou8US6G0FEpPoYwUysygjG+sl59f8HVKSaFICqWmUDSFYimUlkLpKZSRQpkZlPmFtf/iwqpTSgpFUig1haIpFEuhtBRKT6GMFMoX1v6Lq8jrmtaRgyk5GM34T5hyWA6m5WB6CuYLNwJ/CVNyMJKDqTmYhHUj93d4+/VY7y/e7epxXilWeXGjeFx7xTz0f/7rJfAbb4zl/rIvg/hkFb/fLCjMC6250JpXWnOlNTda80ZrTnuCFtojtNCeoUJ7hgrtGSq0Z6jQnqFCe4YK7RkqYWfoRejhhI/PJDv/dKumt4QZTahHOKGEEySc8PHeNs7Fo6PeEjScYOGEFk74dE3bcb6QsmPcEkY4YUYT9AgnlHDCp59Wk/NLTe4JLZzw6U+61fPaRTO5I9gRTgj/LtnHa/p6yWzWbwkjnDCjCe0IJ5RwgoQTajhBwwkWTmjhhC+u6dZuCSOc8Pmavna+fkvoH6/pa/d+RijhBAknfLqm23VBth3zlqDhBAsntHBCDyd8vKannYRy3BJmNGEc4YQSTpBwQg0naDjBwgktnNC/SLhd02OEEz5f0+dVuia3hPnxmr5ehz4jlHCChBM+Pqdf/bfo1HCChRNaOKGHE0Y4IfzNyZN7q19D9Ce31f7hDMzj3PyKlnIHKcmTpb841Kg/u+tEYy/U9pXaXqntjdq+Udt3avtBbT+Z7YX6rBXqs1aoz1qhPmuF+qwV6rNWqM9aoT5rhfqsFZSz9hSqKMfnJZR8In5xCll/duuNxr5S2yu1vVHbN2r7Tm0/qO0ns70e1PbUZ61Sn7VKfdYq9Vmr1GetUp+1Sn3WKvVZq9RnraGctZcQyvF5CaGciJcQyiF3CaGcW5cQylF0CaGcLpcQyoFxCaGcAZcQyrZ+CjW0nbolL/tX85/7s0TJ71UCK+buz7ISv/W71AVPqeIpZZdNv5iG3Z9lJX6v0sBTmnBK48BTKnhK6fvSz2dQ92eJkt+rpHhKhqfU8JQ6ntLAU5pwSvPAUyp4Stm794tZ5f1Zduj3KimekuEpNTyljqc08JQmnNKzKoHf65S9f78oKVhOAuhUAZ0a3EumZ10Jv9cJ72VcOSaeU3be75ecKqCTAjoZoBPa/jRJGzYe4pzjwR/inNPBH+KkDRtuzjkd3M05p4O7Oed0cDdXWnPO6eBuztmw4ea0Jyhpw4ab056hpA0bbk57hpI2bLg57RlK2rDh5rRnaHDDhhN6OCG2YcMJM5oQ3LDhhBJOkHBCbMOGEzScYOGEFk6IbdhwwggnzGhCcMOGE0o4IbZhwwktnBA7J/JBCG7YcEL4dym4YcMJI5wwownBDRtOKOEECSfUcIKGEyyc0MIJsQ0bThjhhNiGDf9zVmzDhhNKOEHCCbENG07QcIKFE1o4oYcTYhs2nDCjCcENG04o4QQJJ9RwgoYTLJzQwgmxDRtOGOGE2IYNvwQR27DhhBJOkHBCbMOGEzScYOGEFk7o4YQRTgh/cxLdsDFGQsPGA0LcsOH2vFO/3Z536rfb8079dnultued+u32vFO/3Z536rfb8079dnveho2HPXHDhttTn7XEDRtuT33WEjdsuD31WUvcsOH21GctccOG20M1bDyEsBo2XIh36rfb8079dnveqd9ur9T2vFO/3Z536rfb8079dnveqd9uzzv1+2FP3LDh9tRnLXHDhttTn7XEDRtuT33WEjdsuD31WUvcsOH21GctVsOGC0E1bLgQVMOGC0E1bLgQyrl1CUE1bLgQVMOGC0E1bLgQVMOGC0E1bDyEsBo2XCh52b+qIHAlsIYNVwIb6ufXtcAaNlwJrGHDlcAaNlwJrGHDlcAaNlwJrGHDlcAaNh5KaA0brgTWsOFKYA0brgTWsOFKiqcE1rDhSmANG64E1rDhSmANG64E1rDxUEJr2HAlsIYNVwJr2HAlsIYNV1I8JbCGDVcCa9hwJbCGDVcCa9hwJbCGjRVlAmvYWE5gDRvLCaxhYzmBNWwsJ7AJ9ssJrGFjOeG9jINr2FhhRbCGjeUE1rCxnBTQCaxhYzmB7U/TEjLLDwhxZtnteXNUbs+bo3J73hyV2yu1PW+Oyu15c1Ruz5ujcnveHJXb82aWH/bEmWW3pz5riTPLbk991hJnlt2e+qwlziy7PfVZS5xZdnuozPJDCCuz7EK8OSq3581RuT1vjsrtldqeN0fl9rw5KrfnzVG5PW+Oyu15c1QPe+LMsttTn7XEmWW3pz5riTPLbk991hJnlt2e+qwlziy7PfVZi5VZdiGozLILQWWWXQgqs+xCKOfWJQSVWXYhqMyyC0Flll0IKrPsQlCZ5YcQVmbZhZKX/atQpyuBZZZdCeyapF/XAsssuxJYZtmVwDLLrgSWWXYlsMyyK4Flll0JLLP8UELLLLsSWGbZlcAyy64Elll2JcVTAsssuxJYZtmVwDLLrgSWWXYlsMzyQwkts+xKYJllVwLLLLsSWGbZlRRPCSyz7EpgmWVXAsssuxJYZtmVwDLLK8oEllleTmCZ5eUEllleTmCZ5eWElwmEyywvJ7yXcXCZ5RVWBMssLyewzPJyUkAnsMzycsLan+So//m071qPU0flhc24NvB56N9fKv/8L/YuPljFJ6t4OWjNC6250JpXWnOlNTda80ZrTnuCFtojtNCeoUJ7hgrtGSq0Z6jQnqFCe4YK7RkqYWfoRejhhI/PJDtvD6npLWFGE+oRTijhBAknfLy3jXPx6Ki3BA0nWDihhRM+XdN29L++1I5xSxjhhBlN0COcUMIJn35aTc4vNbkntHDCpz/pVs+7bs3kjmBHOCH8u2Qfr2m9PkvWbwkjnDCjCe0IJ5RwgoQTajhBwwkWTmjhhC+u6dZuCSOc8Pmavna+fkvoH6/pa/d+RijhBAknfLqm25XRaMe8JWg4wcIJLZzQwwkfr+l5DqRu5bglzGjCOMIJJZwg4YQaTtBwgoUTWjihf5Fwu6bHCCd8vqbPGy1Nbgnz4zV9vQ59RijhBAknfHxOv/pv0anhBAsntHBCDyeMcEL4m5Mn17m/hig1vmHDIbwNG8uedur3sqed+r3saad+L3ultqed+r3saad+L3vaqd/Lnnbq97Knbdhwe96GjWVPfdbyNmwse+qzlrdhY9lTn7W8DRvLnvqs5W3YWPZIDRsuBNWwsYRop34ve9qp38uedur3sldqe9qp38uedur3sqed+r3saad+L3vaqd9uz9uwseypz1reho1lT33W8jZsLHvqs5a3YWPZU5+1vA0by576rIVq2FhCSA0bSwipYWMJITVsLCGUc+sSQmrYWEJIDRtLCKlhYwkhNWwsIaSGDReCathYQsnL/kUFwVLCathYSlhD/dZ1LayGjaWE1bCxlLAaNpYSVsPGUsJq2FhKWA0bSwmrYcOVwBo2lhJWw8ZSwmrYWEpYDRtLSfGUsBo2lhJWw8ZSwmrYWEpYDRtLCathw5XAGjaWElbDxlLCathYSlgNG0tJ8ZSwGjaWElbDxlLCathYSlgNG0sJq2HjR5QJq2HjhxNWw8YPJ6yGjR9OWA0bP5zAJtgvJ6yGjR9OeC/j0Bo2foQVsRo2fjhhNWz8cFJAJ6yGjR9OYPuTHKQNGw9xzvHgD3HO6eAPcdKGDTfnnA7u5pzTwd2cczq4myutOed0cDfnbNhwc9oTlLRhw81pz1DShg03pz1DSRs23Jz2DCVt2HBz2jM0uGHDCT2cENuw4YQZTQhu2HBCCSdIOCG2YcMJGk6wcEILJ8Q2bDhhhBNmNCG4YcMJJZwQ27DhhBZOiJ0T+SAEN2w4Ify7FNyw4YQRTpjRhOCGDSeUcIKEE2o4QcMJFk5o4YTYhg0njHBCbMOG/zkrtmHDCSWcIOGE2IYNJ2g4wcIJLZzQwwmxDRtOmNGE4IYNJ5RwgoQTajhBwwkWTmjhhNiGDSeMcEJsw4Zfgoht2HBCCSdIOCG2YcMJGk6wcEILJ/RwwggnhL85iW7YkJnQsPGAEDdsuD3v1G+355367fa8U7/dXqntead+uz3v1G+355367fa8U7/dnrdh42FP3LDh9tRnLXHDhttTn7XEDRtuT33WEjdsuD31WUvcsOH2UA0bDyGshg0X4p367fa8U7/dnnfqt9srtT3v1G+355367fa8U7/dnnfqt9vzTv1+2BM3bLg99VlL3LDh9tRnLXHDhttTn7XEDRtuT33WEjdsuD31WYvVsOFCUA0bLgTVsOFCUA0bLoRybl1CUA0bLgTVsOFCUA0bLgTVsOFCUA0bDyGshg0XSl72ryoIXAmsYcOVwIb6+XUtsIYNVwJr2HAlsIYNVwJr2HAlsIYNVwJr2HAlsIaNhxJaw4YrgTVsuBJYw4YrgTVsuJLiKYE1bLgSWMOGK4E1bLgSWMOGK4E1bDyU0Bo2XAmsYcOVwBo2XAmsYcOVFE8JrGHDlcAaNlwJrGHDlcAaNlwJrGFjRZnAGjaWE1jDxnICa9hYTmANG8sJbYL9xGvYWE54L+PgGjZWWBGsYWM5gTVsLCcFdAJr2FhOYPtTbQmZ5QeEOLPs9rw5KrfnzVG5PW+Oyu2V2p43R+X2vDkqt+fNUbk9b47K7Xkzyw974syy21OftcSZZbenPmuJM8tuT33WEmeW3Z76rCXOLLs9VGb5IYSVWXYh3hyV2/PmqNyeN0fl9kptz5ujcnveHJXb8+ao3J43R+X2vDmqhz1xZtntqc9a4syy21OftcSZZbenPmuJM8tuT33WEmeW3Z76rMXKLLsQVGbZhaAyyy4ElVl2IZRz6xKCyiy7EFRm2YWgMssuBJVZdiGozPJDCCuz7ELJy/5VqNOVwDLLrgR2TdKva4Flll0JLLPsSmCZZVcCyyy7Elhm2ZXAMsuuBJZZfiihZZZdCSyz7EpgmWVXAsssu5LiKYFlll0JLLPsSmCZZVcCyyy7Elhm+aGElll2JbDMsiuBZZZdCSyz7EqKpwSWWXYlsMyyK4Flll0JLLPsSmCZ5RVlAsssLyewzPJyAsssLyewzPJywssEwmWWlxPeyzi4zPIKK4JllpcTWGZ5OSmgE1hmeTlh7U/2NG7Qj9Oo29995eWwv5/rbz433nxuvvfc/R30X3iuvPmcvPnc7bIex/HXc+N48py++Zy9+Vx787n+5nPjzefme8/dX7oc1xvS0cf9c+XN5+TN5+qbz+mbz9mbz7U3n7v/vIx+Pjfb/XPjzefme8/dXxz6hefKm8/Jm8/VN5+7/bzMcq6jWe7X0f3dk194rr35XH/zufHmc/O95+6vL/zCc+XFc3L/82vy5nP1zefuPy/1XO9T79f7/ZWFX3iuvflcf/O58eZz873n+vHmc/efl3b9Pnio/q8H/98/+eKLIimUmkLRFIqlUFoKpadQRgplZlDubxt8nZKy9kfK2h8pa3+krP2RsvZHytofKWt/pKz9kbL2Z8ranylrf6as/Zmy9mfK2p8pa3+mrP2ZsvZnytqfKWv/yV86v48pORjJwdQcjOZgLAfTcjA9BzNyMDm7QMnZBUrOLlBydoGSswuUnF2g5OwCJWcXKDm7QMnZBUrOLiA5u4Dk7AKSswtIzi4gObuA5OwCkrMLSM4uIDm7gOTsAjVnF6g5u0DN2QVqzi5Qc3aBmrML1JxdoObsAjVnF6g5u4Dm7AKaswtozi6gObuA5uwCmrMLaM4uoDm7gObsApqzC1jOLmA5u4Dl7AKWswtYzi5gObuA5ewClrMLWM4uYDm7QMvZBVrOLtBydoGWswu0nF2g5ewCLWcXaDm7QMvZBVrOLtBzdoGc+4El54JgybkhWHKuCJacO4Il55JgybklWHKuCZace4Il56JgybkpWHKuCpacu4Il57JgybktWHKuC5ac+4Il58JgybkxWHKuDJacO4Ml59Jgybk1WHKuDZace4Ml5+Jgybk5WHKuDpacu4OSc3dQcu4OSs7dQcm5OyiH5mAsB9NyMD0HM3IwObtAzt1Bybk7KDl3ByXn7qDk3B2UnLuDknN3UHLuDkrO3UHJuTsoOXcHJefuoOTcHZScu4OSc3dQcu4OSs7dQcm5Oyg5dwcl5+6g5NwdlJy7g5Jzd1By7g5Kzt1Bybk7KDl3ByXn7qDk3B2UnLuDknN3UHLuDkrO3UHJuTsoOXcH5Qu37ew4R8lY+a+pqvpfIwK/cNnuFyhfuJ1mclGqPaFICqWmUDSFYimUf3rQ/P1kf/fJL9wa+IXP9RcuDfwKxVIoLYWSsqt94cKA6TmS2kyeUGYG5QvXBX6FUlIokkL5wtqv46LUJxRNoVgKpaVQegplpFBmxsn5hUsCv0JJ+e1spvx2NlN+O/vCBYFfoaT8dvaF6wG/QukplJFCyVj79ThSKCWFIimUmkLRFIqlUFoKpadQRgolZe2XlLVfUtZ+SVn7JWXtl5S1X1LWfklZ+yVl7ZeUtV9S1r6krH1JWfuSsvYlZe1LytqXlLUvKWtfwte+yn/uK9hMz/KLYu1/Faf+X8aw843SGOXnX1rKuORF/uvVgFw+A8xngvnc/2rzO4UKmpCgCVU0IUUTMjShhiaEtk8XtI26oO3UgrZTC9pOLWg7taDt1IK2UwvaTi2BO/XF6AmMz/fTeZS/vnbW4/Nv7AQTqgeaUEETEjShiiakaEKGJtTQhDqaENpOXdF2akXbqRVtp1a0nVrRdmpF26kVbadWtJ1aA3fqizESGDOeYUcCoyQwJIFRExiawLAERktgJKzz9vlntxxHPb/4KHJLkRTK5z/3Ivr37ttuXyC0mfFv6UcKJeWn3/ULlDYvymi3FEuhtBRKT6GMFMrMoIxvrJdW/qb0W0pJoUgKpaZQNIViKZSWQukplJFCmRmU+YW1X4qeX1z09jelWVIokkKpKRRNoVgKpaVQegplpFC+sPZLl4syxh3lSav19zElB6MZ/wlTDsvBtBxMT8F84UbgL2FKDkZyMDUHk7Bu9P4Ob78e6/3Fu109zryuiv38S8e1V8zj78vHj5fAb7wx1vvLvgzik1X8frOgMC+05kJrXmnNldbcaM0brTntCVpoj9BCe4YK7RkqtGeo0J6hQnuGCu0ZKrRnqISdoRehhxM+PpPs/NOtmt4SZjShHuGEEk6QcMLHe9s4F4+OekvQcIKFE1o44dM1bcf5QsqOcUsY4YQZTdAjnFDCCZ9+Wk3OLzW5J7Rwwqc/6VbPaxfN5I5gRzgh/LtkH6/p6yWzWb8ljHDCjCa0I5xQwgkSTqjhBA0nWDihhRO+uKZbuyWMcMLna/ra+fotoX+8pq/d+xmhhBMknPDpmm7XBdl2zFuChhMsnNDCCT2c8PGannYSynFLmNGEcYQTSjhBwgk1nKDhBAsntHBC/yLhdk2PEU74fE2fV+ma3BLmx2v6eh36jFDCCRJO+PicfvXfolPDCRZOaOGEHk4Y4YTwNydP7q1+DWFPbquVVq+Lu81e/Mml6HFufkVLuYM8uRT5zyg6Lkp/9Veg7w01smd3nWjshdq+Utsrtb1R2zdq+05tP6jtJ7O9UJ+1Qn3WCvVZK9RnrVCftUJ91gr1WSvUZ61Qn7WCctaeQhXl+LyEkk/EL04hs2e33mjsK7W9UtsbtX2jtu/U9oPafjLb60FtT33WKvVZq9RnrVKftUp91ir1WavUZ61Sn7VKfdYayll7CaEcn5cQyol4CaEccpcQyrl1CaEcRZcQyulyCaEcGJcQyhlwCaFs66dQQ9upW/KyfzX/2Z4lSn6vUvIH+9VwMXuWlfit36UueEoVT6llK/18GrY9y0r8XqWBpzThlMaBp1TwlNL3pZ/PoLZniZLfq6R4Soan1PCUOp7SwFOacErzwFMqeErZu/eLWeX2LDv0e5UUT8nwlBqeUsdTGnhKE07pWZXA73XK3r9flBQsJwF0qoBODe4l07OuhN/rhPcyrhwTzyk77/dLThXQSQGdDNAJbH9qhbRh4yHOOR78Ic45HfwhTtqw4eac08HdnHM6uJtzTgd3c6U155wO7uacDRtuTnuCkjZsuDntGUrasOHmtGcoacOGm9OeoaQNG25Oe4YGN2w4oYcTYhs2nDCjCcENG04o4QQJJ8Q2bDhBwwkWTmjhhNiGDSeMcMKMJgQ3bDihhBNiGzac0MIJsXMiH4Tghg0nhH+Xghs2nDDCCTOaENyw4YQSTpBwQg0naDjBwgktnBDbsOGEEU6IbdjwP2fFNmw4oYQTJJwQ27DhBA0nWDihhRN6OCG2YcMJM5oQ3LDhhBJOkHBCDSdoOMHCCS2cENuw4YQRToht2PBLELENG04o4QQJJ8Q2bDhBwwkWTmjhhB5OGOGE8Dcn0Q0b/Uho2HhAiBs23J536rfb8079dnveqd9ur9T2vFO/3Z536rfb8079dnveqd9uz9uw8bAnbthwe+qzlrhhw+2pz1rihg23pz5riRs23J76rCVu2HB7qIaNhxBWw4YL8U79dnveqd9uzzv12+2V2p536rfb8079dnveqd9uzzv12+15p34/7IkbNtye+qwlbthwe+qzlrhhw+2pz1rihg23pz5riRs23J76rMVq2HAhqIYNF4Jq2HAhqIYNF0I5ty4hqIYNF4Jq2HAhqIYNF4Jq2HAhqIaNhxBWw4YLJS/7VxUErgTWsOFKYEP9/LoWWMOGK4E1bLgSWMOGK4E1bLgSWMOGK4E1bLgSWMPGQwmtYcOVwBo2XAmsYcOVwBo2XEnxlMAaNlwJrGHDlcAaNlwJrGHDlcAaNh5KaA0brgTWsOFKYA0brgTWsOFKiqcE1rDhSmANG64E1rDhSmANG64E1rCxokxgDRvLCaxhYzmBNWwsJ7CGjeUENsF+OYE1bCwnvJdxcA0bK6wI1rCxnMAaNpaTAjqBNWwsJ7T9qWdkljt1ZrlTZ5Y7dWa5U2eWO3VmuVNnljt1ZrlTZ5Y7dWa5U2eWO3VmuVNnljt1ZrlTZ5Y7dWa5U2eWO3VmuVNnljt1ZrmjZZY7Wma5U2eWO3VmuVNnljt1ZrlTZ5Y7dWa5U2eWO3VmuVNnljt1ZrlTZ5Y7dWa5U2eWO3VmuVNnljt1ZrlTZ5Y7dWa5U2eWO1pmuaNlljtaZrmjZZY7Wma5o2WWO1pmuaNlljtaZrmjZZY7Wma542WWO15mueNlljteZrnjZZY7Xma542WWO15mueNlljteZrnjZZY7Xma542WWO15mueNlljteZrnjZZY7Xma542WWO15mueNlljteZrnjZZY7Xma542WWO15mueNlljteZrnjZZY7Xma5A2aWO2BmuQNmljtgZrkDZpY7YGa5A2aWO2BmuQNmljtgZrkDZpY7YGa542WWh/3n075rPU4dlRc249rA56F/f6m88Rf7h/hgFZ+s4uWgNS+05kJrXmnNldbcaM0brTntCVpoj9BCe4YK7RkqtGeo0J6hQnuGCu0ZKrRnqISdoRehhxM+PpPsvD2kpreEGU2oRzihhBMknPDx3jbOxaOj3hI0nGDhhBZO+HRN29H/+lI7xi1hhBNmNEGPcEIJJ3z6aTU5v9TkntDCCZ/+pFs977o1kzuCHeGE8O+Sfbym9fosWb8ljHDCjCa0I5xQwgkSTqjhBA0nWDihhRO+uKZbuyWMcMLna/ra+fotoX+8pq/d+xmhhBMknPDpmm5XRqMd85ag4QQLJ7RwQg8nfLym5zmQupXjljCjCeMIJ5RwgoQTajhBwwkWTmjhhP5Fwu2aHiOc8PmaPm+0NLklzI/X9PU69BmhhBMknPDxOf3qv0WnhhMsnNDCCT2cMMIJ4W9Onlzn/hpiWkLDxjTmho1pzA0b05gbNqYxN2xMY27YmMbcsDGNuWFjGnPDxjTmho1pzA0b05gbNqYxN2xMY27YmMbcsDGNuWFjGnPDxjTmho1pzA0b05gbNqaBNWxMA2vYmMbcsDGNuWFjGnPDxjTmho1pzA0b05gbNqYxN2xMY27YmMbcsDGNuWFjGnPDhttTn7XEDRtuT33WEjdsTGNu2HB76rOWuGFjGnPDxjSwhg0XgmrYcCGohg0XgmrYcCGUc+sSgmrYmAbWsDENrGFjGljDxjSwho1pYA0b0+AaNqbBNWxMg2vYmAbXsDENrmFjGlzDxjS4ho1pcA0b0+AaNqbBNWxMg2vYmAbXsDENrmFjGlzDxjS4ho1pcA0b0+AaNqbBNWxMg2vYmAbXsDENrmFjGlzDxjS4ho1pcA0b0+AaNqbBNWxMg2vYmAbXsDENrmFjGlzDxjS8ho3lBNawsZzAGjaWE1jDxnICm2C/nMAaNpYT3ss4uIaNFVYEa9hYTmANG8tJAZ3AGjaWE9b+1A7hbNhwccrx4C5OOR3cxTkbNpY55XTwZU45HXyZU04HX+ZKa045HXyZUzZsLHPaE5SzYWOZ056hnA0by5z2DOVs2FjmtGcoZ8PGMqc9Q2MbNhahhxNCGzYWYUYTYhs2FqGEEyScENqwsQgaTrBwQgsnhDZsLMIIJ8xoQmzDxiKUcEJow8YitHBC6JxIJ8Q2bCxC+HcptmFjEUY4YUYTYhs2FqGEEyScUMMJGk6wcEILJ4Q2bCzCCCeENmysP2eFNmwsQgknSDghtGFjETScYOGEFk7o4YTQho1FmNGE2IaNRSjhBAkn1HCChhMsnNDCCaENG4swwgmhDRvrEkRow8YilHCChBNCGzYWQcMJFk5o4YQeThjhhPA3J8ENG62U+IYNh/A2bCx72qnfy5526veyp536veyV2p526veyp536vexpp34ve9qp38uetmHD7XkbNpY99VnL27Cx7KnPWt6GjWVPfdbyNmwse+qzlrdhY9kjNWy4EFTDxhKinfq97Gmnfi972qnfy16p7Wmnfi972qnfy5526veyp536vexpp367PW/DxrKnPmt5GzaWPfVZy9uwseypz1reho1lT33W8jZsLHvqsxaqYWMJITVsLCGkho0lhNSwsYRQzq1LCKlhYwkhNWwsIaSGjSWE1LCxhJAaNlwIqmFjCSUv+xcVBEsJq2FjKWEN9VvXtbAaNpYSVsPGUsJq2FhKWA0bSwmrYWMpYTVsLCWshg1XAmvYWEpYDRtLCathYylhNWwsJcVTwmrYWEpYDRtLCathYylhNWwsJayGDVcCa9hYSlgNG0sJq2FjKWE1bCwlxVPCathYSlgNG0sJq2FjKWE1bCwlrIaNH1EmrIaNH05YDRs/nLAaNn44YTVs/HACm2C/nLAaNn444b2MQ2vY+BFWxGrY+OGE1bDxw0kBnbAaNn44oe1PIyOzPKgzy4M6szyoM8uDOrM8qDPLgzqzPKgzy4M6szyoM8uDOrM8qDPLgzqzPKgzy4M6szyoM8uDOrM8qDPLgzqzPKgzywMtszzQMsuDOrM8qDPLgzqzPKgzy4M6szyoM8uDOrM8qDPLgzqzPKgzy4M6szyoM8uDOrM8qDPLgzqzPKgzy4M6szyoM8uDOrM80DLLAy2zPNAyywMtszzQMssDLbM80DLLAy2zPNAyywMtszzQMssDL7M88DLLAy+zPPAyywMvszzwMssDL7M88DLLAy+zPPAyywMvszzwMssDL7M88DLLAy+zPPAyywMvszzwMssDL7M88DLLAy+zPPAyywMvszzwMssDL7M88DLLAy+zPPAyywMvszzwMssDMLM8ADPLAzCzPAAzywMwszwAM8sDMLM8ADPLAzCzPAAzywMwszwAM8sDL7NcjyeZZdN+Pmet/xzyxUvsD58B5jPBfJ7Ev3+jUEETEjShiiakaEKGJtTQhND26YK2URe0nVrQdmpB26kFbacWtJ1a0HZqQdupJXCnvhg9gfH5fvrFG7EuNMGE6oEmVNCEBE2oogkpmpChCTU0oY4mhLZTV7SdWtF2akXbqRVtp1a0nVrRdmpF26kVbafWwJ36YowExoxn2JHAKAkMSWDUBIYmMCyB0RIYCeu8ff7ZfRUkcIqkUD7/uf/CH/LazPi39COFkvLT7/oFys+vzjvFUigthdJTKCOFMjMo4xvr5ecXfJ1SUiiSQqkpFE2hWAqlpVB6CmWkUGYGZX5h7b+4sOqUkkKRFEpNoWgKxVIoLYXSUygjhfKFtf/iKvK6pnXkYEoORjP+E6YcloNpOZiegvnCjcBfwpQcjORgag4mYd3I/R3efj3W+4t3u3qcV4pVXtwoHtdeMQ/9n/96CfzGG2O5v+zLID5Zxe83CwrzQmsutOaV1lxpzY3WvNGa056ghfYILbRnqNCeoUJ7hgrtGSq0Z6jQnqFCe4ZK2Bl6EXo44eMzyc4/3arpLWFGE+oRTijhBAknfLy3jXPx6Ki3BA0nWDihhRM+XdN2nC+k7Bi3hBFOmNEEPcIJJZzw6afV5PxSk3tCCyd8+pNu9bx20UzuCHaEE8K/S/bxmr5eMpv1W8IIJ8xoQjvCCSWcIOGEGk7QcIKFE1o44YtrurVbwggnfL6mr52v3xL6x2v62r2fEUo4QcIJn67pdl2Qbce8JWg4wcIJLZzQwwkfr+lpJ6Ect4QZTRhHOKGEEyScUMMJGk6wcEILJ/QvEm7X9BjhhM/X9HmVrsktYX68pq/Xoc8IJZwg4YSPz+lX/y06NZxg4YQWTujhhBFOCH9z8uTe6tcQ+uS2WvlnMzCPc/MrWsodpCRPlv7iUCN9dteJxl6o7Su1vVLbG7V9o7bv1PaD2n4y2wv1WSvUZ61Qn7VCfdYK9Vkr1GetUJ+1Qn3WCvVZKyhn7SlUUY7PSyj5RPziFDJ9duuNxr5S2yu1vVHbN2r7Tm0/qO0ns70e1PbUZ61Sn7VKfdYq9Vmr1GetUp+1Sn3WKvVZq9RnraGctZcQyvF5CaGciJcQyiF3CaGcW5cQylF0CaGcLpcQyoFxCaGcAZcQyrZ+CjW0nbolL/tX85/1WaLk9yqBFXPrs6zEb/0udcFTqnhK2WXTL6Zh67OsxO9VGnhKE05pHHhKBU8pfV/6+QxqfZYo+b1KiqdkeEoNT6njKQ08pQmnNA88pYKnlL17v5hVrs+yQ79XSfGUDE+p4Sl1PKWBpzThlJ5VCfxep+z9+0VJwXISQKcK6NTgXjI960r4vU54L+PKMfGcsvN+v+RUAZ0U0MkAndD2p0nasPEQ5xwP/hDnnA7+ECdt2HBzzungbs45HdzNOaeDu7nSmnNOB3dzzoYNN6c9QUkbNtyc9gwlbdhwc9ozlLRhw81pz1DShg03pz1Dgxs2nNDDCbENG06Y0YTghg0nlHCChBNiGzacoOEECye0cEJsw4YTRjhhRhOCGzacUMIJsQ0bTmjhhNg5kQ9CcMOGE8K/S8ENG04Y4YQZTQhu2HBCCSdIOKGGEzScYOGEFk6IbdhwwggnxDZs+J+zYhs2nFDCCRJOiG3YcIKGEyyc0MIJPZwQ27DhhBlNCG7YcEIJJ0g4oYYTNJxg4YQWToht2HDCCCfENmz4JYjYhg0nlHCChBNiGzacoOEECye0cEIPJ4xwQvibk+iGDRsJDRsPCHHDhtvzTv12e96p327PO/Xb7ZXannfqt9vzTv12e96p327PO/Xb7XkbNh72xA0bbk991hI3bLg99VlL3LDh9tRnLXHDhttTn7XEDRtuD9Ww8RDCathwId6p327PO/Xb7Xmnfru9UtvzTv12e96p327PO/Xb7Xmnfrs979Tvhz1xw4bbU5+1xA0bbk991hI3bLg99VlL3LDh9tRnLXHDhttTn7VYDRsuBNWw4UJQDRsuBNWw4UIo59YlBNWw4UJQDRsuBNWw4UJQDRsuBNWw8RDCathwoeRl/6qCwJXAGjZcCWyon1/XAmvYcCWwhg1XAmvYcCWwhg1XAmvYcCWwhg1XAmvYeCihNWy4EljDhiuBNWy4EljDhispnhJYw4YrgTVsuBJYw4YrgTVsuBJYw8ZDCa1hw5XAGjZcCaxhw5XAGjZcSfGUwBo2XAmsYcOVwBo2XAmsYcOVwBo2VpQJrGFjOYE1bCwnsIaN5QTWsLGcwCbYLyewho3lhPcyDq5hY4UVwRo2lhNYw8ZyUkAnsIaN5QS2PzVLyCw/IMSZZbfnzVG5PW+Oyu15c1Rur9T2vDkqt+fNUbk9b47K7XlzVG7Pm1l+2BNnlt2e+qwlziy7PfVZS5xZdnvqs5Y4s+z21GctcWbZ7aEyyw8hrMyyC/HmqNyeN0fl9rw5KrdXanveHJXb8+ao3J43R+X2vDkqt+fNUT3siTPLbk991hJnlt2e+qwlziy7PfVZS5xZdnvqs5Y4s+z21GctVmbZhaAyyy4ElVl2IajMsguhnFuXEFRm2YWgMssuBJVZdiGozLILQWWWH0JYmWUXSl72r0KdrgSWWXYlsGuSfl0LLLPsSmCZZVcCyyy7Elhm2ZXAMsuuBJZZdiWwzPJDCS2z7EpgmWVXAsssuxJYZtmVFE8JLLPsSmCZZVcCyyy7Elhm2ZXAMssPJbTMsiuBZZZdCSyz7EpgmWVXUjwlsMyyK4Flll0JLLPsSmCZZVcCyyyvKBNYZnk5gWWWlxNYZnk5gWWWlxNeJhAus7yc8F7GwWWWV1gRLLO8nMAyy8tJAZ3AMsvLCWx/6vU/n/Zd63HqqLywGdcGPg/9+0vljb/YP8QHq/hkFS8HrXmhNRda80prrrTmRmveaM1pT9BCe4QW2jNUaM9QoT1DhfYMFdozVGjPUKE9QyXsDL0IPZzw8Zlk5+0hNb0lzGhCPcIJJZwg4YSP97ZxLh4d9Zag4QQLJ7Rwwqdr2o7+15faMW4JI5wwowl6hBNKOOHTT6vJ+aUm94QWTvj0J93qedetmdwR7AgnhH+X7OM1rddnyfotYYQTZjShHeGEEk6QcEINJ2g4wcIJLZzwxTXd2i1hhBM+X9PXztdvCf3jNX3t3s8IJZwg4YRP13S7MhrtmLcEDSdYOKGFE3o44eM1Pc+B1K0ct4QZTRhHOKGEEyScUMMJGk6wcEILJ/QvEm7X9BjhhM/X9HmjpcktYX68pq/Xoc8IJZwg4YSPz+lX/y06NZxg4YQWTujhhBFOCH9z8uQ699cQoyY0bIzK3LAxKnPDxqjMDRujMjdsjMrcsDEqc8PGqMwNG6MyN2yMytywMSpzw8aozA0bozI3bIzK3LAxKnPDxqjMDRujMjdsjMrcsDEqc8PGqMwNG6OCNWyMCtawMSpzw8aozA0bozI3bIzK3LAxKnPDxqjMDRujMjdsjMrcsDEqc8PGqMwNG6MyN2y4PfVZS9yw4fbUZy1xw8aozA0bbk991hI3bIzK3LAxKljDhgtBNWy4EFTDhgtBNWy4EMq5dQlBNWyMCtawMSpYw8aoYA0bo4I1bIwK1rAxKlzDxqhwDRujwjVsjArXsDEqXMPGqHANG6PCNWyMCtewMSpcw8aocA0bo8I1bIwK17AxKlzDxqhwDRujwjVsjArXsDEqXMPGqHANG6PCNWyMCtewMSpcw8aocA0bo8I1bIwK17AxKlzDxqhwDRujwjVsjArXsDEqXMPGqHANG6PiNWwsJ7CGjeUE1rCxnMAaNpYT2AT75QTWsLGc8F7GwTVsrLAiWMPGcgJr2FhOCugE1rCxnMD2p3mQNmw8xDnHgz/EOaeDP8RJGzbcnHM6uJtzTgd3c87p4G6utOac08HdnLNhw81pT1DShg03pz1DSRs23Jz2DCVt2HBz2jOUtGHDzWnP0OCGDSf0cEJsw4YTZjQhuGHDCSWcIOGE2IYNJ2g4wcIJLZwQ27DhhBFOmNGE4IYNJ5RwQmzDhhNaOCF2TuSDENyw4YTw71Jww4YTRjhhRhOCGzacUMIJEk6o4QQNJ1g4oYUTYhs2nDDCCbENG/7nrNiGDSeUcIKEE2IbNpyg4QQLJ7RwQg8nxDZsOGFGE4IbNpxQwgkSTqjhBA0nWDihhRNiGzacMMIJsQ0bfgkitmHDCSWcIOGE2IYNJ2g4wcIJLZzQwwkjnBD+5iS6YWPOhIaNB4S4YcPtead+uz3v1G+355367fZKbc879dvtead+uz3v1G+355367fa8DRsPe+KGDbenPmuJGzbcnvqsJW7YcHvqs5a4YcPtqc9a4oYNt4dq2HgIYTVsuBDv1G+355367fa8U7/dXqntead+uz3v1G+355367fa8U7/dnnfq98OeuGHD7anPWuKGDbenPmuJGzbcnvqsJW7YcHvqs5a4YcPtqc9arIYNF4Jq2HAhqIYNF4Jq2HAhlHPrEoJq2HAhqIYNF4Jq2HAhqIYNF4Jq2HgIYTVsuFDysn9VQeBKYA0brgQ21M+va4E1bLgSWMOGK4E1bLgSWMOGK4E1bLgSWMOGK4E1bDyU0Bo2XAmsYcOVwBo2XAmsYcOVFE8JrGHDlcAaNlwJrGHDlcAaNlwJrGHjoYTWsOFKYA0brgTWsOFKYA0brqR4SmANG64E1rDhSmANG64E1rDhSmANGyvKBNawsZzAGjaWE1jDxnICa9hYTmgT7Cdew8ZywnsZB9ewscKKYA0bywmsYWM5KaATWMPGcsLan/rR4jPLDuHNLC972hzVsqfNUS172hzVsldqe9oc1bKnzVEte9oc1bKnzVEte9rMstvzZpaXPfVZy5tZXvbUZy1vZnnZU5+1vJnlZU991vJmlpc9UmbZhaAyy0uINke17GlzVMueNke17JXanjZHtexpc1TLnjZHtexpc1TLnjZH5fa8meVlT33W8maWlz31WcubWV721Gctb2Z52VOftbyZ5WVPfdZCZZaXEFJmeQkhZZaXEFJmeQmhnFuXEFJmeQkhZZaXEFJmeQkhZZaXEFJm2YWgMstLKHnZvwh1LiWszPJSwromua5rYWWWlxJWZnkpYWWWlxJWZnkpYWWWlxJWZnkpYWWWXQkss7yUsDLLSwkrs7yUsDLLS0nxlLAyy0sJK7O8lLAyy0sJK7O8lLAyy64EllleSliZ5aWElVleSliZ5aWkeEpYmeWlhJVZXkpYmeWlhJVZXkpYmeUfUSaszPIPJ6zM8g8nrMzyDyeszPIPJ7xMIFpm+YcT3ss4tMzyj7AiVmb5hxNWZvmHkwI6YWWWfzhB7U9SZn0SN+jHadTt777yctjfz/U3nxtvPjffe+7+DvovPFfefE7efO52WY/j+Ou5cTx5Tt98zt58rr35XH/zufHmc/O95+4vXY7rDeno4/658uZz8uZz9c3n9M3n7M3n2pvP3X9eRj+fm+3+ufHmc/O95+4vDv3Cc+XN5+TN5+qbz91+XmY519Es9+vo/u7JLzzX3nyuv/ncePO5+d5z99cXfuG58uI5uf/5NXnzufrmc/efl3qu96n36/3+ysIvPNfefK6/+dx487n53nP9ePO5+89Lu34fPFT/14P/75988UWRFEpNoWgKxVIoLYXSUygjhTIzKPe3Db5OSVn7I2Xtj5S1P1LW/khZ+yNl7Y+UtT9S1v5IWfszZe3PlLU/U9b+TFn7M2Xtz5S1P1PW/kxZ+zNl7c+Utf/kL53fx5QcjORgag5GczCWg2k5mJ6DGTmYnF2g5OwCJWcXKDm7QMnZBUrOLlBydoGSswuUnF2g5OwCJWcXkJxdQHJ2AcnZBSRnF5CcXUBydgHJ2QUkZxeQnF1AcnaBmrML1JxdoObsAjVnF6g5u0DN2QVqzi5Qc3aBmrML1JxdQHN2Ac3ZBTRnF9CcXUBzdgHN2QU0ZxfQnF1Ac3YBzdkFLGcXsJxdwHJ2AcvZBSxnF7CcXcBydgHL2QUsZxewnF2g5ewCLWcXaDm7QMvZBVrOLtBydoGWswu0nF2g5ewCLWcX6Dm7QM79wJJzQbDk3BAsOVcES84dwZJzSbDk3BIsOdcES849wZJzUbDk3BQsOVcFS85dwZJzWbDk3BYsOdcFS859wZJzYbDk3BgsOVcGS86dwZJzabDk3BosOdcGS869wZJzcbDk3BwsOVcHS87dQcm5Oyg5dwcl5+6g5NwdlENzMJaDaTmYnoMZOZicXSDn7qDk3B2UnLuDknN3UHLuDkrO3UHJuTsoOXcHJefuoOTcHZScu4OSc3dQcu4OSs7dQcm5Oyg5dwcl5+6g5NwdlJy7g5Jzd1By7g5Kzt1Bybk7KDl3ByXn7qDk3B2UnLuDknN3UHLuDkrO3UHJuTsoOXcHJefuoOTcHZScu4Pyhdt2dpyjZKz811RV/a8RgV+4bPcLlC/cTjO5KNWeUCSFUlMomkKxFMo/PWj+frK/++QXbg38wuf6C5cGfoViKZSWQknZ1b5wYcD0HEltJk8oM4PyhesCv0IpKRRJoXxh7ddxUeoTiqZQLIXSUig9hTJSKDPj5PzCJYFfoaT8djZTfjubKb+dfeGCwK9QUn47+8L1gF+h9BTKSKFkrP16HCmUkkKRFEpNoWgKxVIoLYXSUygjhZKy9kvK2i8pa7+krP2SsvZLytovKWu/pKz9krL2S8raLylrX1LWvqSsfUlZ+5Ky9iVl7UvK2peUtS/xa3/+576CzfQsvyjW/ldx6v9lDDvfKI1Rfv6lpYxLXuS/Xg3I5TPAfCaYz/2vNr9TqKAJCZpQRRNSNCFDE2poQmj7dEHbqAvaTi1oO7Wg7dSCtlML2k4taDu1oO3UErhTX4yewPh8P51H+etrZz0+/8ZOMKF6oAkVNCFBE6poQoomZGhCDU2oowmh7dQVbadWtJ1a0XZqRdupFW2nVrSdWtF2akXbqTVwp74YI4Ex4xl2JDBKAkMSGDWBoQkMS2C0BEbCOm+ff3bLcdTzi48itxRJoXz+cy+if+++7fYFQpsZ/5Z+pFBSfvpdv0Bp86KMdkuxFEpLofQUykihzAzK+MZ6aeVvSr+llBSKpFBqCkVTKJZCaSmUnkIZKZSZQZlfWPul6PnFRW9/U5olhSIplJpC0RSKpVBaCqWnUEYK5Qtrv3S5KGPcUZ60Wn8fU3IwmvGfMOWwHEzLwfQUzBduBP4SpuRgJAdTczDh60aOcn+Ht1+P9f7i3a4eZ15XxX7+pePaK+bx9+Xjx0vgf/zG2MUHq/hkFb/fLCjMC6250JpXWnOlNTda80ZrTnuCFtojtNCeoUJ7hgrtGSq0Z6jQnqFCe4YK7RkqYWfoRejhhI/PJDv/dKumt4QZTahHOKGEEySc8PHeNs7Fo6PeEjScYOGEFk74dE3bcb6QsmPcEkY4YUYT9AgnlHDCp59Wk/NLTe4JLZzw6U+61fPaRTO5I9gRTgj/LtnHa/p6yWzWbwkjnDCjCe0IJ5RwgoQTajhBwwkWTmjhhC+u6dZuCSOc8Pmavna+fkvoH6/pa/d+RijhBAknfLqm23VBth3zlqDhBAsntHBCDyd8vKannYRy3BJmNGEc4YQSTpBwQg0naDjBwgktnNC/SLhd02OEEz5f0+dVuia3hPnxmr5ehz4jlHCChBM+Pqdf/bfo1HCChRNaOKGHE0Y4IfzNyZN7q19DlCe31Uqr18XdZi/+5FL0ODe/oqXcQZ5civxnFB0Xpb/6K9DXhhot+0JtL9T2ldpeqe2N2r5R23dq+0FtP5nthfqsFeqzVqjPWqE+a4X6rBXqs1aoz1qhPmuF+qwVlLP2FKoox+cllHwifm8K2bIXavtKba/U9kZt36jtO7X9oLafzPZ6UNtTn7VKfdYq9Vmr1GetUp+1Sn3WKvVZq9RnrVKftYZy1l5CKMfnJYRyIl5CKIfcJYRybl1CKEfRJYRyulxCKAfGJYRyBlxCKNv6KdTQduqWvOxfzH9eSoanlPzBfjVcrDzLSvzW71IXPKWKp9SylX46DXspdTylgac04ZTGgadU8JTS96WfzqBeShVPSfGUDE+p4Sl1PKWBpzThlOaBp1TwlLJ375/PKl9KFU9J8ZQMT6nhKXU8pYGnNOGUnlUJ/F6n7P375yUFP5wE0KkCOjW4l0zPuhJ+rxPey7hyTDyn7LzfLzlVQCcFdDJAJ7T9aZA2bDzEOceDP8Q5p4M/xEkbNtycczq4m3NOB3dzzungbq605pzTwd2cs2HDzWlPUNKGDTenPUNJGzbcnPYMJW3YcHPaM5S0YcPNac/Q4IYNJ/RwQmzDhhNmNCG4YcMJJZwg4YTYhg0naDjBwgktnBDbsOGEEU6Y0YTghg0nlHBCbMOGE1o4IXZO5IMQ3LDhhPDvUnDDhhNGOGFGE4IbNpxQwgkSTqjhBA0nWDihhRNiGzacMMIJsQ0b/ues2IYNJ5RwgoQTYhs2nKDhBAsntHBCDyfENmw4YUYTghs2nFDCCRJOqOEEDSdYOKGFE2IbNpwwwgmxDRt+CSK2YcMJJZwg4YTYhg0naDjBwgktnNDDCSOcEP7mJLphQ3pCw8YDQtyw4fa8U7/dnnfqt9vzTv12e6W255367fa8U7/dnnfqt9vzTv12e96GjYc9ccOG21OftcQNG25PfdYSN2y4PfVZS9yw4fbUZy1xw4bbQzVsPISwGjZciHfqt9vzTv12e96p326v1Pa8U7/dnnfqt9vzTv12e96p327PO/X7YU/csOH21GctccOG21OftcQNG25PfdYSN2y4PfVZS9yw4fbUZy1Ww4YLQTVsuBBUw4YLQTVsuBDKuXUJQTVsuBBUw4YLQTVsuBBUw4YLQTVsPISwGjZcKHnZv6ogcCWwhg1XAhvq59e1wBo2XAmsYcOVwBo2XAmsYcOVwBo2XAmsYcOVwBo2HkpoDRuuBNaw4UpgDRuuBNaw4UqKpwTWsOFKYA0brgTWsOFKYA0brgTWsPFQQmvYcCWwhg1XAmvYcCWwhg1XUjwlsIYNVwJr2HAlsIYNVwJr2HAlsIaNFWUCa9hYTmANG8sJrGFjOYE1bCwnsAn2ywmsYWM54b2Mg2vYWGFFsIaN5QTWsLGcFNAJrGFjOYHtT1UTMssPCHFm2e15c1Ruz5ujcnveHJXbK7U9b47K7XlzVG7Pm6Nye94cldvzZpYf9sSZZbenPmuJM8tuT33WEmeW3Z76rCXOLLs99VlLnFl2e6jM8kMIK7PsQrw5KrfnzVG5PW+Oyu2V2p43R+X2vDkqt+fNUbk9b47K7XlzVA974syy21OftcSZZbenPmuJM8tuT33WEmeW3Z76rCXOLLs99VmLlVl2IajMsgtBZZZdCCqz7EIo59YlBJVZdiGozLILQWWWXQgqs+xCUJnlhxBWZtmFkpf9q1CnK4Flll0J7JqkX9cCyyy7Elhm2ZXAMsuuBJZZdiWwzLIrgWWWXQkss/xQQsssuxJYZtmVwDLLrgSWWXYlxVMCyyy7Elhm2ZXAMsuuBJZZdiWwzPJDCS2z7EpgmWVXAsssuxJYZtmVFE8JLLPsSmCZZVcCyyy7Elhm2ZXAMssrygSWWV5OYJnl5QSWWV5OYJnl5YSXCYTLLC8nvJdxcJnlFVYEyywvJ7DM8nJSQCewzPJyAtufVP7zad+1HqeOygubcW3g89C/v1Te+Iv9Q3ywik9W8XLQmhdac6E1r7TmSmtutOaN1pz2BC20R2ihPUOF9gwV2jNUaM9QoT1DhfYMFdozVMLO0IvQwwkfn0l23h5S01vCjCbUI5xQwgkSTvh4bxvn4tFRbwkaTrBwQgsnfLqm7eh/fakd45YwwgkzmqBHOKGEEz79tJqcX2pyT2jhhE9/0q2ed92ayR3BjnBC+HfJPl7Ten2WrN8SRjhhRhPaEU4o4QQJJ9RwgoYTLJzQwglfXNOt3RJGOOHzNX3tfP2W0D9e09fu/YxQwgkSTvh0Tbcro9GOeUvQcIKFE1o4oYcTPl7T8xxI3cpxS5jRhHGEE0o4QcIJNZyg4QQLJ7RwQv8i4XZNjxFO+HxNnzdamtwS5sdr+nod+oxQwgkSTvj4nH7136JTwwkWTmjhhB5OGOGE8DcnT65zfw1hktCwYcLcsGHC3LBhwtywYcLcsGHC3LBhwtywYcLcsGHC3LBhwtywYcLcsGHC3LBhwtywYcLcsGHC3LBhwtywYcLcsGHC3LBhwtywYcLcsGEC1rBhAtawYcLcsGHC3LBhwtywYcLcsGHC3LBhwtywYcLcsGHC3LBhwtywYcLcsGHC3LDh9tRnLXHDhttTn7XEDRsmzA0bbk991hI3bJgwN2yYgDVsuBBUw4YLQTVsuBBUw4YLoZxblxBUw4YJWMOGCVjDhglYw4YJWMOGCVjDhglcw4YJXMOGCVzDhglcw4YJXMOGCVzDhglcw4YJXMOGCVzDhglcw4YJXMOGCVzDhglcw4YJXMOGCVzDhglcw4YJXMOGCVzDhglcw4YJXMOGCVzDhglcw4YJXMOGCVzDhglcw4YJXMOGCVzDhglcw4YJXMOGCVzDhglew8ZyAmvYWE5gDRvLCaxhYzmBTbBfTmANG8sJ72UcXMPGCiuCNWwsJ7CGjeWkgE5gDRvLCW1/mqQNGw9xzvHgD3HO6eAPcdKGDTfnnA7u5pzTwd2cczq4myutOed0cDfnbNhwc9oTlLRhw81pz1DShg03pz1DSRs23Jz2DCVt2HBz2jM0uGHDCT2cENuw4YQZTQhu2HBCCSdIOCG2YcMJGk6wcEILJ8Q2bDhhhBNmNCG4YcMJJZwQ27DhhBZOiJ0T+SAEN2w4Ify7FNyw4YQRTpjRhOCGDSeUcIKEE2o4QcMJFk5o4YTYhg0njHBCbMOG/zkrtmHDCSWcIOGE2IYNJ2g4wcIJLZzQwwmxDRtOmNGE4IYNJ5RwgoQTajhBwwkWTmjhhNiGDSeMcEJsw4Zfgoht2HBCCSdIOCG2YcMJGk6wcEILJ/RwwggnhL85iW7YaCOhYeMBIW7YcHveqd9uzzv12+15p367vVLb8079dnveqd9uzzv12+15p367PW/DxsOeuGHD7anPWuKGDbenPmuJGzbcnvqsJW7YcHvqs5a4YcPtoRo2HkJYDRsuxDv12+15p367Pe/Ub7dXanveqd9uzzv12+15p367Pe/Ub7fnnfr9sCdu2HB76rOWuGHD7anPWuKGDbenPmuJGzbcnvqsJW7YcHvqsxarYcOFoBo2XAiqYcOFoBo2XAjl3LqEoBo2XAiqYcOFoBo2XAiqYcOFoBo2HkJYDRsulLzsX1UQuBJYw4YrgQ318+taYA0brgTWsOFKYA0brgTWsOFKYA0brgTWsOFKYA0bDyW0hg1XAmvYcCWwhg1XAmvYcCXFUwJr2HAlsIYNVwJr2HAlsIYNVwJr2HgooTVsuBJYw4YrgTVsuBJYw4YrKZ4SWMOGK4E1bLgSWMOGK4E1bLgSWMPGijKBNWwsJ7CGjeUE1rCxnMAaNpYT2AT75QTWsLGc8F7GwTVsrLAiWMPGcgJr2FhOCugE1rCxnMD2p24JmeUHhDiz7Pa8OSq3581RuT1vjsrtldqeN0fl9rw5KrfnzVG5PW+Oyu15M8sPe+LMsttTn7XEmWW3pz5riTPLbk991hJnlt2e+qwlziy7PVRm+SGElVl2Id4cldvz5qjcnjdH5fZKbc+bo3J73hyV2/PmqNyeN0fl9rw5qoc9cWbZ7anPWuLMsttTn7XEmWW3pz5riTPLbk991hJnlt2e+qzFyiy7EFRm2YWgMssuBJVZdiGUc+sSgsosuxBUZtmFoDLLLgSVWXYhqMzyQwgrs+xCycv+VajTlcAyy64Edk3Sr2uBZZZdCSyz7EpgmWVXAsssuxJYZtmVwDLLrgSWWX4ooWWWXQkss+xKYJllVwLLLLuS4imBZZZdCSyz7EpgmWVXAsssuxJYZvmhhJZZdiWwzLIrgWWWXQkss+xKiqcElll2JbDMsiuBZZZdCSyz7EpgmeUVZQLLLC8nsMzycgLLLC8nsMzycsLLBMJllpcT3ss4uMzyCiuCZZaXE1hmeTkpoBNYZnk5ge1Poz/JLJv28zlr/eeQL15if/gMMJ8J5vMk/v0bhQqakKAJVTQhRRMyNKGGJoS2Txe0jbqg7dSCtlML2k4taDu1oO3UgrZTC9pOLYE79cXoCYzP99Mv3oh1oQkmVA80oYImJGhCFU1I0YQMTaihCXU0IbSduqLt1Iq2UyvaTq1oO7Wi7dSKtlMr2k6taDu1Bu7UF2MkMGY8w44ERklgSAKjJjA0gWEJjJbASFjn7fPP7qsggVMkhfL5z/0X/pDXZsa/pR8plJSfftcvUH5+dd4plkJpKZSeQhkplJlBGd9YLz+/4OuUkkKRFEpNoWgKxVIoLYXSUygjhTIzKPMLa//FhVWnlBSKpFBqCkVTKJZCaSmUnkIZKZQvrP0XV5HXNa0jB1NyMJrxnzDlsBxMy8H0FMwXbgT+EqbkYCQHU3MwCetm3t/h7ddjvb94t6vHeaVY5cWN4nHtFfPQ//mvl8BvvDGe95d9GcQnq/j9ZkFhXmjNhda80porrbnRmjdac9oTtNAeoYX2DBXaM1Roz1ChPUOF9gwV2jNUaM9QCTtDL0IPJ3x8Jtn5p1s1vSXMaEI9wgklnCDhhI/3tnEuHh31lqDhBAsntHDCp2vajvOFlB3jljDCCTOaoEc4oYQTPv20mpxfanJPaOGET3/SrZ7XLprJHcGOcEL4d8k+XtPXS2azfksY4YQZTWhHOKGEEyScUMMJGk6wcEILJ3xxTbd2SxjhhM/X9LXz9VtC/3hNX7v3M0IJJ0g44dM13a4Lsu2YtwQNJ1g4oYUTejjh4zU97SSU45YwownjCCeUcIKEE2o4QcMJFk5o4YT+RcLtmh4jnPD5mj6v0jW5JcyP1/T1OvQZoYQTJJzw8Tn96r9Fp4YTLJzQwgk9nDDCCeFvTp7cW/0aYj65rfYPZ2Ae5+ZXtJQ7SEmeLP3FoUbz2V0nGnuhtq/U9kptb9T2jdq+U9sPavvJbC/UZ61Qn7VCfdYK9Vkr1GetUJ+1Qn3WCvVZK9RnraCctadQRTk+L6HkE/GLU8jms1tvNPaV2l6p7Y3avlHbd2r7QW0/me31oLanPmuV+qxV6rNWqc9apT5rlfqsVeqzVqnPWqU+aw3lrL2EUI7PSwjlRLyEUA65Swjl3LqEUI6iSwjldLmEUA6MSwjlDLiEULb1U6ih7dQtedm/mv88nyVKfq8SWDH3fJaV+K3fpS54ShVPKbts+sU07PksK/F7lQae0oRTGgeeUsFTSt+Xfj6Dej5LlPxeJcVTMjylhqfU8ZQGntKEU5oHnlLBU8revV/MKp/PskO/V0nxlAxPqeEpdTylgac04ZSeVQn8Xqfs/ftFScFyEkCnCujU4F4yPetK+L1OeC/jyjHxnLLzfr/kVAGdFNDJAJ2w9qd6NM6GDRenHA/u4pTTwV2cs2FjmVNOB1/mlNPBlznldPBlrrTmlNPBlzllw8Yypz1BORs2ljntGcrZsLHMac9QzoaNZU57hnI2bCxz2jM0tmFjEXo4IbRhYxFmNCG2YWMRSjhBwgmhDRuLoOEECye0cEJow8YijHDCjCbENmwsQgknhDZsLEILJ4TOiXRCbMPGIoR/l2IbNhZhhBNmNCG2YWMRSjhBwgk1nKDhBAsntHBCaMPGIoxwQmjDxvpzVmjDxiKUcIKEE0IbNhZBwwkWTmjhhB5OCG3YWIQZTYht2FiEEk6QcEINJ2g4wcIJLZwQ2rCxCCOcENqwsS5BhDZsLEIJJ0g4IbRhYxE0nGDhhBZO6OGEEU4If3MS3LBRi8U3bDiEt2Fj2dNO/V72tFO/lz3t1O9lr9T2tFO/lz3t1O9lTzv1e9nTTv1e9rQNG27P27Cx7KnPWt6GjWVPfdbyNmwse+qzlrdhY9lTn7W8DRvLHqlhw4WgGjaWEO3U72VPO/V72dNO/V72Sm1PO/V72dNO/V72tFO/lz3t1O9lTzv12+15GzaWPfVZy9uwseypz1reho1lT33W8jZsLHvqs5a3YWPZU5+1UA0bSwipYWMJITVsLCGkho0lhHJuXUJIDRtLCKlhYwkhNWwsIaSGjSWE1LDhQlANG0soedm/qCBYSlgNG0sJa6jfuq6F1bCxlLAaNpYSVsPGUsJq2FhKWA0bSwmrYWMpYTVsuBJYw8ZSwmrYWEpYDRtLCathYykpnhJWw8ZSwmrYWEpYDRtLCathYylhNWy4EljDxlLCathYSlgNG0sJq2FjKSmeElbDxlLCathYSlgNG0sJq2FjKWE1bPyIMmE1bPxwwmrY+OGE1bDxwwmrYeOHE9gE++WE1bDxwwnvZRxaw8aPsCJWw8YPJ6yGjR9OCuiE1bDxwwlsfxJJyCw/IMSZZbfnzVG5PW+Oyu15c1Rur9T2vDkqt+fNUbk9b47K7XlzVG7Pm1l+2BNnlt2e+qwlziy7PfVZS5xZdnvqs5Y4s+z21GctcWbZ7aEyyw8hrMyyC/HmqNyeN0fl9rw5KrdXanveHJXb8+ao3J43R+X2vDkqt+fNUT3siTPLbk991hJnlt2e+qwlziy7PfVZS5xZdnvqs5Y4s+z21GctVmbZhaAyyy4ElVl2IajMsguhnFuXEFRm2YWgMssuBJVZdiGozLILQWWWH0JYmWUXSl72r0KdrgSWWXYlsGuSfl0LLLPsSmCZZVcCyyy7Elhm2ZXAMsuuBJZZdiWwzPJDCS2z7EpgmWVXAsssuxJYZtmVFE8JLLPsSmCZZVcCyyy7Elhm2ZXAMssPJbTMsiuBZZZdCSyz7EpgmWVXUjwlsMyyK4Flll0JLLPsSmCZZVcCyyyvKBNYZnk5gWWWlxNYZnk5gWWWlxNeJhAus7yc8F7GwWWWV1gRLLO8nMAyy8tJAZ3AMsvLCWx/qsd/Pu271uPUUXlhM64NfB7695fKG3+xf4gPVvHJKl4OWvNCay605pXWXGnNjda80ZrTnqCF9ggttGeo0J6hQnuGCu0ZKrRnqNCeoUJ7hkrYGXoRejjh4zPJzttDanpLmNGEeoQTSjhBwgkf723jXDw66i1BwwkWTmjhhE/XtB39ry+1Y9wSRjhhRhP0CCeUcMKnn1aT80tN7gktnPDpT7rV865bM7kj2BFOCP8u2cdrWq/PkvVbwggnzGhCO8IJJZwg4YQaTtBwgoUTWjjhi2u6tVvCCCd8vqavna/fEvrHa/ravZ8RSjhBwgmfrul2ZTTaMW8JGk6wcEILJ/Rwwsdrep4DqVs5bgkzmjCOcEIJJ0g4oYYTNJxg4YQWTuhfJNyu6THCCZ+v6fNGS5Nbwvx4TV+vQ58RSjhBwgkfn9Ov/lt0ajjBwgktnNDDCSOcEP7m5Ml17q8h9Eho2NCDuWFDD+aGDT2YGzb0YG7Y0IO5YUMP5oYNPZgbNvRgbtjQg7lhQw/mhg09mBs29GBu2NCDuWFDD+aGDT2YGzb0YG7Y0IO5YUMP5oYNPZgbNvQAa9jQA6xhQw/mhg09mBs29GBu2NCDuWFDD+aGDT2YGzb0YG7Y0IO5YUMP5oYNPZgbNvRgbthwe+qzlrhhw+2pz1rihg09mBs23J76rCVu2NCDuWFDD7CGDReCathwIaiGDReCathwIZRz6xKCatjQA6xhQw+whg09wBo29ABr2NADrGFDD7iGDT3gGjb0gGvY0AOuYUMPuIYNPeAaNvSAa9jQA65hQw+4hg094Bo29IBr2NADrmFDD7iGDT3gGjb0gGvY0AOuYUMPuIYNPeAaNvSAa9jQA65hQw+4hg094Bo29IBr2NADrmFDD7iGDT3gGjb0gGvY0AOuYUMPuIYNPeAaNvTAa9hYTmANG8sJrGFjOYE1bCwnsAn2ywmsYWM54b2Mg2vYWGFFsIaN5QTWsLGcFNAJrGFjOaHtT520YeMhzjke/CHOOR38IU7asOHmnNPB3ZxzOribc04Hd3OlNeecDu7mnA0bbk57gpI2bLg57RlK2rDh5rRnKGnDhpvTnqGkDRtuTnuGBjdsOKGHE2IbNpwwownBDRtOKOEECSfENmw4QcMJFk5o4YTYhg0njHDCjCYEN2w4oYQTYhs2nNDCCbFzIh+E4IYNJ4R/l4IbNpwwwgkzmhDcsOGEEk6QcEINJ2g4wcIJLZwQ27DhhBFOiG3Y8D9nxTZsOKGEEyScENuw4QQNJ1g4oYUTejghtmHDCTOaENyw4YQSTpBwQg0naDjBwgktnBDbsOGEEU6IbdjwSxCxDRtOKOEECSfENmw4QcMJFk5o4YQeThjhhPA3J9ENG9YSGjYeEOKGDbfnnfrt9rxTv92ed+q32yu1Pe/Ub7fnnfrt9rxTv92ed+q32/M2bDzsiRs23J76rCVu2HB76rOWuGHD7anPWuKGDbenPmuJGzbcHqph4yGE1bDhQrxTv92ed+q32/NO/XZ7pbbnnfrt9rxTv92ed+q32/NO/XZ73qnfD3vihg23pz5riRs23J76rCVu2HB76rOWuGHD7anPWuKGDbenPmuxGjZcCKphw4WgGjZcCKphw4VQzq1LCKphw4WgGjZcCKphw4WgGjZcCKph4yGE1bDhQsnL/lUFgSuBNWy4EthQP7+uBdaw4UpgDRuuBNaw4UpgDRuuBNaw4UpgDRuuBNaw8VBCa9hwJbCGDVcCa9hwJbCGDVdSPCWwhg1XAmvYcCWwhg1XAmvYcCWwho2HElrDhiuBNWy4EljDhiuBNWy4kuIpgTVsuBJYw4YrgTVsuBJYw4YrgTVsrCgTWMPGcgJr2FhOYA0bywmsYWM5gU2wX05gDRvLCe9lHFzDxgorgjVsLCewho3lpIBOYA0bywlsf2o1IbP8gBBnlt2eN0fl9rw5KrfnzVG5vVLb8+ao3J43R+X2vDkqt+fNUbk9b2b5YU+cWXZ76rOWOLPs9tRnLXFm2e2pz1rizLLbU5+1xJllt4fKLD+EsDLLLsSbo3J73hyV2/PmqNxeqe15c1Ruz5ujcnveHJXb8+ao3J43R/WwJ84suz31WUucWXZ76rOWOLPs9tRnLXFm2e2pz1rizLLbU5+1WJllF4LKLLsQVGbZhaAyyy6Ecm5dQlCZZReCyiy7EFRm2YWgMssuBJVZfghhZZZdKHnZvwp1uhJYZtmVwK5J+nUtsMyyK4Flll0JLLPsSmCZZVcCyyy7Elhm2ZXAMssPJbTMsiuBZZZdCSyz7EpgmWVXUjwlsMyyK4Flll0JLLPsSmCZZVcCyyw/lNAyy64Elll2JbDMsiuBZZZdSfGUwDLLrgSWWXYlsMyyK4Flll0JLLO8okxgmeXlBJZZXk5gmeXlBJZZXk54mUC4zPJywnsZB5dZXmFFsMzycgLLLC8nBXQCyywvJ6z9qT2NG/TjNOr2d195Oezv5/qbz403n5vvPXd/B/0XnitvPidvPne7rMdx/PXcOJ48p28+Z28+1958rr/53Hjzufnec/eXLsf1hnT0cf9cefM5efO5+uZz+uZz9uZz7c3n7j8vo5/PzXb/3Hjzufnec/cXh37hufLmc/Lmc/XN524/L7Oc62iW+3V0f/fkF55rbz7X33xuvPncfO+5++sLv/BcefGc3P/8mrz5XH3zufvPSz3X+9T79X5/ZeEXnmtvPtfffG68+dx877l+vPnc/eelXb8PHqr/n7qzTW4kV5LthsauAZGBr8W9vb901GVWj02yqCYZUe7/mX1OSwJClYLD/9eD//NvPnxRLIVypFA8hdJSKD2FMlIoM4WyMij3pw2+TklZ+zNl7c+UtT9T1v5MWfszZe3PlLU/U9b+TFn7K2Xtr5S1v1LW/kpZ+ytl7a+Utb9S1v5KWfsrZe2vlLX/5C+d38fUHIzlYI4cjOdgWg6m52BGDmbmYHJ2gZqzC9ScXaDm7AI1ZxeoObtAzdkFas4uUHN2gZqzC9ScXcBydgHL2QUsZxewnF3AcnYBy9kFLGcXsJxdwHJ2AcvZBY6cXeDI2QWOnF3gyNkFjpxd4MjZBY6cXeDI2QWOnF3gyNkFPGcX8JxdwHN2Ac/ZBTxnF/CcXcBzdgHP2QU8ZxfwnF2g5ewCLWcXaDm7QMvZBVrOLtBydoGWswu0nF2g5ewCLWcX6Dm7QM/ZBXrOLtBzdoGeswv0nF2g5+wCPWcX6Dm7QM/ZBUbOLpBzPrDmHBCsOScEa84RwZpzRrDmHBKsOacEa84xwZpzTrDmHBSsOScFa85RwZpzVrDmHBasOacFa85xwZpzXrDmHBisOScGa86RwZpzZrDmHBqsOacGa86xwZpzbrDmHBysOScHa87RwZpzdtByzg5aztlByzk7aDlnB614DqblYHoOZuRgZg4mZxfIOTtoOWcHLefsoOWcHbScs4OWc3bQcs4OWs7ZQcs5O2g5Zwct5+yg5ZwdtJyzg5ZzdtByzg5aztlByzk7aDlnBy3n7KDlnB20nLODlnN20HLODlrO2UHLOTtoOWcHLefsoOWcHbScs4OWc3bQcs4OWs7ZQcs5O2g5Zwct5+ygfeG0XSuPq2Ra/cetqv6PKwK/cNjuB5QvnE5rdlGO9oRiKZQjheIplJZC+beD5veT490nv3Bq4Ac/1184NPATSkuh9BRKyq72hQMDzR9XUrdmTygrg/KF4wI/odQUiqVQvrD2j3lRjicUT6G0FEpPoYwUykyhrIzJ+YVDAj+hpPx2tlJ+O1spv5194YDATygpv5194XjATygjhTJTKBlr/yglhVJTKJZCOVIonkJpKZSeQhkplJlCSVn7NWXt15S1X1PWfk1Z+zVl7deUtV9T1n5NWfs1Ze3XlLVvKWvfUta+pax9S1n7lrL2LWXtW8rat/i1v/5zX8HW/FF+UVv/X8Wp/5cx2+ON0pz1zx+tdV7yZv94NWCXzyTzWWQ+97/a/E2hyiZkbEIHm5CzCTU2oc4mxLZPV7aNurLt1Ma2UxvbTm1sO7Wx7dTGtlMb205tgTv1xRgJjM/301Xqfz+7jvL5F3aRCR2FTaiyCRmb0MEm5GxCjU2oswkNNiG2nfpg26mdbad2tp3a2XZqZ9upnW2ndrad2tl2ag/cqS/GTGCseEYrCYyawLAExpHA8ARGS2D0BEbCOu+f/+zWUo7Hh0u1W4qlUD7/vlfz37tvv32B0FfG/8soKZSU7/7wL1D6uiiz31JaCqWnUEYKZaZQVgZlfmO99PqbMm4pNYViKZQjheIplJZC6SmUkUKZKZSVQVlfWPu1+uPD1W9/U1o1hWIplCOF4imUlkLpKZSRQpkplC+s/Trsosx5R3nSav19TM3BeMY/YWppOZiegxkpmC+cCPwRpuZgLAdz5GDi182o92d4x/XYGC/e7Xp55HXd2p8/Oq+9YpXfh4/Pl8D//o3xKT5VxZeq+P1mIWFeZc1N1vyQNXdZ8yZr3mXNZSdolR2hVXaGmuwMNdkZarIz1GRnqMnOUJOdoRY2Qy/CCCd8PJPa40+33vyWsKIJRwkn1HCChRM+3tvmY/H4PG4JHk5o4YQeTvh0TbfyeCHVyrwlzHDCiiZ4CSfUcMKnP63NHh9tdk/o4YRPv9P9eBy76M3uCK2EE8K/Su3jNX29ZG5t3BJmOGFFE3oJJ9RwgoUTjnCChxNaOKGHE764pnu/Jcxwwudr+tr5xi1hfLymr937GaGGEyyc8Oma7tcB2V7WLcHDCS2c0MMJI5zw8Zpe7UGo5ZawogmzhBNqOMHCCUc4wcMJLZzQwwnji4TbNT1nOOHzNf04StftlrA+XtPX69BnhBpOsHDCx3P61b9Fl4cTWjihhxNGOGGGE8LfnDw5t/o1xHxyWq324zq429uLP7lUL4/Nr3qtd5AnhyL/HcXnRRmv/gr0vUuN5rOzTjL2Jm1/SNu7tH2Ttu/S9kPafkrbL2V7k561Jj1rTXrWmvSsNelZa9Kz1qRnrUnPWpOetcYyax9CB8v4vISSJ+IXbyGbz069ydgf0vYubd+k7bu0/ZC2n9L2S9nei7S99Kx16Vnr0rPWpWetS89al561Lj1rXXrWuvSsbSyz9hJiGZ+XEMtEvIRYhtwlxDK3LiGWUXQJsUyXS4hlYFxCLDPgEmLZ1h9CnW2n7snL/tX9z/NZouTvKiX/YL+6XGw+y0r81a/SMD6lg0+pZyv9+Tbs+Swr8XeVJp/SolOahU+p8iml70t/voN6PkuU/F0l51NqfEqdT2nwKU0+pUWntAqfUuVTyt69X9xVPp9lh/6ukvMpNT6lzqc0+JQmn9KiU3pWJfB3nbL37xclBdvJCJ0OQqdO95LpWVfC33XiexlXy+Jzys77/cjpIHRyQqdG6MS2P03Rho1TXPN68FNc83bwU1y0YQPmmreDw1zzdnCYa94ODnOXNde8HRzmmg0bMJedoKINGzCXnaGiDRswl52hog0bMJedoaINGzCXnaHBDRsgjHBCbMMGCCuaENywAUINJ1g4IbZhAwQPJ7RwQg8nxDZsgDDDCSuaENywAUINJ8Q2bIDQwwmx90SehOCGDRDCv0rBDRsgzHDCiiYEN2yAUMMJFk44wgkeTmjhhB5OiG3YAGGGE2IbNvDnrNiGDRBqOMHCCbENGyB4OKGFE3o4YYQTYhs2QFjRhOCGDRBqOMHCCUc4wcMJLZzQwwmxDRsgzHBCbMMGDkHENmyAUMMJFk6IbdgAwcMJLZzQwwkjnDDDCeFvTqIbNtZIaNg4IcING7DXvfUb9rq3fsNe99Zv2Lu0ve6t37DXvfUb9rq3fsNe99Zv2Os2bJz2wg0bsJeetcING7CXnrXCDRuwl561wg0bsJeetcING7Cnatg4hbgaNiCke+s37HVv/Ya97q3fsHdpe91bv2Gve+s37HVv/Ya97q3fsNe99fu0F27YgL30rBVu2IC99KwVbtiAvfSsFW7YgL30rBVu2IC99KzlatiAEFXDBoSoGjYgRNWwASGWuXUJUTVsQIiqYQNCVA0bEKJq2IAQVcPGKcTVsAGh5GX/qoIASmQNG1Aiu9QPx7XIGjagRNawASWyhg0okTVsQImsYQNKZA0bUCJr2DiV2Bo2oETWsAElsoYNKJE1bEDJ+ZTIGjagRNawASWyhg0okTVsQImsYeNUYmvYgBJZwwaUyBo2oETWsAEl51Mia9iAElnDBpTIGjagRNawASWyho0dZSJr2NhOZA0b24msYWM7kTVsbCeyG+y3E1nDxnbiexlH17Cxw4pkDRvbiaxhYzs5oRNZw8Z24tqfRvH4zDIgupnlbS+bo9r2sjmqbS+bo9r2Lm0vm6Pa9rI5qm0vm6Pa9rI5qm0vm1mGvW5medtLz1rdzPK2l561upnlbS89a3Uzy9teetbqZpa3PVNmGUJUmeUtJJuj2vayOaptL5uj2vYubS+bo9r2sjmqbS+bo9r2sjmqbS+bo4K9bmZ520vPWt3M8raXnrW6meVtLz1rdTPL21561upmlre99KylyixvIabM8hZiyixvIabM8hZimVuXEFNmeQsxZZa3EFNmeQsxZZa3EFNmGUJUmeUtlLzsX4Q6txJXZnkrcR2T3Me1uDLLW4krs7yVuDLLW4krs7yVuDLLW4krs7yVuDLLUCLLLG8lrszyVuLKLG8lrszyVnI+Ja7M8lbiyixvJa7M8lbiyixvJa7MMpTIMstbiSuzvJW4MstbiSuzvJWcT4krs7yVuDLLW4krs7yVuDLLW4krs/wrysSVWf7lxJVZ/uXElVn+5cSVWf7lxJcJZMss/3LiexnHlln+FVbkyiz/cuLKLP9yckInrszyLyey/anafz7tu/by0HF7YTOvDXwV//1Re+Mv9qf4VBVfquK1yJpXWXOTNT9kzV3WvMmad1lz2QlaZUdolZ2hJjtDTXaGmuwMNdkZarIz1GRnqIXN0Iswwgkfz6T2OD3kzW8JK5pwlHBCDSdYOOHjvW0+Fo/P45bg4YQWTujhhE/XdCvjvx9tZd4SZjhhRRO8hBNqOOHTn9Zmj482uyf0cMKn3+l+PM669WZ3hFbCCeFfpfbxmvbrZ6mNW8IMJ6xoQi/hhBpOsHDCEU7wcEILJ/RwwhfXdO+3hBlO+HxNXzvfuCWMj9f0tXs/I9RwgoUTPl3T/cpo9LJuCR5OaOGEHk4Y4YSP1/R6XEjda7klrGjCLOGEGk6wcMIRTvBwQgsn9HDC+CLhdk3PGU74fE0/TrR0uyWsj9f09Tr0GaGGEyyc8PGcfvVv0eXhhBZO6OGEEU6Y4YTwNydPjnN/DWGW0LBhptywYabcsGGm3LBhptywYabcsGGm3LBhptywYabcsGGm3LBhptywYabcsGGm3LBhptywYabcsGGm3LBhptywYabcsGGm3LBhptywYUbWsGFG1rBhptywYabcsGGm3LBhptywYabcsGGm3LBhptywYabcsGGm3LBhptywYabcsAF76Vkr3LABe+lZK9ywYabcsAF76Vkr3LBhptywYUbWsAEhqoYNCFE1bECIqmEDQixz6xKiatgwI2vYMCNr2DAja9gwI2vYMCNr2DCja9gwo2vYMKNr2DCja9gwo2vYMKNr2DCja9gwo2vYMKNr2DCja9gwo2vYMKNr2DCja9gwo2vYMKNr2DCja9gwo2vYMKNr2DCja9gwo2vYMKNr2DCja9gwo2vYMKNr2DCja9gwo2vYMKNr2DCja9gwo2vYMKNr2DDja9jYTmQNG9uJrGFjO5E1bGwnshvstxNZw8Z24nsZR9ewscOKZA0b24msYWM7OaETWcPGdmLbn5Zow8Yprnk9+CmueTv4KS7asAFzzdvBYa55OzjMNW8Hh7nLmmveDg5zzYYNmMtOUNGGDZjLzlDRhg2Yy85Q0YYNmMvOUNGGDZjLztDghg0QRjghtmEDhBVNCG7YAKGGEyycENuwAYKHE1o4oYcTYhs2QJjhhBVNCG7YAKGGE2IbNkDo4YTYeyJPQnDDBgjhX6Xghg0QZjhhRROCGzZAqOEECycc4QQPJ7RwQg8nxDZsgDDDCbENG/hzVmzDBgg1nGDhhNiGDRA8nNDCCT2cMMIJsQ0bIKxoQnDDBgg1nGDhhCOc4OGEFk7o4YTYhg0QZjghtmEDhyBiGzZAqOEECyfENmyA4OGEFk7o4YQRTpjhhPA3J9ENG8dMaNg4IcING7DXvfUb9rq3fsNe99Zv2Lu0ve6t37DXvfUb9rq3fsNe99Zv2Os2bJz2wg0bsJeetcING7CXnrXCDRuwl561wg0bsJeetcING7Cnatg4hbgaNiCke+s37HVv/Ya97q3fsHdpe91bv2Gve+s37HVv/Ya97q3fsNe99fu0F27YgL30rBVu2IC99KwVbtiAvfSsFW7YgL30rBVu2IC99KzlatiAEFXDBoSoGjYgRNWwASGWuXUJUTVsQIiqYQNCVA0bEKJq2IAQVcPGKcTVsAGh5GX/qoIASmQNG1Aiu9QPx7XIGjagRNawASWyhg0okTVsQImsYQNKZA0bUCJr2DiV2Bo2oETWsAElsoYNKJE1bEDJ+ZTIGjagRNawASWyhg0okTVsQImsYeNUYmvYgBJZwwaUyBo2oETWsAEl51Mia9iAElnDBpTIGjagRNawASWyho0dZSJr2NhOZA0b24msYWM7kTVsbCeyG+y3E1nDxnbiexlH17Cxw4pkDRvbiaxhYzs5oRNZw8Z2ItufvCVklk+IcGYZ9ro5Ktjr5qhgr5ujgr1L2+vmqGCvm6OCvW6OCva6OSrY62aWT3vhzDLspWetcGYZ9tKzVjizDHvpWSucWYa99KwVzizDniqzfApxZZYhpJujgr1ujgr2ujkq2Lu0vW6OCva6OSrY6+aoYK+bo4K9bo7qtBfOLMNeetYKZ5ZhLz1rhTPLsJeetcKZZdhLz1rhzDLspWctV2YZQlSZZQhRZZYhRJVZhhDL3LqEqDLLEKLKLEOIKrMMIarMMoSoMsunEFdmGULJy/5VqBNKZJllKJEdk8RxLbLMMpTIMstQIsssQ4ksswwlsswylMgyy1AiyyyfSmyZZSiRZZahRJZZhhJZZhlKzqdEllmGEllmGUpkmWUokWWWoUSWWT6V2DLLUCLLLEOJLLMMJbLMMpScT4ksswwlsswylMgyy1AiyyxDiSyzvKNMZJnl7USWWd5OZJnl7USWWd5OfJlAuszyduJ7GUeXWd5hRbLM8nYiyyxvJyd0Isssbyey/amNJ5nl5uPxXOvjz5AvHmI/fSaZzyLzeRL//otClU3I2IQONiFnE2psQp1NiG2frmwbdWXbqY1tpza2ndrYdmpj26mNbac2tp3aAnfqizESGJ/vp188EQuhRSZ0FDahyiZkbEIHm5CzCTU2oc4mNNiE2Hbqg22ndrad2tl2amfbqZ1tp3a2ndrZdmpn26k9cKe+GDOBseIZrSQwagLDEhhHAsMTGC2B0RMYCeu8f/6z+ypIAIqlUD7/vv/gD3l9Zfy/jJJCSfnuD/8C5c9H50FpKZSeQhkplJlCWRmU+Y318ucDvqDUFIqlUI4UiqdQWgqlp1BGCmWmUFYGZX1h7b84sApKTaFYCuVIoXgKpaVQegplpFBmCuULa//FUeR9TKvkYGoOxjP+CVNLy8H0HMxIwXzhROCPMDUHYzmYIweTsG7W/RnecT02xot3u14eR4rdXpwontdesYr/v3+8BH7jjfG6P+yrIL5Uxe83CwnzKmtusuaHrLnLmjdZ8y5rLjtBq+wIrbIz1GRnqMnOUJOdoSY7Q012hprsDLWwGXoRRjjh45nUHn+69ea3hBVNOEo4oYYTLJzw8d42H4vH53FL8HBCCyf0cMKna7qVxwupVuYtYYYTVjTBSzihhhM+/Wlt9vhos3tCDyd8+p3ux+PYRW92R2glnBD+VWofr+nrJXNr45YwwwkrmtBLOKGGEyyccIQTPJzQwgk9nPDFNd37LWGGEz5f09fON24J4+M1fe3ezwg1nGDhhE/XdL8OyPaybgkeTmjhhB5OGOGEj9f0ag9CLbeEFU2YJZxQwwkWTjjCCR5OaOGEHk4YXyTcruk5wwmfr+nHUbput4T18Zq+Xoc+I9RwgoUTPp7Tr/4tujyc0MIJPZwwwgkznBD+5uTJudWvIfqT02r/8g7M8tj8qtd6B6nJN0t/8VKj/uysk4y9Sdsf0vYubd+k7bu0/ZC2n9L2S9nepGetSc9ak561Jj1rTXrWmvSsNelZa9Kz1qRnrbHM2ofQwTI+L6HkifjFW8j6s1NvMvaHtL1L2zdp+y5tP6Ttp7T9Urb3Im0vPWtdeta69Kx16Vnr0rPWpWetS89al561Lj1rG8usvYRYxuclxDIRLyGWIXcJscytS4hlFF1CLNPlEmIZGJcQywy4hFi29YdQZ9upe/Kyf3X/c3+WKPm7SmTF3P1ZVuKvfpWG8SkdfErZZdMvbsPuz7ISf1dp8iktOqVZ+JQqn1L6vvTnO6j7s0TJ31VyPqXGp9T5lAaf0uRTWnRKq/ApVT6l7N37xV3l/Vl26O8qOZ9S41PqfEqDT2nyKS06pWdVAn/XKXv/flFSsJ2M0OkgdOp0L5medSX8XSe+l3G1LD6n7Lzfj5wOQicndGqETmT70+iiDRunuOb14Ke45u3gp7howwbMNW8Hh7nm7eAw17wdHOYua655OzjMNRs2YC47QUUbNmAuO0NFGzZgLjtDRRs2YC47Q0UbNmAuO0ODGzZAGOGE2IYNEFY0IbhhA4QaTrBwQmzDBggeTmjhhB5OiG3YAGGGE1Y0IbhhA4QaToht2AChhxNi74k8CcENGyCEf5WCGzZAmOGEFU0IbtgAoYYTLJxwhBM8nNDCCT2cENuwAcIMJ8Q2bODPWbENGyDUcIKFE2IbNkDwcEILJ/RwwggnxDZsgLCiCcENGyDUcIKFE45wgocTWjihhxNiGzZAmOGE2IYNHIKIbdgAoYYTLJwQ27ABgocTWjihhxNGOGGGE8LfnEQ3bMyW0LBxQoQbNmCve+s37HVv/Ya97q3fsHdpe91bv2Gve+s37HVv/Ya97q3fsNdt2DjthRs2YC89a4UbNmAvPWuFGzZgLz1rhRs2YC89a4UbNmBP1bBxCnE1bEBI99Zv2Ove+g173Vu/Ye/S9rq3fsNe99Zv2Ove+g173Vu/Ya976/dpL9ywAXvpWSvcsAF76Vkr3LABe+lZK9ywAXvpWSvcsAF76VnL1bABIaqGDQhRNWxAiKphA0Isc+sSomrYgBBVwwaEqBo2IETVsAEhqoaNU4irYQNCycv+VQUBlMgaNqBEdqkfjmuRNWxAiaxhA0pkDRtQImvYgBJZwwaUyBo2oETWsHEqsTVsQImsYQNKZA0bUCJr2ICS8ymRNWxAiaxhA0pkDRtQImvYgBJZw8apxNawASWyhg0okTVsQImsYQNKzqdE1rABJbKGDSiRNWxAiaxhA0pkDRs7ykTWsLGdyBo2thNZw8Z2ImvY2E5kN9hvJ7KGje3E9zKOrmFjhxXJGja2E1nDxnZyQieyho3tRLY/LUvILJ8Q4cwy7HVzVLDXzVHBXjdHBXuXttfNUcFeN0cFe90cFex1c1Sw180sn/bCmWXYS89a4cwy7KVnrXBmGfbSs1Y4swx76VkrnFmGPVVm+RTiyixDSDdHBXvdHBXsdXNUsHdpe90cFex1c1Sw181RwV43RwV73RzVaS+cWYa99KwVzizDXnrWCmeWYS89a4Uzy7CXnrXCmWXYS89arswyhKgyyxCiyixDiCqzDCGWuXUJUWWWIUSVWYYQVWYZQlSZZQhRZZZPIa7MMoSSl/2rUCeUyDLLUCI7JonjWmSZZSiRZZahRJZZhhJZZhlKZJllKJFllqFEllk+ldgyy1AiyyxDiSyzDCWyzDKUnE+JLLMMJbLMMpTIMstQIsssQ4kss3wqsWWWoUSWWYYSWWYZSmSZZSg5nxJZZhlKZJllKJFllqFEllmGEllmeUeZyDLL24kss7ydyDLL24kss7yd+DKBdJnl7cT3Mo4us7zDimSZ5e1EllneTk7oRJZZ3k5c+9Ms5T+f9l17eei4vbCZ1wa+iv/+qP37v9hDfKqKL1XxWmTNq6y5yZofsuYua95kzbusuewErbIjtMrOUJOdoSY7Q012hprsDDXZGWqyM9TCZuhFGOGEj2dSe5we8ua3hBVNOEo4oYYTLJzw8d42H4vH53FL8HBCCyf0cMKna7qV8d+PtjJvCTOcsKIJXsIJNZzw6U9rs8dHm90Tejjh0+90Px5n3XqzO0Ir4YTwr1L7eE379bPUxi1hhhNWNKGXcEINJ1g44QgneDihhRN6OOGLa7r3W8IMJ3y+pq+db9wSxsdr+tq9nxFqOMHCCZ+u6X5lNHpZtwQPJ7RwQg8njHDCx2t6PS6k7rXcElY0YZZwQg0nWDjhCCd4OKGFE3o4YXyRcLum5wwnfL6mHydaut0S1sdr+nod+oxQwwkWTvh4Tr/6t+jycEILJ/RwwggnzHBC+JuTJ8e5v4aoJb5hAxDdho1tL3vr97aXvfV728ve+r3tXdpe9tbvbS976/e2l731e9vL3vq97WUbNmCv27Cx7aVnrW7DxraXnrW6DRvbXnrW6jZsbHvpWavbsLHtmRo2IETVsLGFZG/93vayt35ve9lbv7e9S9vL3vq97WVv/d72srd+b3vZW7+3veyt37DXbdjY9tKzVrdhY9tLz1rdho1tLz1rdRs2tr30rNVt2Nj20rOWqmFjCzE1bGwhpoaNLcTUsLGFWObWJcTUsLGFmBo2thBTw8YWYmrY2EJMDRsQomrY2ELJy/5FBcFW4mrY2Epcl/rt41pcDRtbiathYytxNWxsJa6Gja3E1bCxlbgaNrYSV8MGlMgaNrYSV8PGVuJq2NhKXA0bW8n5lLgaNrYSV8PGVuJq2NhKXA0bW4mrYQNKZA0bW4mrYWMrcTVsbCWuho2t5HxKXA0bW4mrYWMrcTVsbCWuho2txNWw8SvKxNWw8cuJq2HjlxNXw8YvJ66GjV9OZDfYbyeuho1fTnwv49gaNn6FFbkaNn45cTVs/HJyQieuho1fTmz70xBt2DjFNa8HP8U1bwc/xUUbNmCueTs4zDVvB4e55u3gMHdZc83bwWGu2bABc9kJKtqwAXPZGSrasAFz2Rkq2rABc9kZKtqwAXPZGRrcsAHCCCfENmyAsKIJwQ0bINRwgoUTYhs2QPBwQgsn9HBCbMMGCDOcsKIJwQ0bINRwQmzDBgg9nBB7T+RJCG7YACH8qxTcsAHCDCesaEJwwwYINZxg4YQjnODhhBZO6OGE2IYNEGY4IbZhA3/Oim3YAKGGEyycENuwAYKHE1o4oYcTRjghtmEDhBVNCG7YAKGGEyyccIQTPJzQwgk9nBDbsAHCDCfENmzgEERswwYINZxg4YTYhg0QPJzQwgk9nDDCCTOcEP7mJLphw3pCw8YJEW7YgL3urd+w1731G/a6t37D3qXtdW/9hr3urd+w1731G/a6t37DXrdh47QXbtiAvfSsFW7YgL30rBVu2IC99KwVbtiAvfSsFW7YgD1Vw8YpxNWwASHdW79hr3vrN+x1b/2GvUvb6976DXvdW79hr3vrN+x1b/2Gve6t36e9cMMG7KVnrXDDBuylZ61wwwbspWetcMMG7KVnrXDDBuylZy1XwwaEqBo2IETVsAEhqoYNCLHMrUuIqmEDQlQNGxCiatiAEFXDBoSoGjZOIa6GDQglL/tXFQRQImvYgBLZpX44rkXWsAElsoYNKJE1bECJrGEDSmQNG1Aia9iAElnDxqnE1rABJbKGDSiRNWxAiaxhA0rOp0TWsAElsoYNKJE1bECJrGEDSmQNG6cSW8MGlMgaNqBE1rABJbKGDSg5nxJZwwaUyBo2oETWsAElsoYNKJE1bOwoE1nDxnYia9jYTmQNG9uJrGFjO5HdYL+dyBo2thPfyzi6ho0dViRr2NhOZA0b28kJncgaNrYT2f50HAmZ5RMinFmGvW6OCva6OSrY6+aoYO/S9ro5Ktjr5qhgr5ujgr1ujgr2upnl0144swx76VkrnFmGvfSsFc4sw1561gpnlmEvPWuFM8uwp8osn0JcmWUI6eaoYK+bo4K9bo4K9i5tr5ujgr1ujgr2ujkq2OvmqGCvm6M67YUzy7CXnrXCmWXYS89a4cwy7KVnrXBmGfbSs1Y4swx76VnLlVmGEFVmGUJUmWUIUWWWIcQyty4hqswyhKgyyxCiyixDiCqzDCGqzPIpxJVZhlDysn8V6oQSWWYZSmTHJHFciyyzDCWyzDKUyDLLUCLLLEOJLLMMJbLMMpTIMsunEltmGUpkmWUokWWWoUSWWYaS8ymRZZahRJZZhhJZZhlKZJllKJFllk8ltswylMgyy1AiyyxDiSyzDCXnUyLLLEOJLLMMJbLMMpTIMstQIsss7ygTWWZ5O5FllrcTWWZ5O5FllrcTXyaQLrO8nfhextFllndYkSyzvJ3IMsvbyQmdyDLL24lqfzrq07jBKA+j0X73ldfSfj833nxuvvnceu+5+zPoP3iuvvmcvfnc7bKepfz3uVmePOdvPtfefK6/+dx487n55nPrvefuD13O6w3pHPP+ufrmc/bmc8ebz/mbz7U3n+tvPnf/8zLH47nV75+bbz633nvu/uDQD56rbz5nbz53vPnc7c/Lqo91tOr9Oro/e/KD5/qbz403n5tvPrfee+7++MIPnqsvnrP771+3N5873nzu/ufleKz35ffr/f7Iwg+e628+N958br753HrvuVHefO7+56Vfvw8W9//14P/8mw9fFEuhHCkUT6G0FEpPoYwUykyhrAzK/WmDr1NS1v5MWfszZe3PlLU/U9b+TFn7M2Xtz5S1P1PW/kpZ+ytl7a+Utb9S1v5KWfsrZe2vlLW/Utb+Sln7K2XtP/lL5/cxNQdjOZgjB+M5mJaD6TmYkYOZOZicXaDm7AI1ZxeoObtAzdkFas4uUHN2gZqzC9ScXaDm7AI1ZxewnF3AcnYBy9kFLGcXsJxdwHJ2AcvZBSxnF7CcXcBydoEjZxc4cnaBI2cXOHJ2gSNnFzhydoEjZxc4cnaBI2cXOHJ2Ac/ZBTxnF/CcXcBzdgHP2QU8ZxfwnF3Ac3YBz9kFPGcXaDm7QMvZBVrOLtBydoGWswu0nF2g5ewCLWcXaDm7QMvZBXrOLtBzdoGeswv0nF2g5+wCPWcX6Dm7QM/ZBXrOLtBzdoGRswvknA+sOQcEa84JwZpzRLDmnBGsOYcEa84pwZpzTLDmnBOsOQcFa85JwZpzVLDmnBWsOYcFa85pwZpzXLDmnBesOQcGa86JwZpzZLDmnBmsOYcGa86pwZpzbLDmnBusOQcHa87JwZpzdLDmnB20nLODlnN20HLODlrO2UErnoNpOZiegxk5mJmDydkFcs4OWs7ZQcs5O2g5Zwct5+yg5ZwdtJyzg5ZzdtByzg5aztlByzk7aDlnBy3n7KDlnB20nLODlnN20HLODlrO2UHLOTtoOWcHLefsoOWcHbScs4OWc3bQcs4OWs7ZQcs5O2g5Zwct5+yg5ZwdtJyzg5ZzdtByzg5aztlByzk7aF84bdfK4yqZVv9xq6r/44rALxy2+wHlC6fTml2Uoz2hWArlSKF4CqWlUP7toPn95Hj3yS+cGvjBz/UXDg38hNJSKD2FkrKrfeHAQPPHldSt2RPKyqB84bjATyg1hWIplC+s/WNelOMJxVMoLYXSUygjhTJTKCtjcn7hkMBPKCm/na2U385Wym9nXzgg8BNKym9nXzge8BPKSKHMFErG2j9KSaHUFIqlUI4UiqdQWgqlp1BGCmWmUFLWfk1Z+zVl7deUtV9T1n5NWfs1Ze3XlLVfU9Z+TVn7NWXtW8rat5S1bylr31LWvqWsfUtZ+5ay9i1+7a//3FewNX+UX9TW/1dx6v9lzPZ4ozRn/fNHa52XvNk/Xg3Y5TPJfBaZz/2vNn9TqLIJGZvQwSbkbEKNTaizCbHt05Vto65sO7Wx7dTGtlMb205tbDu1se3UxrZTW+BOfTFGAuPz/XSV+t/PrqN8/oVdZEJHYROqbELGJnSwCTmbUGMT6mxCg02Ibac+2HZqZ9upnW2ndrad2tl2amfbqZ1tp3a2ndoDd+qLMRMYK57RSgKjJjAsgXEkMDyB0RIYPYGRsM775z+7tZTj8eFS7ZZiKZTPv+/V/Pfu229fIPSV8f8ySgol5bs//AuUvi7K7LeUlkLpKZSRQpkplJVBmd9YL73+poxbSk2hWArlSKF4CqWlUHoKZaRQZgplZVDWF9Z+rf74cPXb35RWTaFYCuVIoXgKpaVQegplpFBmCuULa78Ouyhz3lGetFp/H1NzMJ7xT5haWg6m52BGCuYLJwJ/hKk5GMvBHDmY+HXj9f4M77geG+PFu10vj7yuW/vzR+e1V6zy+/Dx+RL4378xPsWnqvhSFb/fLCTMq6y5yZofsuYua95kzbusuewErbIjtMrOUJOdoSY7Q012hprsDDXZGWqyM9TCZuhFGOGEj2dSe/zp1pvfElY04SjhhBpOsHDCx3vbfCwen8ctwcMJLZzQwwmfrulWHi+kWpm3hBlOWNEEL+GEGk749Ke12eOjze4JPZzw6Xe6H49jF73ZHaGVcEL4V6l9vKavl8ytjVvCDCesaEIv4YQaTrBwwhFO8HBCCyf0cMIX13Tvt4QZTvh8TV8737gljI/X9LV7PyPUcIKFEz5d0/06INvLuiV4OKGFE3o4YYQTPl7Tqz0ItdwSVjRhlnBCDSdYOOEIJ3g4oYUTejhhfJFwu6bnDCd8vqYfR+m63RLWx2v6eh36jFDDCRZO+HhOv/q36PJwQgsn9HDCCCfMcEL4m5Mn51a/hmhPTqvVflwHd3t78SeX6uWx+Z3O9Q7y5FDkv6P4vCjj1V+BvnepUXt21knG3qTtD2l7l7Zv0vZd2n5I209p+6Vsb9Kz1qRnrUnPWpOetSY9a0161pr0rDXpWWvSs9ZYZu1D6GAZn5dQ8kT84i1k7dmpNxn7Q9repe2btH2Xth/S9lPafinbe5G2l561Lj1rXXrWuvSsdelZ69Kz1qVnrUvPWpeetY1l1l5CLOPzEmKZiJcQy5C7hFjm1iXEMoouIZbpcgmxDIxLiGUGXEIs2/pDqLPt1D152b+6/7k9S5T8XaXkH+xXl4u1Z1mJv/pVGsandPAp9WylP9+G3Z5lJf6u0uRTWnRKs/ApVT6l9H3pz3dQt2eJkr+r5HxKjU+p8ykNPqXJp7TolFbhU6p8Stm794u7ytuz7NDfVXI+pcan1PmUBp/S5FNadErPqgT+rlP2/v2ipGA7GaHTQejU6V4yPetK+LtOfC/jall8Ttl5vx85HYROTujUCJ3Y9qcp2rBximteD36Ka94OfoqLNmzAXPN2cJhr3g4Oc83bwWHusuaat4PDXLNhA+ayE1S0YQPmsjNUtGED5rIzVLRhA+ayM1S0YQPmsjM0uGEDhBFOiG3YAGFFE4IbNkCo4QQLJ8Q2bIDg4YQWTujhhNiGDRBmOGFFE4IbNkCo4YTYhg0Qejgh9p7IkxDcsAFC+FcpuGEDhBlOWNGE4IYNEGo4wcIJRzjBwwktnNDDCbENGyDMcEJswwb+nBXbsAFCDSdYOCG2YQMEDye0cEIPJ4xwQmzDBggrmhDcsAFCDSdYOOEIJ3g4oYUTejghtmEDhBlOiG3YwCGI2IYNEGo4wcIJsQ0bIHg4oYUTejhhhBNmOCH8zUl0w0YfCQ0bJ0S4YQP2urd+w1731m/Y6976DXuXtte99Rv2urd+w1731m/Y6976DXvdho3TXrhhA/bSs1a4YQP20rNWuGED9tKzVrhhA/bSs1a4YQP2VA0bpxBXwwaEdG/9hr3urd+w1731G/Yuba976zfsdW/9hr3urd+w1731G/a6t36f9sING7CXnrXCDRuwl561wg0bsJeetcING7CXnrXCDRuwl561XA0bEKJq2IAQVcMGhKgaNiDEMrcuIaqGDQhRNWxAiKphA0JUDRsQomrYOIW4GjYglLzsX1UQQImsYQNKZJf64bgWWcMGlMgaNqBE1rABJbKGDSiRNWxAiaxhA0pkDRunElvDBpTIGjagRNawASWyhg0oOZ8SWcMGlMgaNqBE1rABJbKGDSiRNWycSmwNG1Aia9iAElnDBpTIGjag5HxKZA0bUCJr2IASWcMGlMgaNqBE1rCxo0xkDRvbiaxhYzuRNWxsJ7KGje1EdoP9diJr2NhOfC/j6Bo2dliRrGFjO5E1bGwnJ3Qia9jYTmT70/CEzPIJEc4sw143RwV73RwV7HVzVLB3aXvdHBXsdXNUsNfNUcFeN0cFe93M8mkvnFmGvfSsFc4sw1561gpnlmEvPWuFM8uwl561wpll2FNllk8hrswyhHRzVLDXzVHBXjdHBXuXttfNUcFeN0cFe90cFex1c1Sw181RnfbCmWXYS89a4cwy7KVnrXBmGfbSs1Y4swx76VkrnFmGvfSs5cosQ4gqswwhqswyhKgyyxBimVuXEFVmGUJUmWUIUWWWIUSVWYYQVWb5FOLKLEMoedm/CnVCiSyzDCWyY5I4rkWWWYYSWWYZSmSZZSiRZZahRJZZhhJZZhlKZJnlU4ktswwlsswylMgyy1AiyyxDyfmUyDLLUCLLLEOJLLMMJbLMMpTIMsunEltmGUpkmWUokWWWoUSWWYaS8ymRZZahRJZZhhJZZhlKZJllKJFllneUiSyzvJ3IMsvbiSyzvJ3IMsvbiS8TSJdZ3k58L+PoMss7rEiWWd5OZJnl7eSETmSZ5e1Etj9N+8+nfddeHjpuL2zmtYGv4r8/am/8xf4Un6riS1W8FlnzKmtusuaHrLnLmjdZ8y5rLjtBq+wIrbIz1GRnqMnOUJOdoSY7Q012hprsDLWwGXoRRjjh45nUHqeHvPktYUUTjhJOqOEECyd8vLfNx+LxedwSPJzQwgk9nPDpmm5l/PejrcxbwgwnrGiCl3BCDSd8+tPa7PHRZveEHk749Dvdj8dZt97sjtBKOCH8q9Q+XtN+/Sy1cUuY4YQVTeglnFDDCRZOOMIJHk5o4YQeTvjimu79ljDDCZ+v6WvnG7eE8fGavnbvZ4QaTrBwwqdrul8ZjV7WLcHDCS2c0MMJI5zw8Zpejwupey23hBVNmCWcUMMJFk44wgkeTmjhhB5OGF8k3K7pOcMJn6/px4mWbreE9fGavl6HPiPUcIKFEz6e06/+Lbo8nNDCCT2cMMIJM5wQ/ubkyXHuryGWJTRsLFNu2Fim3LCxTLlhY5lyw8Yy5YaNZcoNG8uUGzaWKTdsLFNu2Fim3LCxTLlhY5lyw8Yy5YaNZcoNG8uUGzaWKTdsLFNu2Fim3LCxTLlhYxlZw8YysoaNZcoNG8uUGzaWKTdsLFNu2Fim3LCxTLlhY5lyw8Yy5YaNZcoNG8uUGzaWKTdswF561go3bMBeetYKN2wsU27YgL30rBVu2Fim3LCxjKxhA0JUDRsQomrYgBBVwwaEWObWJUTVsLGMrGFjGVnDxjKyho1lZA0by8gaNpbRNWwso2vYWEbXsLGMrmFjGV3DxjK6ho1ldA0by+gaNpbRNWwso2vYWEbXsLGMrmFjGV3DxjK6ho1ldA0by+gaNpbRNWwso2vYWEbXsLGMrmFjGV3DxjK6ho1ldA0by+gaNpbRNWwso2vYWEbXsLGMrmFjGV3DxjK6ho1lfA0b24msYWM7kTVsbCeyho3tRHaD/XYia9jYTnwv4+gaNnZYkaxhYzuRNWxsJyd0ImvY2E5s+9MSbdg4xTWvBz/FNW8HP8VFGzZgrnk7OMw1bweHuebt4DB3WXPN28FhrtmwAXPZCSrasAFz2Rkq2rABc9kZKtqwAXPZGSrasAFz2Rka3LABwggnxDZsgLCiCcENGyDUcIKFE2IbNkDwcEILJ/RwQmzDBggznLCiCcENGyDUcEJswwYIPZwQe0/kSQhu2AAh/KsU3LABwgwnrGhCcMMGCDWcYOGEI5zg4YQWTujhhNiGDRBmOCG2YQN/zopt2AChhhMsnBDbsAGChxNaOKGHE0Y4IbZhA4QVTQhu2AChhhMsnHCEEzyc0MIJPZwQ27ABwgwnxDZs4BBEbMMGCDWcYOGE2IYNEDyc0MIJPZwwwgkznBD+5iS4YcPKjG/YAES3YWPby976ve1lb/3e9rK3fm97l7aXvfV728ve+r3tZW/93vayt35ve9mGDdjrNmxse+lZq9uwse2lZ61uw8a2l561ug0b21561uo2bGx7poYNCFE1bGwh2Vu/t73srd/bXvbW723v0vayt35ve9lbv7e97K3f21721u9tL3vrN+x1Gza2vfSs1W3Y2PbSs1a3YWPbS89a3YaNbS89a3UbNra99KylatjYQkwNG1uIqWFjCzE1bGwhlrl1CTE1bGwhpoaNLcTUsLGFmBo2thBTwwaEqBo2tlDysn9RQbCVuBo2thLXpX77uBZXw8ZW4mrY2EpcDRtbiathYytxNWxsJa6Gja3E1bABJbKGja3E1bCxlbgaNrYSV8PGVnI+Ja6Gja3E1bCxlbgaNrYSV8PGVuJq2IASWcPGVuJq2NhKXA0bW4mrYWMrOZ8SV8PGVuJq2NhKXA0bW4mrYWMrcTVs/IoycTVs/HLiatj45cTVsPHLiath45cT1w32v5y4GjZ+OfG9jGNr2PgVVuRq2PjlxNWw8cvJCZ24GjZ+OZHtT7UlZJZPiHBmGfa6OSrY6+aoYK+bo4K9S9vr5qhgr5ujgr1ujgr2ujkq2Otmlk974cwy7KVnrXBmGfbSs1Y4swx76VkrnFmGvfSsFc4sw54qs3wKcWWWIaSbo4K9bo4K9ro5Kti7tL1ujgr2ujkq2OvmqGCvm6OCvW6O6rQXzizDXnrWCmeWYS89a4Uzy7CXnrXCmWXYS89a4cwy7KVnLVdmGUJUmWUIUWWWIUSVWYYQy9y6hKgyyxCiyixDiCqzDCGqzDKEqDLLpxBXZhlCycv+VagTSmSZZSiRHZPEcS2yzDKUyDLLUCLLLEOJLLMMJbLMMpTIMstQIsssn0psmWUokWWWoUSWWYYSWWYZSs6nRJZZhhJZZhlKZJllKJFllqFEllk+ldgyy1AiyyxDiSyzDCWyzDKUnE+JLLMMJbLMMpTIMstQIsssQ4kss7yjTGSZ5e1EllneTmSZ5e1EllneTnyZQLrM8nbiexlHl1neYUWyzPJ2IsssbycndCLLLG8nsv3JxpPMcvPxeK718WfIFw+xnz6TzGeR+TyJf/9FocomZGxCB5uQswk1NqHOJsS2T1e2jbqy7dTGtlMb205tbDu1se3UxrZTG9tObYE79cUYCYzP99MvnoiF0CITOgqbUGUTMjahg03I2YQam1BnExpsQmw79cG2UzvbTu1sO7Wz7dTOtlM7207tbDu1s+3UHrhTX4yZwFjxjFYSGDWBYQmMI4HhCYyWwOgJjIR13j//2X0VJADFUiiff99/8Ie8vjL+X0ZJoaR894d/gfLno/OgtBRKT6GMFMpMoawMyvzGevnzAV9QagrFUihHCsVTKC2F0lMoI4UyUygrg7K+sPZfHFgFpaZQLIVypFA8hdJSKD2FMlIoM4XyhbX/4ijyPqZVcjA1B+MZ/4SppeVgeg5mpGC+cCLwR5iag7EczJGDSVg36/4M77geG+PFu10vjyPFbi9OFM9rr1jF/98/XgK/8cZ43R/2VRBfquL3m4WEeZU1N1nzQ9bcZc2brHmXNZedoFV2hFbZGWqyM9RkZ6jJzlCTnaEmO0NNdoZa2Ay9CCOc8PFMao8/3XrzW8KKJhwlnFDDCRZO+Hhvm4/F4/O4JXg4oYUTejjh0zXdyuOFVCvzljDDCSua4CWcUMMJn/60Nnt8tNk9oYcTPv1O9+Nx7KI3uyO0Ek4I/yq1j9f09ZK5tXFLmOGEFU3oJZxQwwkWTjjCCR5OaOGEHk744pru/ZYwwwmfr+lr5xu3hPHxmr5272eEGk6wcMKna7pfB2R7WbcEDye0cEIPJ4xwwsdrerUHoZZbwoomzBJOqOEECycc4QQPJ7RwQg8njC8Sbtf0nOGEz9f04yhdt1vC+nhNX69DnxFqOMHCCR/P6Vf/Fl0eTmjhhB5OGOGEGU4If3Py5Nzq1xDHk9Nq//IOzPLY/KrXegepyTdLf/FSo+PZWScZe5O2P6TtXdq+Sdt3afshbT+l7ZeyvUnPWpOetSY9a0161pr0rDXpWWvSs9akZ61Jz1pjmbUPoYNlfF5CyRPxi7eQHc9OvcnYH9L2Lm3fpO27tP2Qtp/S9kvZ3ou0vfSsdelZ69Kz1qVnrUvPWpeetS49a1161rr0rG0ss/YSYhmflxDLRLyEWIbcJcQyty4hllF0CbFMl0uIZWBcQiwz4BJi2dYfQp1tp+7Jy/7V/c/Hs0TJ31UiK+Y+nmUl/upXaRif0sGnlF02/eI27ONZVuLvKk0+pUWnNAufUuVTSt+X/nwH9fEsUfJ3lZxPqfEpdT6lwac0+ZQWndIqfEqVTyl7935xV/nxLDv0d5WcT6nxKXU+pcGnNPmUFp3SsyqBv+uUvX+/KCnYTkbodBA6dbqXTM+6Ev6uE9/LuFoWn1N23u9HTgehkxM6NUInsv3Ju2jDximueT34Ka55O/gpLtqwAXPN28Fhrnk7OMw1bweHucuaa94ODnPNhg2Yy05Q0YYNmMvOUNGGDZjLzlDRhg2Yy85Q0YYNmMvO0OCGDRBGOCG2YQOEFU0IbtgAoYYTLJwQ27ABgocTWjihhxNiGzZAmOGEFU0IbtgAoYYTYhs2QOjhhNh7Ik9CcMMGCOFfpeCGDRBmOGFFE4IbNkCo4QQLJxzhBA8ntHBCDyfENmyAMMMJsQ0b+HNWbMMGCDWcYOGE2IYNEDyc0MIJPZwwwgmxDRsgrGhCcMMGCDWcYOGEI5zg4YQWTujhhNiGDRBmOCG2YQOHIGIbNkCo4QQLJ8Q2bIDg4YQWTujhhBFOmOGE8Dcn0Q0brSU0bJwQ4YYN2Ove+g173Vu/Ya976zfsXdpe99Zv2Ove+g173Vu/Ya976zfsdRs2Tnvhhg3YS89a4YYN2EvPWuGGDdhLz1rhhg3YS89a4YYN2FM1bJxCXA0bENK99Rv2urd+w1731m/Yu7S97q3fsNe99Rv2urd+w1731m/Y6976fdoLN2zAXnrWCjdswF561go3bMBeetYKN2zAXnrWCjdswF561nI1bECIqmEDQlQNGxCiatiAEMvcuoSoGjYgRNWwASGqhg0IUTVsQIiqYeMU4mrYgFDysn9VQQAlsoYNKJFd6ofjWmQNG1Aia9iAElnDBpTIGjagRNawASWyhg0okTVsnEpsDRtQImvYgBJZwwaUyBo2oOR8SmQNG1Aia9iAElnDBpTIGjagRNawcSqxNWxAiaxhA0pkDRtQImvYgJLzKZE1bECJrGEDSmQNG1Aia9iAElnDxo4ykTVsbCeyho3tRNawsZ3IGja2E9kN9tuJrGFjO/G9jKNr2NhhRbKGje1E1rCxnZzQiaxhYzuR7U/dEjLLJ0Q4swx73RwV7HVzVLDXzVHB3qXtdXNUsNfNUcFeN0cFe90cFex1M8unvXBmGfbSs1Y4swx76VkrnFmGvfSsFc4sw1561gpnlmFPlVk+hbgyyxDSzVHBXjdHBXvdHBXsXdpeN0cFe90cFex1c1Sw181RwV43R3XaC2eWYS89a4Uzy7CXnrXCmWXYS89a4cwy7KVnrXBmGfbSs5YrswwhqswyhKgyyxCiyixDiGVuXUJUmWUIUWWWIUSVWYYQVWYZQlSZ5VOIK7MMoeRl/yrUCSWyzDKUyI5J4rgWWWYZSmSZZSiRZZahRJZZhhJZZhlKZJllKJFllk8ltswylMgyy1AiyyxDiSyzDCXnUyLLLEOJLLMMJbLMMpTIMstQIsssn0psmWUokWWWoUSWWYYSWWYZSs6nRJZZhhJZZhlKZJllKJFllqFEllneUSayzPJ2IsssbyeyzPJ2Isssbye+TCBdZnk78b2Mo8ss77AiWWZ5O5FllreTEzqRZZa3E9n+NMp/Pu279vLQcXthM68NfBX//VF74y/2p/hUFV+q4rXImldZc5M1P2TNXda8yZp3WXPZCVplR2iVnaEmO0NNdoaa7Aw12RlqsjPUZGeohc3QizDCCR/PpPY4PeTNbwkrmnCUcEINJ1g44eO9bT4Wj8/jluDhhBZO6OGET9d0K+O/H21l3hJmOGFFE7yEE2o44dOf1maPjza7J/Rwwqff6X48zrr1ZneEVsIJ4V+l9vGa9utnqY1bwgwnrGhCL+GEGk6wcMIRTvBwQgsn9HDCF9d077eEGU74fE1fO9+4JYyP1/S1ez8j1HCChRM+XdP9ymj0sm4JHk5o4YQeThjhhI/X9HpcSN1ruSWsaMIs4YQaTrBwwhFO8HBCCyf0cML4IuF2Tc8ZTvh8TT9OtHS7JayP1/T1OvQZoYYTLJzw8Zx+9W/R5eGEFk7o4YQRTpjhhPA3J0+Oc38NMUtCw8Ysyg0bsyg3bMyi3LAxi3LDxizKDRuzKDdszKLcsDGLcsPGLMoNG7MoN2zMotywMYtyw8Ysyg0bsyg3bMyi3LAxi3LDxizKDRuzKDdszKLcsDELWcPGLGQNG7MoN2zMotywMYtyw8Ysyg0bsyg3bMyi3LAxi3LDxizKDRuzKDdszKLcsDGLcsMG7KVnrXDDBuylZ61ww8Ysyg0bsJeetcING7MoN2zMQtawASGqhg0IUTVsQIiqYQNCLHPrEqJq2JiFrGFjFrKGjVnIGjZmIWvYmIWsYWMWuoaNWegaNmaha9iYha5hYxa6ho1Z6Bo2ZqFr2JiFrmFjFrqGjVnoGjZmoWvYmIWuYWMWuoaNWegaNmaha9iYha5hYxa6ho1Z6Bo2ZqFr2JiFrmFjFrqGjVnoGjZmoWvYmIWuYWMWuoaNWegaNmaha9iYha5hYxa6ho1Z6Bo2ZuFr2NhOZA0b24msYWM7kTVsbCeyG+y3E1nDxnbiexlH17Cxw4pkDRvbiaxhYzs5oRNZw8Z2YtufhmjDximueT34Ka55O/gpLtqwAXPN28Fhrnk7OMw1bweHucuaa94ODnPNhg2Yy05Q0YYNmMvOUNGGDZjLzlDRhg2Yy85Q0YYNmMvO0OCGDRBGOCG2YQOEFU0IbtgAoYYTLJwQ27ABgocTWjihhxNiGzZAmOGEFU0IbtgAoYYTYhs2QOjhhNh7Ik9CcMMGCOFfpeCGDRBmOGFFE4IbNkCo4QQLJxzhBA8ntHBCDyfENmyAMMMJsQ0b+HNWbMMGCDWcYOGE2IYNEDyc0MIJPZwwwgmxDRsgrGhCcMMGCDWcYOGEI5zg4YQWTujhhNiGDRBmOCG2YQOHIGIbNkCo4QQLJ8Q2bIDg4YQWTujhhBFOmOGE8Dcn0Q0bqyc0bJwQ4YYN2Ove+g173Vu/Ya976zfsXdpe99Zv2Ove+g173Vu/Ya976zfsdRs2Tnvhhg3YS89a4YYN2EvPWuGGDdhLz1rhhg3YS89a4YYN2FM1bJxCXA0bENK99Rv2urd+w1731m/Yu7S97q3fsNe99Rv2urd+w1731m/Y6976fdoLN2zAXnrWCjdswF561go3bMBeetYKN2zAXnrWCjdswF561nI1bECIqmEDQlQNGxCiatiAEMvcuoSoGjYgRNWwASGqhg0IUTVsQIiqYeMU4mrYgFDysn9VQQAlsoYNKJFd6ofjWmQNG1Aia9iAElnDBpTIGjagRNawASWyhg0okTVsnEpsDRtQImvYgBJZwwaUyBo2oOR8SmQNG1Aia9iAElnDBpTIGjagRNawcSqxNWxAiaxhA0pkDRtQImvYgJLzKZE1bECJrGEDSmQNG1Aia9iAElnDxo4ykTVsbCeyho3tRNawsZ3IGja2E9kN9tuJrGFjO/G9jKNr2NhhRbKGje1E1rCxnZzQiaxhYztx7U9HOeIzy4DoZpa3vWyOatvL5qi2vWyOatu7tL1sjmrby+aotr1sjmrby+aotr1sZhn2upnlbS89a3Uzy9teetbqZpa3vfSs1c0sb3vpWaubWd72TJllCFFllreQbI5q28vmqLa9bI5q27u0vWyOatvL5qi2vWyOatvL5qi2vWyOCva6meVtLz1rdTPL21561upmlre99KzVzSxve+lZq5tZ3vbSs5Yqs7yFmDLLW4gps7yFmDLLW4hlbl1CTJnlLcSUWd5CTJnlLcSUWd5CTJllCFFllrdQ8rJ/EercSlyZ5a3EdUxyH9fiyixvJa7M8lbiyixvJa7M8lbiyixvJa7M8lbiyixDiSyzvJW4MstbiSuzvJW4MstbyfmUuDLLW4krs7yVuDLLW4krs7yVuDLLUCLLLG8lrszyVuLKLG8lrszyVnI+Ja7M8lbiyixvJa7M8lbiyixvJa7M8q8oE1dm+ZcTV2b5lxNXZvmXE1dm+ZcTXyaQLbP8y4nvZRxbZvlXWJErs/zLiSuz/MvJCZ24Msu/nLj2p/40bjDKw2i0333ltbTfz403n5tvPrfee+7+DPoPnqtvPmdvPne7rGcp/31ulifP+ZvPtTef628+N958br753HrvuftDl/N6QzrHvH+uvvmcvfnc8eZz/uZz7c3n+pvP3f+8zPF4bvX75+abz633nrs/OPSD5+qbz9mbzx1vPnf787LqYx2ter+O7s+e/OC5/uZz483n5pvPrfeeuz++8IPn6ovn7P771+3N5443n7v/eTke6335/Xq/P7Lwg+f6m8+NN5+bbz633ntulDefu/956dfvg8X9fz34P//mwxfFUihHCsVTKC2F0lMoI4UyUygrg3J/2uDrlJS1P1PW/kxZ+zNl7c+UtT9T1v5MWfszZe3PlLW/Utb+Sln7K2Xtr5S1v1LW/kpZ+ytl7a+Utb9S1v5KWftP/tL5fUzNwVgO5sjBeA6m5WB6DmbkYGYOJmcXqDm7QM3ZBWrOLlBzdoGaswvUnF2g5uwCNWcXqDm7QM3ZBSxnF7CcXcBydgHL2QUsZxewnF3AcnYBy9kFLGcXsJxd4MjZBY6cXeDI2QWOnF3gyNkFjpxd4MjZBY6cXeDI2QWOnF3Ac3YBz9kFPGcX8JxdwHN2Ac/ZBTxnF/CcXcBzdgHP2QVazi7QcnaBlrMLtJxdoOXsAi1nF2g5u0DL2QVazi7QcnaBnrML9JxdoOfsAj1nF+g5u0DP2QV6zi7Qc3aBnrML9JxdYOTsAjnnA2vOAcGac0Kw5hwRrDlnBGvOIcGac0qw5hwTrDnnBGvOQcGac1Kw5hwVrDlnBWvOYcGac1qw5hwXrDnnBWvOgcGac2Kw5hwZrDlnBmvOocGac2qw5hwbrDnnBmvOwcGac3Kw5hwdrDlnBy3n7KDlnB20nLODlnN20IrnYFoOpudgRg5m5mBydoGcs4OWc3bQcs4OWs7ZQcs5O2g5Zwct5+yg5ZwdtJyzg5ZzdtByzg5aztlByzk7aDlnBy3n7KDlnB20nLODlnN20HLODlrO2UHLOTtoOWcHLefsoOWcHbScs4OWc3bQcs4OWs7ZQcs5O2g5Zwct5+yg5ZwdtJyzg5ZzdtByzg7aF07btfK4SqbVf9yq6v+4IvALh+1+QPnC6bRmF+VoTyiWQjlSKJ5CaSmUfztofj853n3yC6cGfvBz/YVDAz+htBRKT6Gk7GpfODDQ/HEldWv2hLIyKF84LvATSk2hWArlC2v/mBfleELxFEpLofQUykihzBTKypicXzgk8BNKym9nK+W3s5Xy29kXDgj8hJLy29kXjgf8hDJSKDOFkrH2j1JSKDWFYimUI4XiKZSWQukplJFCmSmUlLVfU9Z+TVn7NWXt15S1X1PWfk1Z+zVl7deUtV9T1n5NWfuWsvYtZe1bytq3lLVvKWvfUta+pax9i1/76z/3FWzNH+UXtfX/VZz6fxmzPd4ozVn//NFa5yVv9o9XA3b5TDKfReZz/6vN3xSqbELGJnSwCTmbUGMT6mxCbPt0ZduoK9tObWw7tbHt1Ma2UxvbTm1sO7Wx7dQWuFNfjJHA+Hw/XaX+97PrKJ9/YReZ0FHYhCqbkLEJHWxCzibU2IQ6m9BgE2LbqQ+2ndrZdmpn26mdbad2tp3a2XZqZ9upnW2n9sCd+mLMBMaKZ7SSwKgJDEtgHAkMT2C0BEZPYCSs8/75z24t5Xh8uFS7pVgK5fPvezX/vfv22xcIfWX8v4ySQkn57g//AqWvizL7LaWlUHoKZaRQZgplZVDmN9ZLr78p45ZSUyiWQjlSKJ5CaSmUnkIZKZSZQlkZlPWFtV+rPz5c/fY3pVVTKJZCOVIonkJpKZSeQhkplJlC+cLar8Muypx3lCet1t/H1ByMZ/wTppaWg+k5mJGC+cKJwB9hag7GcjBHDiZ+3dR6f4Z3XI+N8eLdrpdHXtet/fmj89orVvl9+Ph8Cfzv3xif4lNVfKmK328WEuZV1txkzQ9Zc5c1b7LmXdZcdoJW2RFaZWeoyc5Qk52hJjtDTXaGmuwMNdkZamEz9CKMcMLHM6k9/nTrzW8JK5pwlHBCDSdYOOHjvW0+Fo/P45bg4YQWTujhhE/XdCuPF1KtzFvCDCesaIKXcEINJ3z609rs8dFm94QeTvj0O92Px7GL3uyO0Eo4Ifyr1D5e09dL5tbGLWGGE1Y0oZdwQg0nWDjhCCd4OKGFE3o44YtruvdbwgwnfL6mr51v3BLGx2v62r2fEWo4wcIJn67pfh2QPf9UeUvwcEILJ/RwwggnfLymV3sQarklrGjCLOGEGk6wcMIRTvBwQgsn9HDC+CLhdk3PGU74fE0/jtJ1uyWsj9f09Tr0GaGGEyyc8PGcfvVv0eXhhBZO6OGEEU6Y4YTwNydPzq1+DWFPTqvVflwHd3t78SeX6uWx+VWv9Q7y5FDkv6P4vCjj1V+BvnepkT076yRjb9L2h7S9S9s3afsubT+k7ae0/VK2N+lZa9Kz1qRnrUnPWpOetSY9a0161pr0rDXpWWsss/YhdLCMz0soeSJ+8RYye3bqTcb+kLZ3afsmbd+l7Ye0/ZS2X8r2XqTtpWetS89al561Lj1rXXrWuvSsdelZ69Kz1qVnbWOZtZcQy/i8hFgm4iXEMuQuIZa5dQmxjKJLiGW6XEIsA+MSYpkBlxDLtv4Q6mw7dU9e9q/uf7ZniZK/q5T8g/3qcjF7lpX4q1+lYXxKB59Sz1b6823Y9iwr8XeVJp/SolOahU+p8iml70t/voPaniVK/q6S8yk1PqXOpzT4lCaf0qJTWoVPqfIpZe/eL+4qt2fZob+r5HxKjU+p8ykNPqXJp7TolJ5VCfxdp+z9+0VJwXYyQqeD0KnTvWR61pXwd534XsbVsvicsvN+P3I6CJ2c0KkROrHtT1O0YeMU17we/BTXvB38FBdt2IC55u3gMNe8HRzmmreDw9xlzTVvB4e5ZsMGzGUnqGjDBsxlZ6howwbMZWeoaMMGzGVnqGjDBsxlZ2hwwwYII5wQ27ABwoomBDdsgFDDCRZOiG3YAMHDCS2c0MMJsQ0bIMxwwoomBDdsgFDDCbENGyD0cELsPZEnIbhhA4Twr1JwwwYIM5ywognBDRsg1HCChROOcIKHE1o4oYcTYhs2QJjhhNiGDfw5K7ZhA4QaTrBwQmzDBggeTmjhhB5OGOGE2IYNEFY0IbhhA4QaTrBwwhFO8HBCCyf0cEJswwYIM5wQ27CBQxCxDRsg1HCChRNiGzZA8HBCCyf0cMIIJ8xwQvibk+iGjWMkNGycEOGGDdjr3voNe91bv2Gve+s37F3aXvfWb9jr3voNe91bv2Gve+s37HUbNk574YYN2EvPWuGGDdhLz1rhhg3YS89a4YYN2EvPWuGGDdhTNWycQlwNGxDSvfUb9rq3fsNe99Zv2Lu0ve6t37DXvfUb9rq3fsNe99Zv2Ove+n3aCzdswF561go3bMBeetYKN2zAXnrWCjdswF561go3bMBeetZyNWxAiKphA0JUDRsQomrYgBDL3LqEqBo2IETVsAEhqoYNCFE1bECIqmHjFOJq2IBQ8rJ/VUEAJbKGDSiRXeqH41pkDRtQImvYgBJZwwaUyBo2oETWsAElsoYNKJE1bJxKbA0bUCJr2IASWcMGlMgaNqDkfEpkDRtQImvYgBJZwwaUyBo2oETWsHEqsTVsQImsYQNKZA0bUCJr2ICS8ymRNWxAiaxhA0pkDRtQImvYgBJZw8aOMpE1bGwnsoaN7UTWsLGdyBo2thPZDfbbiaxhYzvxvYyja9jYYUWyho3tRNawsZ2c0ImsYWM7ke1P7gmZ5RMinFmGvW6OCva6OSrY6+aoYO/S9ro5Ktjr5qhgr5ujgr1ujgr2upnl0144swx76VkrnFmGvfSsFc4sw1561gpnlmEvPWuFM8uwp8osn0JcmWUI6eaoYK+bo4K9bo4K9i5tr5ujgr1ujgr2ujkq2OvmqGCvm6M67YUzy7CXnrXCmWXYS89a4cwy7KVnrXBmGfbSs1Y4swx76VnLlVmGEFVmGUJUmWUIUWWWIcQyty4hqswyhKgyyxCiyixDiCqzDCGqzPIpxJVZhlDysn8V6oQSWWYZSmTHJHFciyyzDCWyzDKUyDLLUCLLLEOJLLMMJbLMMpTIMsunEltmGUpkmWUokWWWoUSWWYaS8ymRZZahRJZZhhJZZhlKZJllKJFllk8ltswylMgyy1AiyyxDiSyzDCXnUyLLLEOJLLMMJbLMMpTIMstQIsss7ygTWWZ5O5FllrcTWWZ5O5FllrcTXyaQLrO8nfhextFllndYkSyzvJ3IMsvbyQmdyDLL24lsf2r2n0/7rr08dNxe2MxrA1/Ff3/U3viL/Sk+VcWXqngtsuZV1txkzQ9Zc5c1b7LmXdZcdoJW2RFaZWeoyc5Qk52hJjtDTXaGmuwMNdkZamEz9CKMcMLHM6k9Tg9581vCiiYcJZxQwwkWTvh4b5uPxePzuCV4OKGFE3o44dM13cr470dbmbeEGU5Y0QQv4YQaTvj0p7XZ46PN7gk9nPDpd7ofj7Nu53/ujtBKOCH8q9Q+XtN+/Sy1cUuY4YQVTeglnFDDCRZOOMIJHk5o4YQeTvjimu79ljDDCZ+v6WvnG7eE8fGavnbvZ4QaTrBwwqdrul8ZjV7WLcHDCS2c0MMJI5zw8Zpejwupey23hBVNmCWcUMMJFk44wgkeTmjhhB5OGF8k3K7pOcMJn6/px4mWbreE9fGavl6HPiPUcIKFEz6e06/+Lbo8nNDCCT2cMMIJM5wQ/ubkyXHuryG6JTRsdFNu2Oim3LDRTblho5tyw0Y35YaNbsoNG92UGza6KTdsdFNu2Oim3LDRTblho5tyw0Y35YaNbsoNG92UGza6KTdsdFNu2Oim3LDRTblhoxtZw0Y3soaNbsoNG92UGza6KTdsdFNu2Oim3LDRTblho5tyw0Y35YaNbsoNG92UGza6KTdswF561go3bMBeetYKN2x0U27YgL30rBVu2Oim3LDRjaxhA0JUDRsQomrYgBBVwwaEWObWJUTVsNGNrGGjG1nDRjeyho1uZA0b3cgaNrrRNWx0o2vY6EbXsNGNrmGjG13DRje6ho1udA0b3egaNrrRNWx0o2vY6EbXsNGNrmGjG13DRje6ho1udA0b3egaNrrRNWx0o2vY6EbXsNGNrmGjG13DRje6ho1udA0b3egaNrrRNWx0o2vY6EbXsNGNrmGjG13DRje6ho1ufA0b24msYWM7kTVsbCeyho3tRHaD/XYia9jYTnwv4+gaNnZYkaxhYzuRNWxsJyd0ImvY2E5s+9MSbdg4xTWvBz/FNW8HP8VFGzZgrnk7OMw1bweHuebt4DB3WXPN28FhrtmwAXPZCSrasAFz2Rkq2rABc9kZKtqwAXPZGSrasAFz2Rka3LABwggnxDZsgLCiCcENGyDUcIKFE2IbNkDwcEILJ/RwQmzDBggznLCiCcENGyDUcEJswwYIPZwQe0/kSQhu2AAh/KsU3LABwgwnrGhCcMMGCDWcYOGEI5zg4YQWTujhhNiGDRBmOCG2YQN/zopt2AChhhMsnBDbsAGChxNaOKGHE0Y4IbZhA4QVTQhu2AChhhMsnHCEEzyc0MIJPZwQ27ABwgwnxDZs4BBEbMMGCDWcYOGE2IYNEDyc0MIJPZwwwgkznBD+5iS6YWPMhIaNEyLcsAF73Vu/Ya976zfsdW/9hr1L2+ve+g173Vu/Ya976zfsdW/9hr1uw8ZpL9ywAXvpWSvcsAF76Vkr3LABe+lZK9ywAXvpWSvcsAF7qoaNU4irYQNCurd+w1731m/Y6976DXuXtte99Rv2urd+w1731m/Y6976DXvdW79Pe+GGDdhLz1rhhg3YS89a4YYN2EvPWuGGDdhLz1rhhg3YS89aroYNCFE1bECIqmEDQlQNGxBimVuXEFXDBoSoGjYgRNWwASGqhg0IUTVsnEJcDRsQSl72ryoIoETWsAElskv9cFyLrGEDSmQNG1Aia9iAElnDBpTIGjagRNawASWyho1Tia1hA0pkDRtQImvYgBJZwwaUnE+JrGEDSmQNG1Aia9iAElnDBpTIGjZOJbaGDSiRNWxAiaxhA0pkDRtQcj4lsoYNKJE1bECJrGEDSmQNG1Aia9jYUSayho3tRNawsZ3IGja2E1nDxnYiu8F+O5E1bGwnvpdxdA0bO6xI1rCxncgaNraTEzqRNWxsJ7L9abaEzPIJEc4sw143RwV73RwV7HVzVLB3aXvdHBXsdXNUsNfNUcFeN0cFe93M8mkvnFmGvfSsFc4sw1561gpnlmEvPWuFM8uwl561wpll2FNllk8hrswyhHRzVLDXzVHBXjdHBXuXttfNUcFeN0cFe90cFex1c1Sw181RnfbCmWXYS89a4cwy7KVnrXBmGfbSs1Y4swx76VkrnFmGvfSs5cosQ4gqswwhqswyhKgyyxBimVuXEFVmGUJUmWUIUWWWIUSVWYYQVWb5FOLKLEMoedm/CnVCiSyzDCWyY5I4rkWWWYYSWWYZSmSZZSiRZZahRJZZhhJZZhlKZJnlU4ktswwlsswylMgyy1AiyyxDyfmUyDLLUCLLLEOJLLMMJbLMMpTIMsunEltmGUpkmWUokWWWoUSWWYaS8ymRZZahRJZZhhJZZhlKZJllKJFllneUiSyzvJ3IMsvbiSyzvJ3IMsvbiS8TSJdZ3k58L+PoMss7rEiWWd5OZJnl7eSETmSZ5e1Etj+t8SSz3Hw8nmt9/BnyxUPsp88k81lkPk/i339RqLIJGZvQwSbkbEKNTaizCbHt05Vto65sO7Wx7dTGtlMb205tbDu1se3UxrZTW+BOfTFGAuPz/fSLJ2IhtMiEjsImVNmEjE3oYBNyNqHGJtTZhAabENtOfbDt1M62UzvbTu1sO7Wz7dTOtlM7207tbDu1B+7UF2MmMFY8o5UERk1gWALjSGB4AqMlMHoCI2Gd989/dl8FCUCxFMrn3/cf/CGvr4z/l1FSKCnf/eFfoPz56DwoLYXSUygjhTJTKCuDMr+xXv58wBeUmkKxFMqRQvEUSkuh9BTKSKHMFMrKoKwvrP0XB1ZBqSkUS6EcKRRPobQUSk+hjBTKTKF8Ye2/OIq8j2mVHEzNwXjGP2FqaTmYnoMZKZgvnAj8EabmYCwHc+RgEtbNuj/DO67HxnjxbtfL40ix24sTxfPaK1bx//ePl8BvvDFe94d9FcSXqvj9ZiFhXmXNTdb8kDV3WfMma95lzWUnaJUdoVV2hprsDDXZGWqyM9RkZ6jJzlCTnaEWNkMvwggnfDyT2uNPt978lrCiCUcJJ9RwgoUTPt7b5mPx+DxuCR5OaOGEHk74dE238ngh1cq8JcxwwoomeAkn1HDCpz+tzR4fbXZP6OGET7/T/Xgcu+jN7githBPCv0rt4zV9vWRubdwSZjhhRRN6CSfUcIKFE45wgocTWjihhxO+uKZ7vyXMcMLna/ra+cYtYXy8pq/d+xmhhhMsnPDpmu7XAdle1i3BwwktnNDDCSOc8PGaXu1BqOWWsKIJs4QTajjBwglHOMHDCS2c0MMJ44uE2zU9Zzjh8zX9OErX7ZawPl7T1+vQZ4QaTrBwwsdz+tW/RZeHE1o4oYcTRjhhhhPC35w8Obf6LcQoT06r/cs7MMtj86te6x2kJt8s/b1LjbZ9lbY3aftD2t6l7Zu0fZe2H9L2U9p+Kdub9Kw16Vlr0rPWpGetSc9ak561Jj1rTXrWmvSsNZZZ+xA6WMbnJZQ8Eb93C9m2N2n7Q9repe2btH2Xth/S9lPafinbe5G2l561Lj1rXXrWuvSsdelZ69Kz1qVnrUvPWpeetY1l1l5CLOPzEmKZiJcQy5C7hFjm1iXEMoouIZbpcgmxDIxLiGUGXEIs2/pDqLPt1D152b+4/3krNT4lrmLufVyr0n2VhvEpHXxK2WXTf74NeysNPqXJp7TolGbhU6p8Sun70h/voN5KB5+S8yk1PqXOpzT4lCaf0qJTWoVPqfIpZe/ef76rfCsdfErOp9T4lDqf0uBTmnxKi07pWZXA33XK3r//XFLwy8kInQ5Cp073kulZV8LfdeJ7GVfL4nPKzvv9yOkgdHJCp0boRLY/1a7ZsAFxyevBIS55OzjENRs2trnk7eDbXPJ28G0ueTv4NndZc8nbwbe5ZMPGNpedoJoNG9tcdoZqNmxsc9kZqtmwsc1lZ6hmw8Y2l52hsQ0bmzDCCaENG5uwogmxDRubUMMJFk4IbdjYBA8ntHBCDyeENmxswgwnrGhCbMPGAKGGE0IbNjahhxNC74kEIbZhYxPCv0qxDRubMMMJK5oQ27CxCTWcYOGEI5zg4YQWTujhhNCGjU2Y4YTQhg0QYhs2NqGGEyycENqwsQkeTmjhhB5OGOGE0IaNTVjRhNiGjU2o4QQLJxzhBA8ntHBCDyeENmxswgwnhDZsgBDbsLEJNZxg4YTQho1N8HBCCyf0cMIIJ8xwQvibk+iGDWsJDRsnRLhhA/a6t37DXvfWb9jr3voNe5e21731G/a6t37DXvfWb9jr3voNe92GjdNeuGED9tKzVrhhA/bSs1a4YQP20rNWuGED9tKzVrhhA/ZUDRunEFfDBoR0b/2Gve6t37DXvfUb9i5tr3vrN+x1b/2Gve6t37DXvfUb9rq3fp/2wg0bsJeetcING7CXnrXCDRuwl561wg0bsJeetcING7CXnrVcDRsQomrYgBBVwwaEqBo2IMQyty4hqoYNCFE1bECIqmEDQlQNGxCiatg4hbgaNiCUvOxfVRBAiaxhA0pkl/rhuBZZwwaUyBo2oETWsAElsoYNKJE1bECJrGEDSmQNG6cSW8MGlMgaNqBE1rABJbKGDSg5nxJZwwaUyBo2oETWsAElsoYNKJE1bJxKbA0bUCJr2IASWcMGlMgaNqDkfEpkDRtQImvYgBJZwwaUyBo2oETWsLGjTGQNG9uJrGFjO5E1bGwnsoaN7UR2g/12ImvY2E58L+PoGjZ2WJGsYWM7kTVsbCcndCJr2NhOZPvTYQmZ5RMinFmGvW6OCva6OSrY6+aoYO/S9ro5Ktjr5qhgr5ujgr1ujgr2upnl0144swx76VkrnFmGvfSsFc4sw1561gpnlmEvPWuFM8uwp8osn0JcmWUI6eaoYK+bo4K9bo4K9i5tr5ujgr1ujgr2ujkq2OvmqGCvm6M67YUzy7CXnrXCmWXYS89a4cwy7KVnrXBmGfbSs1Y4swx76VnLlVmGEFVmGUJUmWUIUWWWIcQyty4hqswyhKgyyxCiyixDiCqzDCGqzPIpxJVZhlDysn8V6oQSWWYZSmTHJHFciyyzDCWyzDKUyDLLUCLLLEOJLLMMJbLMMpTIMsunEltmGUpkmWUokWWWoUSWWYaS8ymRZZahRJZZhhJZZhlKZJllKJFllk8ltswylMgyy1AiyyxDiSyzDCXnUyLLLEOJLLMMJbLMMpTIMstQIsss7ygTWWZ5O5FllrcTWWZ5O5FllrcTXyaQLrO8nfhextFllndYkSyzvJ3IMsvbyQmdyDLL24lsf/Lyn0/7rr08dNxe2MxrA1/Ff3/U3viL/Sk+VcWXqngtsuZV1txkzQ9Zc5c1b7LmXdZcdoJW2RFaZWeoyc5Qk52hJjtDTXaGmuwMNdkZamEz9CKMcMLHM6k9Tg9581vCiiYcJZxQwwkWTvh4b5uPxePzuCV4OKGFE3o44dM13cr470dbmbeEGU5Y0QQv4YQaTvj0p7XZ46PN7gk9nPDpd7ofj7NuvdkdoZVwQvhXqX28pv36WWrjljDDCSua0Es4oYYTLJxwhBM8nNDCCT2c8MU13fstYYYTPl/T1843bgnj4zV97d7PCDWcYOGET9d0vzIavaxbgocTWjihhxNGOOHjNb0eF1L3Wm4JK5owSzihhhMsnHCEEzyc0MIJPZwwvki4XdNzhhM+X9OPEy3dbgnr4zV9vQ59RqjhBAsnfDynX/1bdHk4oYUTejhhhBNmOCH8zcmT49xfQ7SS0LDRinLDRivKDRutKDdstKLcsNGKcsNGK8oNG60oN2y0otyw0Ypyw0Yryg0brSg3bLSi3LDRinLDRivKDRutKDdstKLcsNGKcsNGK8oNG60oN2y0Qtaw0QpZw0Yryg0brSg3bLSi3LDRinLDRivKDRutKDdstKLcsNGKcsNGK8oNG60oN2y0otywAXvpWSvcsAF76Vkr3LDRinLDBuylZ61ww0Yryg0brZA1bECIqmEDQlQNGxCiatiAEMvcuoSoGjZaIWvYaIWsYaMVsoaNVsgaNloha9hoha5hoxW6ho1W6Bo2WqFr2GiFrmGjFbqGjVboGjZaoWvYaIWuYaMVuoaNVugaNlqha9hoha5hoxW6ho1W6Bo2WqFr2GiFrmGjFbqGjVboGjZaoWvYaIWuYaMVuoaNVugaNlqha9hoha5hoxW6ho1W6Bo2WqFr2GiFrmGjFbqGjVb4Gja2E1nDxnYia9jYTmQNG9uJ7Ab77UTWsLGd+F7G0TVs7LAiWcPGdiJr2NhOTuhE1rCxndj2pyHasHGKa14Pfopr3g5+ios2bMBc83ZwmGveDg5zzdvBYe6y5pq3g8Ncs2ED5rITVLRhA+ayM1S0YQPmsjNUtGED5rIzVLRhA+ayMzS4YQOEEU6IbdgAYUUTghs2QKjhBAsnxDZsgODhhBZO6OGE2IYNEGY4YUUTghs2QKjhhNiGDRB6OCH2nsiTENywAUL4Vym4YQOEGU5Y0YTghg0QajjBwglHOMHDCS2c0MMJsQ0bIMxwQmzDBv6cFduwAUINJ1g4IbZhAwQPJ7RwQg8njHBCbMMGCCuaENywAUINJ1g44QgneDihhRN6OCG2YQOEGU6IbdjAIYjYhg0QajjBwgmxDRsgeDihhRN6OGGEE2Y4IfzNSXTDRu8JDRsnRLhhA/a6t37DXvfWb9jr3voNe5e21731G/a6t37DXvfWb9jr3voNe92GjdNeuGED9tKzVrhhA/bSs1a4YQP20rNWuGED9tKzVrhhA/ZUDRunEFfDBoR0b/2Gve6t37DXvfUb9i5tr3vrN+x1b/2Gve6t37DXvfUb9rq3fp/2wg0bsJeetcING7CXnrXCDRuwl561wg0bsJeetcING7CXnrVcDRsQomrYgBBVwwaEqBo2IMQyty4hqoYNCFE1bECIqmEDQlQNGxCiatg4hbgaNiCUvOxfVRBAiaxhA0pkl/rhuBZZwwaUyBo2oETWsAElsoYNKJE1bECJrGEDSmQNG6cSW8MGlMgaNqBE1rABJbKGDSg5nxJZwwaUyBo2oETWsAElsoYNKJE1bJxKbA0bUCJr2IASWcMGlMgaNqDkfEpkDRtQImvYgBJZwwaUyBo2oETWsLGjTGQNG9uJrGFjO5E1bGwnsoaN7UR2g/12ImvY2E58L+PoGjZ2WJGsYWM7kTVsbCcndCJr2NhOZPvTOBIyyydEOLMMe90cFex1c1Sw181Rwd6l7XVzVLDXzVHBXjdHBXvdHBXsdTPLp71wZhn20rNWOLMMe+lZK5xZhr30rBXOLMNeetYKZ5ZhT5VZPoW4MssQ0s1RwV43RwV73RwV7F3aXjdHBXvdHBXsdXNUsNfNUcFeN0d12gtnlmEvPWuFM8uwl561wpll2EvPWuHMMuylZ61wZhn20rOWK7MMIarMMoSoMssQososQ4hlbl1CVJllCFFlliFElVmGEFVmGUJUmeVTiCuzDKHkZf8q1AklsswylMiOSeK4FllmGUpkmWUokWWWoUSWWYYSWWYZSmSZZSiRZZZPJbbMMpTIMstQIsssQ4ksswwl51MiyyxDiSyzDCWyzDKUyDLLUCLLLJ9KbJllKJFllqFEllmGEllmGUrOp0SWWYYSWWYZSmSZZSiRZZahRJZZ3lEmsszydiLLLG8nsszydiLLLG8nvkwgXWZ5O/G9jKPLLO+wIllmeTuRZZa3kxM6kWWWtxPV/uQ25pOA1jHKf59z+/3YGtdj98mo14/V9x6z9x47/u1jrR7lSQJjlMc3abTfFe61tN/PjTefm28+t9577v5Y/g+eq28+Z28+d/vtm+Xx7ZvlyXP+5nPtzef6m8+NN5+bbz633nvu/hzqvF4azzHvn6tvPmdvPne8+Zy/+Vx787n+5nP3Py9zPJ5b/f65+eZz673n7s9S/eC5+uZz9uZzx5vP3f68rPpYR6ver6P74zg/eK6/+dx487n55nPrvefuT3T84Ln64jm7//51e/O5483n7n9ejsd6X36/3u9Pcfzguf7mc+PN5+abz633nhvlzefuf1769Stycf9fD/7Pv/nwRbEUypFC8RRKS6H0FMpIocwUysqg3B/A+DolZe3PlLU/U9b+TFn7M2Xtz5S1P1PW/kxZ+zNl7a+Utb9S1v5KWfsrZe2vlLW/Utb+Sln7K2Xtr5S1v1LW/pM//n4fU3MwloM5cjCeg2k5mJ6DGTmYmYPJ2QVqzi5Qc3aBmrML1JxdoObsAjVnF6g5u0DN2QVqzi5Qc3YBy9kFLGcXsJxdwHJ2AcvZBSxnF7CcXcBydgHL2QUsZxc4cnaBI2cXOHJ2gSNnFzhydoEjZxc4cnaBI2cXOHJ2gSNnF/CcXcBzdgHP2QU8ZxfwnF3Ac3YBz9kFPGcX8JxdwHN2gZazC7ScXaDl7AItZxdoObtAy9kFWs4u0HJ2gZazC7ScXaDn7AI9ZxfoObtAz9kFes4u0HN2gZ6zC/ScXaDn7AI9ZxcYObtAzvnAmnNAsOacEKw5RwRrzhnBmnNIsOacEqw5xwRrzjnBmnNQsOacFKw5RwVrzlnBmnNYsOacFqw5xwVrznnBmnNgsOacGKw5RwZrzpnBmnNosOacGqw5xwZrzrnBmnNwsOacHKw5RwdrztlByzk7aDlnBy3n7KDlnB204jmYloPpOZiRg5k5mJxdIOfsoOWcHbScs4OWc3bQcs4OWs7ZQcs5O2g5Zwct5+yg5ZwdtJyzg5ZzdtByzg5aztlByzk7aDlnBy3n7KDlnB20nLODlnN20HLODlrO2UHLOTtoOWcHLefsoOWcHbScs4OWc3bQcs4OWs7ZQcs5O2g5Zwct5+yg5ZwdtJyzg/aF03atPK6SafUfF816/QdlZlC+cDqt2UU52hOKpVCOFIqnUFoK5d8Omt9Pjnef/MKpgR/8XH/h0MBPKC2F0lMoKbvaFw4MNH/c0t2aPaGsDMoXjgv8hFJTKJZC+cLaP+ZFOZ5QPIXSUig9hTJSKDOFsjIm5xcOCfyEkvLb2Ur57Wyl/Hb2hQMCP6Gk/Hb2heMBP6GMFMpMoWSs/aOUFEpNoVgK5UiheAqlpVB6CmWkUGYKJWXt15S1X1PWfk1Z+zVl7deUtV9T1n5NWfs1Ze3XlLVfU9a+pax9S1n7lrL2LWXtW8rat5S1bylr3+LXfv/PfStd80f5RW39f3XJ/l/GbI83SnPWP3+01nnJm/3j1YBdPpPMZ5H53P9q8zeFKpuQsQkdbELOJtTYhDqbENs+Xdk26sq2UxvbTm1sO7Wx7dTGtlMb205tbDu1Be7UF2MkMD7fT1ep//3sOsrnX9hFJnQUNqHKJmRsQgebkLMJNTahziY02ITYduqDbad2tp3a2XZqZ9upnW2ndrad2tl2amfbqT1wp74YM4Gx4hmtJDBqAsMSGEcCwxMYLYHRExgJ67x//rNbSzkeHy7VbimWQvn8+17Nf+++/fYFQl8Z/y+jpFBSvvvDv0Dp66LMfktpKZSeQhkplJlCWRmU+Y310utvyril1BSKpVCOFIqnUFoKpadQRgplplBWBmV9Ye3X6o8PV7/9TWnVFIqlUI4UiqdQWgqlp1BGCmWmUL6w9uuwizLnHeVJq/X3MTUH4xn/hKml5WB6DmakYL5wIvBHmJqDsRzMkYNJWDfz/gzvuB4b48W7XS+PvK5b+/NH57VXrPL78PH5EviNN8bz/rCvgvhSFb/fLCTMq6y5yZofsuYua95kzbusuewErbIjtMrOUJOdoSY7Q012hprsDDXZGWqyM9TCZuhFGOGEj2dSe/zp1pvfElY04SjhhBpOsHDCx3vbfCwen8ctwcMJLZzQwwmfrulWHi+kWpm3hBlOWNEEL+GEGk749Ke12eOjze4JPZzw6Xe6H49jF73ZHaGVcEL4V6l9vKavl8ytjVvCDCesaEIv4YQaTrBwwhFO8HBCCyf0cMIX13Tvt4QZTvh8TV8737gljI/X9LV7PyPUcIKFEz5d0/06INvLuiV4OKGFE3o4YYQTPl7Tqz0ItdwSVjRhlnBCDSdYOOEIJ3g4oYUTejhhfJFwu6bnDCd8vqYfR+m63RLWx2v6eh36jFDDCRZO+HhOv/q36PJwQgsn9HDCCCfMcEL4m5Mn51a/hvAnp9VqP66Du729+JNL9fLY/KrXegd5cijy31F8XpTx6q9A37vUyJ+ddZKxN2n7Q9repe2btH2Xth/S9lPafinbm/SsNelZa9Kz1qRnrUnPWpOetSY9a0161pr0rDWWWfsQOljG5yWUPBG/eAuZPzv1JmN/SNu7tH2Ttu/S9kPafkrbL2V7L9L20rPWpWetS89al561Lj1rXXrWuvSsdelZ69KztrHM2kuIZXxeQiwT8RJiGXKXEMvcuoRYRtElxDJdLiGWgXEJscyAS4hlW38Idbaduicv+1f3P/uzRMnfVUr+wX51uZg/y0r81a/SMD6lg0+pZyv9+TZsf5aV+LtKk09p0SnNwqdU+ZTS96U/30HtzxIlf1fJ+ZQan1LnUxp8SpNPadEprcKnVPmUsnfvF3eV+7Ps0N9Vcj6lxqfU+ZQGn9LkU1p0Ss+qBP6uU/b+/aKkYDsZodNB6NTpXjI960r4u058L+NqWXxO2Xm/HzkdhE5O6NQIncj2p9ZEGzZOcc3rwU9xzdvBT3HRhg2Ya94ODnPN28Fhrnk7OMxd1lzzdnCYazZswFx2goo2bMBcdoaKNmzAXHaGijZswFx2hoo2bMBcdoYGN2yAMMIJsQ0bIKxoQnDDBgg1nGDhhNiGDRA8nNDCCT2cENuwAcIMJ6xoQnDDBgg1nBDbsAFCDyfE3hN5EoIbNkAI/yoFN2yAMMMJK5oQ3LABQg0nWDjhCCd4OKGFE3o4IbZhA4QZToht2MCfs2IbNkCo4QQLJ8Q2bIDg4YQWTujhhBFOiG3YAGFFE4IbNkCo4QQLJxzhBA8ntHBCDyfENmyAMMMJsQ0bOAQR27ABQg0nWDghtmEDBA8ntHBCDyeMcMIMJ4S/OYlu2Oie0LBxQoQbNmCve+s37HVv/Ya97q3fsHdpe91bv2Gve+s37HVv/Ya97q3fsNdt2DjthRs2YC89a4UbNmAvPWuFGzZgLz1rhRs2YC89a4UbNmBP1bBxCnE1bEBI99Zv2Ove+g173Vu/Ye/S9rq3fsNe99Zv2Ove+g173Vu/Ya976/dpL9ywAXvpWSvcsAF76Vkr3LABe+lZK9ywAXvpWSvcsAF76VnL1bABIaqGDQhRNWxAiKphA0Isc+sSomrYgBBVwwaEqBo2IETVsAEhqoaNU4irYQNCycv+VQUBlMgaNqBEdqkfjmuRNWxAiaxhA0pkDRtQImvYgBJZwwaUyBo2oETWsHEqsTVsQImsYQNKZA0bUCJr2ICS8ymRNWxAiaxhA0pkDRtQImvYgBJZw8apxNawASWyhg0okTVsQImsYQNKzqdE1rABJbKGDSiRNWxAiaxhA0pkDRs7ykTWsLGdyBo2thNZw8Z2ImvY2E5kN9hvJ7KGje3E9zKOrmFjhxXJGja2E1nDxnZyQieyho3tRLY/jZqQWT4hwpll2OvmqGCvm6OCvW6OCvYuba+bo4K9bo4K9ro5Ktjr5qhgr5tZPu2FM8uwl561wpll2EvPWuHMMuylZ61wZhn20rNWOLMMe6rM8inElVmGkG6OCva6OSrY6+aoYO/S9ro5Ktjr5qhgr5ujgr1ujgr2ujmq0144swx76VkrnFmGvfSsFc4sw1561gpnlmEvPWuFM8uwl561XJllCFFlliFElVmGEFVmGUIsc+sSososQ4gqswwhqswyhKgyyxCiyiyfQlyZZQglL/tXoU4okWWWoUR2TBLHtcgyy1AiyyxDiSyzDCWyzDKUyDLLUCLLLEOJLLN8KrFllqFEllmGEllmGUpkmWUoOZ8SWWYZSmSZZSiRZZahRJZZhhJZZvlUYsssQ4ksswwlsswylMgyy1ByPiWyzDKUyDLLUCLLLEOJLLMMJbLM8o4ykWWWtxNZZnk7kWWWtxNZZnk78WUC6TLL24nvZRxdZnmHFckyy9uJLLO8nZzQiSyzvJ3Y9qf1n0/7rr08dNxe2MxrA1/Ff3/U3vmL/frPVBVfquK1yJpXWXOTNT9kzV3WvMmad1lz2QlaZUdolZ2hJjtDTXaGmuwMNdkZarIz1GRnqIXN0Iswwgkfz6T2OD3kzW8JK5pwlHBCDSdYOOHjvW0+Fo/P45bg4YQWTujhhE/XdCvjvx9tZd4SZjhhRRO8hBNqOOHTn9Zmj482uyf0cMKn3+l+PM669WZ3hFbCCeFfpfbxmvbrZ6mNW8IMJ6xoQi/hhBpOsHDCEU7wcEILJ/RwwhfXdO+3hBlO+HxNXzvfuCWMj9f0tXs/I9RwgoUTPl3T/cpo9LJuCR5OaOGEHk4Y4YSP1/R6XEjda7klrGjCLOGEGk6wcMIRTvBwQgsn9HDC+CLhdk3PGU74fE0/TrR0uyWsj9f09Tr0GaGGEyyc8PGcfvVv0eXhhBZO6OGEEU6Y4YTwNydPjnN/DTFXQsPGXMoNG3MpN2zMpdywMZdyw8Zcyg0bcyk3bMyl3LAxl3LDxlzKDRtzKTdszKXcsDGXcsPGXMoNG3MpN2zMpdywMZdyw8Zcyg0bcyk3bMyl3LAxF1nDxlxkDRtzKTdszKXcsDGXcsPGXMoNG3MpN2zMpdywMZdyw8Zcyg0bcyk3bMyl3LAxl3LDBuylZ61wwwbspWetcMPGXMoNG7CXnrXCDRtzKTdszEXWsAEhqoYNCFE1bECIqmEDQixz6xKiatiYi6xhYy6yho25yBo25iJr2JiLrGFjLrqGjbnoGjbmomvYmIuuYWMuuoaNuegaNuaia9iYi65hYy66ho256Bo25qJr2JiLrmFjLrqGjbnoGjbmomvYmIuuYWMuuoaNuegaNuaia9iYi65hYy66ho256Bo25qJr2JiLrmFjLrqGjbnoGjbmomvYmIuuYWMuuoaNuegaNubia9jYTmQNG9uJrGFjO5E1bGwnshvstxNZw8Z24nsZR9ewscOKZA0b24msYWM7OaETWcPGdiLbn1YXbdg4xTWvBz/FNW8HP8VFGzZgrnk7OMw1bweHuebt4DB3WXPN28FhrtmwAXPZCSrasAFz2Rkq2rABc9kZKtqwAXPZGSrasAFz2Rka3LABwggnxDZsgLCiCcENGyDUcIKFE2IbNkDwcEILJ/RwQmzDBggznLCiCcENGyDUcEJswwYIPZwQe0/kSQhu2AAh/KsU3LABwgwnrGhCcMMGCDWcYOGEI5zg4YQWTujhhNiGDRBmOCG2YQN/zopt2AChhhMsnBDbsAGChxNaOKGHE0Y4IbZhA4QVTQhu2AChhhMsnHCEEzyc0MIJPZwQ27ABwgwnxDZs4BBEbMMGCDWcYOGE2IYNEDyc0MIJPZwwwgkznBD+5iS4YcNKi2/YAES3YWPby976ve1lb/3e9rK3fm97l7aXvfV728ve+r3tZW/93vayt35ve9mGDdjrNmxse+lZq9uwse2lZ61uw8a2l561ug0b21561uo2bGx7poYNCFE1bGwh2Vu/t73srd/bXvbW723v0vayt35ve9lbv7e97K3f21721u9tL3vrN+x1Gza2vfSs1W3Y2PbSs1a3YWPbS89a3YaNbS89a3UbNra99KylatjYQkwNG1uIqWFjCzE1bGwhlrl1CTE1bGwhpoaNLcTUsLGFmBo2thBTwwaEqBo2tlDysn9RQbCVuBo2thLXpX77uBZXw8ZW4mrY2EpcDRtbiathYytxNWxsJa6Gja3E1bABJbKGja3E1bCxlbgaNrYSV8PGVnI+Ja6Gja3E1bCxlbgaNrYSV8PGVuJq2IASWcPGVuJq2NhKXA0bW4mrYWMrOZ8SV8PGVuJq2NhKXA0bW4mrYWMrcTVs/IoycTVs/HLiatj45cTVsPHLiath45cT1w32v5y4GjZ+OfG9jGNr2PgVVuRq2PjlxNWw8cvJCZ24GjZ+OZHtT9USMssnRDizDHvdHBXsdXNUsNfNUcHepe11c1Sw181RwV43RwV73RwV7HUzy6e9cGYZ9tKzVjizDHvpWSucWYa99KwVzizDXnrWCmeWYU+VWT6FuDLLENLNUcFeN0cFe90cFexd2l43RwV73RwV7HVzVLDXzVHBXjdHddoLZ5ZhLz1rhTPLsJeetcKZZdhLz1rhzDLspWetcGYZ9tKzliuzDCGqzDKEqDLLEKLKLEOIZW5dQlSZZQhRZZYhRJVZhhBVZhlCVJnlU4grswyh5GX/KtQJJbLMMpTIjkniuBZZZhlKZJllKJFllqFEllmGEllmGUpkmWUokWWWTyW2zDKUyDLLUCLLLEOJLLMMJedTIsssQ4ksswwlsswylMgyy1AiyyyfSmyZZSiRZZahRJZZhhJZZhlKzqdEllmGEllmGUpkmWUokWWWoUSWWd5RJrLM8nYiyyxvJ7LM8nYiyyxvJ75MIF1meTvxvYyjyyzvsCJZZnk7kWWWt5MTOpFllrcT2f5k/iSz3Hw8nmt9/BnyxUPsp88k81lkPk/i339RqLIJGZvQwSbkbEKNTaizCbHt05Vto65sO7Wx7dTGtlMb205tbDu1se3UxrZTW+BOfTFGAuPz/fSLJ2IhtMiEjsImVNmEjE3oYBNyNqHGJtTZhAabENtOfbDt1M62UzvbTu1sO7Wz7dTOtlM7207tbDu1B+7UF2MmMFY8o5UERk1gWALjSGB4AqMlMHoCI2Gd989/dl8FCUCxFMrn3/cf/CGvr4z/l1FSKCnf/eFfoPz56DwoLYXSUygjhTJTKCuDMr+xXv58wBeUmkKxFMqRQvEUSkuh9BTKSKHMFMrKoKwvrP0XB1ZBqSkUS6EcKRRPobQUSk+hjBTKTKF8Ye2/OIq8j2mVHEzNwXjGP2FqaTmYnoMZKZgvnAj8EabmYCwHc+RgEtZNvz/DO67HxnjxbtfL40ix24sTxfPaK1bx//ePl8BvvDHu94d9FcSXqvj9ZiFhXmXNTdb8kDV3WfMma95lzWUnaJUdoVV2hprsDDXZGWqyM9RkZ6jJzlCTnaEWNkMvwggnfDyT2uNPt978lrCiCUcJJ9RwgoUTPt7b5mPx+DxuCR5OaOGEHk74dE238ngh1cq8JcxwwoomeAkn1HDCpz+tzR4fbXZP6OGET7/T/Xgcu+jN7githBPCv0rt4zV9vWRubdwSZjhhRRN6CSfUcIKFE45wgocTWjihhxO+uKZ7vyXMcMLna/ra+cYtYXy8pq/d+xmhhhMsnPDpmu7XAdle1i3BwwktnNDDCSOc8PGaXu1BqOWWsKIJs4QTajjBwglHOMHDCS2c0MMJ44uE2zU9Zzjh8zX9OErX7ZawPl7T1+vQZ4QaTrBwwsdz+tW/RZeHE1o4oYcTRjhhhhPC35w8Obf6NcTx5LTav7wDszw2v+q13kFq8s3SX7zU6Hh21knG3qTtD2l7l7Zv0vZd2n5I209p+6Vsb9Kz1qRnrUnPWpOetSY9a0161pr0rDXpWWvSs9ZYZu1D6GAZn5dQ8kT84i1kx7NTbzL2h7S9S9s3afsubT+k7ae0/VK29yJtLz1rXXrWuvSsdelZ69Kz1qVnrUvPWpeetS49axvLrL2EWMbnJcQyES8hliF3CbHMrUuIZRRdQizT5RJiGRiXEMsMuIRYtvWHUGfbqXvysn91//PxLFHyd5XIirmPZ1mJv/pVGsandPApZZdNv7gN+3iWlfi7SpNPadEpzcKnVPmU0velP99BfTxLlPxdJedTanxKnU9p8ClNPqVFp7QKn1LlU8revV/cVX48yw79XSXnU2p8Sp1PafApTT6lRaf0rErg7zpl798vSgq2kxE6HYROne4l07OuhL/rxPcyrpbF55Sd9/uR00Ho5IROjdCJbH/yQ7Rh4xTXvB78FNe8HfwUF23YgLnm7eAw17wdHOaat4PD3GXNNW8Hh7lmwwbMZSeoaMMGzGVnqGjDBsxlZ6howwbMZWeoaMMGzGVnaHDDBggjnBDbsAHCiiYEN2yAUMMJFk6IbdgAwcMJLZzQwwmxDRsgzHDCiiYEN2yAUMMJsQ0bIPRwQuw9kSchuGEDhPCvUnDDBggznLCiCcENGyDUcIKFE45wgocTWjihhxNiGzZAmOGE2IYN/DkrtmEDhBpOsHBCbMMGCB5OaOGEHk4Y4YTYhg0QVjQhuGEDhBpOsHDCEU7wcEILJ/RwQmzDBggznBDbsIFDELENGyDUcIKFE2IbNkDwcEILJ/RwwggnzHBC+JuT6IaNZgkNGydEuGED9rq3fsNe99Zv2Ove+g17l7bXvfUb9rq3fsNe99Zv2Ove+g173YaN0164YQP20rNWuGED9tKzVrhhA/bSs1a4YQP20rNWuGED9lQNG6cQV8MGhHRv/Ya97q3fsNe99Rv2Lm2ve+s37HVv/Ya97q3fsNe99Rv2urd+n/bCDRuwl561wg0bsJeetcING7CXnrXCDRuwl561wg0bsJeetVwNGxCiatiAEFXDBoSoGjYgxDK3LiGqhg0IUTVsQIiqYQNCVA0bEKJq2DiFuBo2IJS87F9VEECJrGEDSmSX+uG4FlnDBpTIGjagRNawASWyhg0okTVsQImsYQNKZA0bpxJbwwaUyBo2oETWsAElsoYNKDmfElnDBpTIGjagRNawASWyhg0okTVsnEpsDRtQImvYgBJZwwaUyBo2oOR8SmQNG1Aia9iAElnDBpTIGjagRNawsaNMZA0b24msYWM7kTVsbCeyho3tRHaD/XYia9jYTnwv4+gaNnZYkaxhYzuRNWxsJyd0ImvY2E5s+9PKyCwv6czyks4sL+nM8pLOLC/pzPKSziwv6czyks4sL+nM8pLOLC/pzPKSziwv6czyks4sL+nM8pLOLC/pzPKSziwv6czyYsssL7bM8pLOLC/pzPKSziwv6czyks4sL+nM8pLOLC/pzPKSziwv6czyks4sL+nM8pLOLC/pzPKSziwv6czyks4sL+nM8pLOLC+2zPJiyywvtszyYsssL7bM8mLLLC+2zPJiyywvtszyYsssL7bM8uLLLC++zPLiyywvvszy4sssL77M8uLLLC++zPLiyywvvszy4sssL77M8uLLLC++zPLiyywvvszy4sssL77M8uLLLC++zPLiyywvvszy4sssL77M8uLLLC++zPLiyywvvszy4sssL77M8iLMLC/CzPIizCwvwszyIswsL8LM8iLMLC/CzPIizCwvwszyIswsL8LM8uLLLPfxn0/7rr08dNxe2MxrA1/Ff3/U3viL/Sk+VcWXqngtsuZV1txkzQ9Zc5c1b7LmXdZcdoJW2RFaZWeoyc5Qk52hJjtDTXaGmuwMNdkZamEz9CKMcMLHM6k9Tg9581vCiiYcJZxQwwkWTvh4b5uPxePzuCV4OKGFE3o44dM13cr470dbmbeEGU5Y0QQv4YQaTvj0p/X8rzwIdk/o4YRPv9P9eJx1683uCK2EE8K/Su3jNe3Xz1Ibt4QZTljRhF7CCTWcYOGEI5zg4YQWTujhhC+u6d5vCTOc8Pmavna+cUsYH6/pa/d+RqjhBAsnfLqm+5XR6GXdEjyc0MIJPZwwwgkfr+n1uJC613JLWNGEWcIJNZxg4YQjnODhhBZO6OGE8UXC7ZqeM5zw+Zp+nGjpdktYH6/p63XoM0INJ1g44eM5/erfosvDCS2c0MMJI5wwwwnhb06eHOf+GmKMhIaNMZQbNsZQbtgYQ7lhYwzlho0xlBs2xlBu2BhDuWFjDOWGjTGUGzbGUG7YGEO5YWMM5YaNMZQbNsZQbtgYQ7lhYwzlho0xlBs2xlBu2BhDuWFjDLKGjTHIGjbGUG7YGEO5YWMM5YaNMZQbNsZQbtgYQ7lhYwzlho0xlBs2xlBu2BhDuWFjDOWGDdhLz1rhhg3YS89a4YaNMZQbNmAvPWuFGzbGUG7YGIOsYQNCVA0bEKJq2IAQVcMGhFjm1iVE1bAxBlnDxhhkDRtjkDVsjEHWsDEGWcPGGHQNG2PQNWyMQdewMQZdw8YYdA0bY9A1bIxB17AxBl3Dxhh0DRtj0DVsjEHXsDEGXcPGGHQNG2PQNWyMQdewMQZdw8YYdA0bY9A1bIxB17AxBl3Dxhh0DRtj0DVsjEHXsDEGXcPGGHQNG2PQNWyMQdewMQZdw8YYdA0bY9A1bIzB17CxncgaNrYTWcPGdiJr2NhOZDfYbyeyho3txPcyjq5hY4cVyRo2thNZw8Z2ckInsoaN7US2P00Xbdg4xTWvBz/FNW8HP8VFGzZgrnk7OMw1bweHuebt4DB3WXPN28FhrtmwAXPZCSrasAFz2Rkq2rABc9kZKtqwAXPZGSrasAFz2Rka3LABwggnxDZsgLCiCcENGyDUcIKFE2IbNkDwcEILJ/RwQmzDBggznLCiCcENGyDUcEJswwYIPZwQe0/kSQhu2AAh/KsU3LABwgwnrGhCcMMGCDWcYOGEI5zg4YQWTujhhNiGDRBmOCG2YQN/zopt2AChhhMsnBDbsAGChxNaOKGHE0Y4IbZhA4QVTQhu2AChhhMsnHCEEzyc0MIJPZwQ27ABwgwnxDZs4BBEbMMGCDWcYOGE2IYNEDyc0MIJPZwwwgkznBD+5iS6YWMdCQ0bJ0S4YQP2urd+w1731m/Y6976DXuXtte99Rv2urd+w1731m/Y6976DXvdho3TXrhhA/bSs1a4YQP20rNWuGED9tKzVrhhA/bSs1a4YQP2VA0bpxBXwwaEdG/9hr3urd+w1731G/Yuba976zfsdW/9hr3urd+w1731G/a6t36f9sING7CXnrXCDRuwl561wg0bsJeetcING7CXnrXCDRuwl561XA0bEKJq2IAQVcMGhKgaNiDEMrcuIaqGDQhRNWxAiKphA0JUDRsQomrYOIW4GjYglLzsX1UQQImsYQNKZJf64bgWWcMGlMgaNqBE1rABJbKGDSiRNWxAiaxhA0pkDRunElvDBpTIGjagRNawASWyhg0oOZ8SWcMGlMgaNqBE1rABJbKGDSiRNWycSmwNG1Aia9iAElnDBpTIGjag5HxKZA0bUCJr2IASWcMGlMgaNqBE1rCxo0xkDRvbiaxhYzuRNWxsJ7KGje1EdoP9diJr2NhOfC/j6Bo2dliRrGFjO5E1bGwnJ3Qia9jYTlz701FKfGYZEN3M8raXzVFte9kc1baXzVFte5e2l81RbXvZHNW2l81RbXvZHNW2l80sw143s7ztpWetbmZ520vPWt3M8raXnrW6meVtLz1rdTPL254pswwhqszyFpLNUW172RzVtpfNUW17l7aXzVFte9kc1baXzVFte9kc1baXzVHBXjezvO2lZ61uZnnbS89a3czytpeetbqZ5W0vPWt1M8vbXnrWUmWWtxBTZnkLMWWWtxBTZnkLscytS4gps7yFmDLLW4gps7yFmDLLW4gpswwhqszyFkpe9i9CnVuJK7O8lbiOSe7jWlyZ5a3ElVneSlyZ5a3ElVneSlyZ5a3ElVneSlyZZSiRZZa3EldmeStxZZa3EldmeSs5nxJXZnkrcWWWtxJXZnkrcWWWtxJXZhlKZJnlrcSVWd5KXJnlrcSVWd5KzqfElVneSlyZ5a3ElVneSlyZ5a3ElVn+FWXiyiz/cuLKLP9y4sos/3Liyiz/cuLLBLJlln858b2MY8ss/worcmWWfzlxZZZ/OTmhE1dm+ZcT1/7Un8YNRnkYjfa7r7yW9vu58eZz883n1nvP3Z9B/8Fz9c3n7M3nbpf1LOW/z83y5Dl/87n25nP9zefGm8/NN59b7z13f+hyXm9I55j3z9U3n7M3nzvefM7ffK69+Vx/87n7n5c5Hs+tfv/cfPO59d5z9weHfvBcffM5e/O5483nbn9eVn2so1Xv19H92ZMfPNfffG68+dx887n13nP3xxd+8Fx98Zzdf/+6vfnc8eZz9z8vx2O9L79f7/dHFn7wXH/zufHmc/PN59Z7z43y5nP3Py/9+n2wuP+vB//n33z4olgK5UiheAqlpVB6CmWkUGYKZWVQ7k8bfJ2SsvZnytqfKWt/pqz9mbL2Z8ranylrf6as/Zmy9lfK2l8pa3+lrP2VsvZXytpfKWt/paz9lbL2V8raXylr/8lfOr+PqTkYy8EcORjPwbQcTM/BjBzMzMHk7AI1ZxeoObtAzdkFas4uUHN2gZqzC9ScXaDm7AI1ZxeoObuA5ewClrMLWM4uYDm7gOXsApazC1jOLmA5u4Dl7AKWswscObvAkbMLHDm7wJGzCxw5u8CRswscObvAkbMLHDm7wJGzC3jOLuA5u4Dn7AKeswt4zi7gObuA5+wCnrMLeM4u4Dm7QMvZBVrOLtBydoGWswu0nF2g5ewCLWcXaDm7QMvZBVrOLtBzdoGeswv0nF2g5+wCPWcX6Dm7QM/ZBXrOLtBzdoGeswuMnF0g53xgzTkgWHNOCNacI4I154xgzTkkWHNOCdacY4I155xgzTkoWHNOCtaco4I156xgzTksWHNOC9ac44I157xgzTkwWHNODNacI4M158xgzTk0WHNODdacY4M159xgzTk4WHNODtaco4M15+yg5ZwdtJyzg5ZzdtByzg5a8RxMy8H0HMzIwcwcTM4ukHN20HLODlrO2UHLOTtoOWcHLefsoOWcHbScs4OWc3bQcs4OWs7ZQcs5O2g5Zwct5+yg5ZwdtJyzg5ZzdtByzg5aztlByzk7aDlnBy3n7KDlnB20nLODlnN20HLODlrO2UHLOTtoOWcHLefsoOWcHbScs4OWc3bQcs4OWs7ZQfvCabtWHlfJtPqPW1X9H1cEfuGw3Q8oXzid1uyiHO0JxVIoRwrFUygthfJvB83vJ8e7T37h1MAPfq6/cGjgJ5SWQukplJRd7QsHBpo/rqRuzZ5QVgblC8cFfkKpKRRLoXxh7R/zohxPKJ5CaSmUnkIZKZSZQlkZk/MLhwR+Qkn57Wyl/Ha2Un47+8IBgZ9QUn47+8LxgJ9QRgplplAy1v5RSgqlplAshXKkUDyF0lIoPYUyUigzhZKy9mvK2q8pa7+mrP2asvZrytqvKWu/pqz9mrL2a8rarylr31LWvqWsfUtZ+5ay9i1l7VvK2reUtW/xa7//576Crfmj/KK2/r+KU/8vY7bHG6U5658/Wuu85M3+8WrALp9J5rPIfO5/tfmbQpVNyNiEDjYhZxNqbEKdTYhtn65sG3Vl26mNbac2tp3a2HZqY9upjW2nNrad2gJ36osxEhif76er1P9+dh3l8y/sIhM6CptQZRMyNqGDTcjZhBqbUGcTGmxCbDv1wbZTO9tO7Ww7tbPt1M62UzvbTu1sO7Wz7dQeuFNfjJnAWPGMVhIYNYFhCYwjgeEJjJbA6AmMhHXeP//ZraUcjw+XarcUS6F8/n2v5r933377AqGvjP+XUVIoKd/94V+g9HVRZr+ltBRKT6GMFMpMoawMyvzGeun1N2XcUmoKxVIoRwrFUygthdJTKCOFMlMoK4OyvrD2a/XHh6vf/qa0agrFUihHCsVTKC2F0lMoI4UyUyhfWPt12EWZ847ypNX6+5iag/GMf8LU0nIwPQczUjBfOBH4I0zNwVgO5sjBJKybeX+Gd1yPjfHi3a6XR17Xrf35o/PaK1b5ffj4fAn8xhvjeX/YV0F8qYrfbxYS5lXW3GTND1lzlzVvsuZd1lx2glbZEVplZ6jJzlCTnaEmO0NNdoaa7Aw12RlqYTP0IoxwwsczqT3+dOvNbwkrmnCUcEINJ1g44eO9bT4Wj8/jluDhhBZO6OGET9d0K48XUq3MW8IMJ6xogpdwQg0nfPrT2uzx0Wb3hB5O+PQ73Y/HsYve7I7QSjgh/KvUPl7T10vm1sYtYYYTVjShl3BCDSdYOOEIJ3g4oYUTejjhi2u691vCDCd8vqavnW/cEsbHa/ravZ8RajjBwgmfrul+HZDtZd0SPJzQwgk9nDDCCR+v6dUehFpuCSuaMEs4oYYTLJxwhBM8nNDCCT2cML5IuF3Tc4YTPl/Tj6N03W4J6+M1fb0OfUao4QQLJ3w8p1/9W3R5OKGFE3o4YYQTZjgh/M3Jk3OrX0PUJ6fVaj+ug7u9vfiTS/Xy2Pyq13oHeXIo8t9RfF6U8eqvQN+71Kg+O+skY2/S9oe0vUvbN2n7Lm0/pO2ntP1StjfpWWvSs9akZ61Jz1qTnrUmPWtNetaa9Kw16VlrLLP2IXSwjM9LKHkifvEWsvrs1JuM/SFt79L2Tdq+S9sPafspbb+U7b1I20vPWpeetS49a1161rr0rHXpWevSs9alZ61Lz9rGMmsvIZbxeQmxTMRLiGXIXUIsc+sSYhlFlxDLdLmEWAbGJcQyAy4hlm39IdTZduqevOxf3f9cnyVK/q5S8g/2q8vF6rOsxF/9Kg3jUzr4lHq20p9vw67PshJ/V2nyKS06pVn4lCqfUvq+9Oc7qOuzRMnfVXI+pcan1PmUBp/S5FNadEqr8ClVPqXs3fvFXeX1WXbo7yo5n1LjU+p8SoNPafIpLTqlZ1UCf9cpe/9+UVKwnYzQ6SB06nQvmZ51JfxdJ76XcbUsPqfsvN+PnA5CJyd0aoROZPuTNdGGjVNc83rwU1zzdvBTXLRhA+aat4PDXPN2cJhr3g4Oc5c117wdHOaaDRswl52gog0bMJedoaINGzCXnaGiDRswl52hog0bMJedocENGyCMcEJswwYIK5oQ3LABQg0nWDghtmEDBA8ntHBCDyfENmyAMMMJK5oQ3LABQg0nxDZsgNDDCbH3RJ6E4IYNEMK/SsENGyDMcMKKJgQ3bIBQwwkWTjjCCR5OaOGEHk6IbdgAYYYTYhs28Oes2IYNEGo4wcIJsQ0bIHg4oYUTejhhhBNiGzZAWNGE4IYNEGo4wcIJRzjBwwktnNDDCbENGyDMcEJswwYOQcQ2bIBQwwkWToht2ADBwwktnNDDCSOcMMMJ4W9Oohs2Dk9o2Dghwg0bsNe99Rv2urd+w1731m/Yu7S97q3fsNe99Rv2urd+w1731m/Y6zZsnPbCDRuwl561wg0bsJeetcING7CXnrXCDRuwl561wg0bsKdq2DiFuBo2IKR76zfsdW/9hr3urd+wd2l73Vu/Ya976zfsdW/9hr3urd+w1731+7QXbtiAvfSsFW7YgL30rBVu2IC99KwVbtiAvfSsFW7YgL30rOVq2IAQVcMGhKgaNiBE1bABIZa5dQlRNWxAiKphA0JUDRsQomrYgBBVw8YpxNWwAaHkZf+qggBKZA0bUCK71A/HtcgaNqBE1rABJbKGDSiRNWxAiaxhA0pkDRtQImvYOJXYGjagRNawASWyhg0okTVsQMn5lMgaNqBE1rABJbKGDSiRNWxAiaxh41Ria9iAElnDBpTIGjagRNawASXnUyJr2IASWcMGlMgaNqBE1rABJbKGjR1lImvY2E5kDRvbiaxhYzuRNWxsJ7Ib7LcTWcPGduJ7GUfXsLHDimQNG9uJrGFjOzmhE1nDxnYi25+8JmSWT4hwZhn2ujkq2OvmqGCvm6OCvUvb6+aoYK+bo4K9bo4K9ro5KtjrZpZPe+HMMuylZ61wZhn20rNWOLMMe+lZK5xZhr30rBXOLMOeKrN8CnFlliGkm6OCvW6OCva6OSrYu7S9bo4K9ro5Ktjr5qhgr5ujgr1ujuq0F84sw1561gpnlmEvPWuFM8uwl561wpll2EvPWuHMMuylZy1XZhlCVJllCFFlliFElVmGEMvcuoSoMssQososQ4gqswwhqswyhKgyy6cQV2YZQsnL/lWoE0pkmWUokR2TxHEtsswylMgyy1AiyyxDiSyzDCWyzDKUyDLLUCLLLJ9KbJllKJFllqFEllmGEllmGUrOp0SWWYYSWWYZSmSZZSiRZZahRJZZPpXYMstQIsssQ4ksswwlsswylJxPiSyzDCWyzDKUyDLLUCLLLEOJLLO8o0xkmeXtRJZZ3k5kmeXtRJZZ3k58mUC6zPJ24nsZR5dZ3mFFsszydiLLLG8nJ3QiyyxvJ7b9af3n075rLw8dtxc289rAV/HfH7V3/mK//jNVxZeqeC2y5lXW3GTND1lzlzVvsuZd1lx2glbZEVplZ6jJzlCTnaEmO0NNdoaa7Aw12RlqYTP0IoxwwsczqT1OD3nzW8KKJhwlnFDDCRZO+Hhvm4/F4/O4JXg4oYUTejjh0zXdyvjvR1uZt4QZTljRBC/hhBpO+PSntdnjo83uCT2c8Ol3uh+Ps2692R2hlXBC+Fepfbym/fpZauOWMMMJK5rQSzihhhMsnHCEEzyc0MIJPZzwxTXd+y1hhhM+X9PXzjduCePjNX3t3s8INZxg4YRP13S/Mhq9rFuChxNaOKGHE0Y44eM1vR4XUvdabgkrmjBLOKGGEyyccIQTPJzQwgk9nDC+SLhd03OGEz5f048TLd1uCevjNX29Dn1GqOEECyd8PKdf/Vt0eTihhRN6OGGEE2Y4IfzNyZPj3F9DtJXQsNGWcsNGW8oNG20pN2y0pdyw0ZZyw0Zbyg0bbSk3bLSl3LDRlnLDRlvKDRttKTdstKXcsNGWcsNGW8oNG20pN2y0pdyw0ZZyw0Zbyg0bbSk3bLRF1rDRFlnDRlvKDRttKTdstKXcsNGWcsNGW8oNG20pN2y0pdyw0ZZyw0Zbyg0bbSk3bLSl3LABe+lZK9ywAXvpWSvcsNGWcsMG7KVnrXDDRlvKDRttkTVsQIiqYQNCVA0bEKJq2IAQy9y6hKgaNtoia9hoi6xhoy2yho22yBo22iJr2GiLrmGjLbqGjbboGjbaomvYaIuuYaMtuoaNtugaNtqia9hoi65hoy26ho226Bo22qJr2GiLrmGjLbqGjbboGjbaomvYaIuuYaMtuoaNtugaNtqia9hoi65hoy26ho226Bo22qJr2GiLrmGjLbqGjbboGjbaomvYaIuuYaMtuoaNtvgaNrYTWcPGdiJr2NhOZA0b24nsBvvtRNawsZ34XsbRNWzssCJZw8Z2ImvY2E5O6ETWsLGdyPan3kUbNk5xzevBT3HN28FPcdGGDZhr3g4Oc83bwWGueTs4zF3WXPN2cJhrNmzAXHaCijZswFx2hoo2bMBcdoaKNmzAXHaGijZswFx2hgY3bIAwwgmxDRsgrGhCcMMGCDWcYOGE2IYNEDyc0MIJPZwQ27ABwgwnrGhCcMMGCDWcENuwAUIPJ8TeE3kSghs2QAj/KgU3bIAwwwkrmhDcsAFCDSdYOOEIJ3g4oYUTejghtmEDhBlOiG3YwJ+zYhs2QKjhBAsnxDZsgODhhBZO6OGEEU6IbdgAYUUTghs2QKjhBAsnHOEEDye0cEIPJ8Q2bIAwwwmxDRs4BBHbsAFCDSdYOCG2YQMEDye0cEIPJ4xwwgwnhL85iW7YGC2hYeOECDdswF731m/Y6976DXvdW79h79L2urd+w1731m/Y6976DXvdW79hr9uwcdoLN2zAXnrWCjdswF561go3bMBeetYKN2zAXnrWCjdswJ6qYeMU4mrYgJDurd+w1731G/a6t37D3qXtdW/9hr3urd+w1731G/a6t37DXvfW79NeuGED9tKzVrhhA/bSs1a4YQP20rNWuGED9tKzVrhhA/bSs5arYQNCVA0bEKJq2IAQVcMGhFjm1iVE1bABIaqGDQhRNWxAiKphA0JUDRunEFfDBoSSl/2rCgIokTVsQInsUj8c1yJr2IASWcMGlMgaNqBE1rABJbKGDSiRNWxAiaxh41Ria9iAElnDBpTIGjagRNawASXnUyJr2IASWcMGlMgaNqBE1rABJbKGjVOJrWEDSmQNG1Aia9iAElnDBpScT4msYQNKZA0bUCJr2IASWcMGlMgaNnaUiaxhYzuRNWxsJ7KGje1E1rCxnchusN9OZA0b24nvZRxdw8YOK5I1bGwnsoaN7eSETmQNG9uJbH+alpBZPiHCmWXY6+aoYK+bo4K9bo4K9i5tr5ujgr1ujgr2ujkq2OvmqGCvm1k+7YUzy7CXnrXCmWXYS89a4cwy7KVnrXBmGfbSs1Y4swx7qszyKcSVWYaQbo4K9ro5Ktjr5qhg79L2ujkq2OvmqGCvm6OCvW6OCva6OarTXjizDHvpWSucWYa99KwVzizDXnrWCmeWYS89a4Uzy7CXnrVcmWUIUWWWIUSVWYYQVWYZQixz6xKiyixDiCqzDCGqzDKEqDLLEKLKLJ9CXJllCCUv+1ehTiiRZZahRHZMEse1yDLLUCLLLEOJLLMMJbLMMpTIMstQIsssQ4kss3wqsWWWoUSWWYYSWWYZSmSZZSg5nxJZZhlKZJllKJFllqFEllmGEllm+VRiyyxDiSyzDCWyzDKUyDLLUHI+JbLMMpTIMstQIsssQ4ksswwlsszyjjKRZZa3E1lmeTuRZZa3E1lmeTvxZQLpMsvbie9lHF1meYcVyTLL24kss7ydnNCJLLO8ncj2p+VPMsvNx+O51sefIV88xH76TDKfRebzJP79F4Uqm5CxCR1sQs4m1NiEOpsQ2z5d2TbqyrZTG9tObWw7tbHt1Ma2UxvbTm1sO7UF7tQXYyQwPt9Pv3giFkKLTOgobEKVTcjYhA42IWcTamxCnU1osAmx7dQH207tbDu1s+3UzrZTO9tO7Ww7tbPt1M62U3vgTn0xZgJjxTNaSWDUBIYlMI4EhicwWgKjJzAS1nn//Gf3VZAAFEuhfP59/8Ef8vrK+H8ZJYWS8t0f/gXKn4/Og9JSKD2FMlIoM4WyMijzG+vlzwd8QakpFEuhHCkUT6G0FEpPoYwUykyhrAzK+sLaf3FgFZSaQrEUypFC8RRKS6H0FMpIocwUyhfW/oujyPuYVsnB1ByMZ/wTppaWg+k5mJGC+cKJwB9hag7GcjBHDiZh3fT7M7zjemyMF+92vTyOFLu9OFE8r71iFf9//3gJ/MYb435/2FdBfKmK328WEuZV1txkzQ9Zc5c1b7LmXdZcdoJW2RFaZWeoyc5Qk52hJjtDTXaGmuwMNdkZamEz9CKMcMLHM6k9/nTrzW8JK5pwlHBCDSdYOOHjvW0+Fo/P45bg4YQWTujhhE/XdCuPF1KtzFvCDCesaIKXcEINJ3z609rs8dFm94QeTvj0O92Px7GL3uyO0Eo4Ifyr1D5e09dL5tbGLWGGE1Y0oZdwQg0nWDjhCCd4OKGFE3o44YtruvdbwgwnfL6mr51v3BLGx2v62r2fEWo4wcIJn67pfh2Q7WXdEjyc0MIJPZwwwgkfr+nVHoRabgkrmjBLOKGGEyyccIQTPJzQwgk9nDC+SLhd03OGEz5f04+jdN1uCevjNX29Dn1GqOEECyd8PKdf/Vt0eTihhRN6OGGEE2Y4IfzNyZNzq99CjPLktNq/vAOzPDa/6rXeQWryzdLfu9Ro21dpe5O2P6TtXdq+Sdt3afshbT+l7ZeyvUnPWpOetSY9a0161pr0rDXpWWvSs9akZ61Jz1pjmbUPoYNlfF5CyRPxe7eQbXuTtj+k7V3avknbd2n7IW0/pe2Xsr0XaXvpWevSs9alZ61Lz1qXnrUuPWtdeta69Kx16VnbWGbtJcQyPi8hlol4CbEMuUuIZW5dQiyj6BJimS6XEMvAuIRYZsAlxLKtP4Q6207dk5f9i/uft1LjU+Iq5t7HtSrdV2kYn9LBp5RdNv3n27C30uBTmnxKi05pFj6lyqeUvi/98Q7qrXTwKTmfUuNT6nxKg09p8iktOqVV+JQqn1L27v3nu8q30sGn5HxKjU+p8ykNPqXJp7TolJ5VCfxdp+z9+88lBb+cjNDpIHTqdC+ZnnUl/F0nvpdxtSw+p+y834+cDkInJ3RqhE5k+1M9NBs2IC55PTjEJW8Hh7hmw8Y2l7wdfJtL3g6+zSVvB9/mLmsueTv4Npds2NjmshNUs2Fjm8vOUM2GjW0uO0M1Gza2uewM1WzY2OayMzS2YWMTRjghtGFjE1Y0IbZhYxNqOMHCCaENG5vg4YQWTujhhNCGjU2Y4YQVTYht2NiEGk4IbdjYhB5OCL0nEoTYho1NCP8qxTZsbMIMJ6xoQmzDxibUcIKFE45wgocTWjihhxNCGzY2YYYTQhs29p+zQhs2NqGGEyycENqwsQkeTmjhhB5OGOGE0IaNTVjRhNiGjU2o4QQLJxzhBA8ntHBCDyeENmxswgwnhDZs7EMQoQ0bm1DDCRZOCG3Y2AQPJ7RwQg8njHDCDCeEvzmJbtgwS2jYOCHCDRuw1731G/a6t37DXvfWb9i7tL3urd+w1731G/a6t37DXvfWb9jrNmyc9sING7CXnrXCDRuwl561wg0bsJeetcING7CXnrXCDRuwp2rYOIW4GjYgpHvrN+x1b/2Gve6t37B3aXvdW79hr3vrN+x1b/2Gve6t37DXvfX7tBdu2IC99KwVbtiAvfSsFW7YgL30rBVu2IC99KwVbtiAvfSs5WrYgBBVwwaEqBo2IETVsAEhlrl1CVE1bECIqmEDQlQNGxCiatiAEFXDxinE1bABoeRl/6qCAEpkDRtQIrvUD8e1yBo2oETWsAElsoYNKJE1bECJrGEDSmQNG1Aia9g4ldgaNqBE1rABJbKGDSiRNWxAyfmUyBo2oETWsAElsoYNKJE1bECJrGHjVGJr2IASWcMGlMgaNqBE1rABJedTImvYgBJZwwaUyBo2oETWsAElsoaNHWUia9jYTmQNG9uJrGFjO5E1bGwnshvstxNZw8Z24nsZR9ewscOKZA0b24msYWM7OaETWcPGdmLbn1ZGZnlJZ5aXdGZ5SWeWl3RmeUlnlpd0ZnlJZ5aXdGZ5SWeWl3RmeUlnlpd0ZnlJZ5aXdGZ5SWeWl3RmeUlnlpd0ZnlJZ5YXW2Z5sWWWl3RmeUlnlpd0ZnlJZ5aXdGZ5SWeWl3RmeUlnlpd0ZnlJZ5aXdGZ5SWeWl3RmeUlnlpd0ZnlJZ5aXdGZ5SWeWl3RmebFllhdbZnmxZZYXW2Z5sWWWF1tmebFllhdbZnmxZZYXW2Z5sWWWF19mefFllhdfZnnxZZYXX2Z58WWWF19mefFllhdfZnnxZZYXX2Z58WWWF19mefFllhdfZnnxZZYXX2Z58WWWF19mefFllhdfZnnxZZYXX2Z58WWWF19mefFllhdfZnnxZZYXX2Z58WWWF2FmeRFmlhdhZnkRZpYXYWZ5EWaWF2FmeRFmlhdhZnkRZpYXYWZ5EWaWF19m+Rj/+bTv2stDx+2Fzbw28FX890ftjb/Yn+JTVXypitcia15lzU3W/JA1d1nzJmveZc1lJ2iVHaFVdoaa7Aw12RlqsjPUZGeoyc5Qk52hFjZDL8IIJ3w8k9rj9JA3vyWsaMJRwgk1nGDhhI/3tvlYPD6PW4KHE1o4oYcTPl3TrYz/frSVeUuY4YQVTfASTqjhhE9/Wps9PtrsntDDCZ9+p/vxOOvWm90RWgknhH+V2sdr2q+fpTZuCTOcsKIJvYQTajjBwglHOMHDCS2c0MMJX1zTvd8SZjjh8zV97XzjljA+XtPX7v2MUMMJFk74dE33K6PRy7oleDihhRN6OGGEEz5e0+txIXWv5ZawogmzhBNqOMHCCUc4wcMJLZzQwwnji4TbNT1nOOHzNf040dLtlrA+XtPX69BnhBpOsHDCx3P61b9Fl4cTWjihhxNGOGGGE8LfnDw5zv01hI+Ehg0fyg0bPpQbNnwoN2z4UG7Y8KHcsOFDuWHDh3LDhg/lhg0fyg0bPpQbNnwoN2z4UG7Y8KHcsOFDuWHDh3LDhg/lhg0fyg0bPpQbNnwoN2z4IGvY8EHWsOFDuWHDh3LDhg/lhg0fyg0bPpQbNnwoN2z4UG7Y8KHcsOFDuWHDh3LDhg/lhg3YS89a4YYN2EvPWuGGDR/KDRuwl561wg0bPpQbNnyQNWxAiKphA0JUDRsQomrYgBDL3LqEqBo2fJA1bPgga9jwQdaw4YOsYcMHWcOGD7qGDR90DRs+6Bo2fNA1bPiga9jwQdew4YOuYcMHXcOGD7qGDR90DRs+6Bo2fNA1bPiga9jwQdew4YOuYcMHXcOGD7qGDR90DRs+6Bo2fNA1bPiga9jwQdew4YOuYcMHXcOGD7qGDR90DRs+6Bo2fNA1bPiga9jwQdew4YOvYWM7kTVsbCeyho3tRNawsZ3IbrDfTmQNG9uJ72UcXcPGDiuSNWxsJ7KGje3khE5kDRvbiWx/ai7asHGKa14Pfopr3g5+ios2bMBc83ZwmGveDg5zzdvBYe6y5pq3g8Ncs2ED5rITVLRhA+ayM1S0YQPmsjNUtGED5rIzVLRhA+ayMzS4YQOEEU6IbdgAYUUTghs2QKjhBAsnxDZsgODhhBZO6OGE2IYNEGY4YUUTghs2QKjhhNiGDRB6OCH2nsiTENywAUL4Vym4YQOEGU5Y0YTghg0QajjBwglHOMHDCS2c0MMJsQ0bIMxwQmzDBv6cFduwAUINJ1g4IbZhAwQPJ7RwQg8njHBCbMMGCCuaENywAUINJ1g44QgneDihhRN6OCG2YQOEGU6IbdjAIYjYhg0QajjBwgmxDRsgeDihhRN6OGGEE2Y4IfzNSXTDRj8SGjZOiHDDBux1b/2Gve6t37DXvfUb9i5tr3vrN+x1b/2Gve6t37DXvfUb9roNG6e9cMMG7KVnrXDDBuylZ61wwwbspWetcMMG7KVnrXDDBuypGjZOIa6GDQjp3voNe91bv2Gve+s37F3aXvfWb9jr3voNe91bv2Gve+s37HVv/T7thRs2YC89a4UbNmAvPWuFGzZgLz1rhRs2YC89a4UbNmAvPWu5GjYgRNWwASGqhg0IUTVsQIhlbl1CVA0bEKJq2IAQVcMGhKgaNiBE1bBxCnE1bEAoedm/qiCAElnDBpTILvXDcS2yhg0okTVsQImsYQNKZA0bUCJr2IASWcMGlMgaNk4ltoYNKJE1bECJrGEDSmQNG1ByPiWyhg0okTVsQImsYQNKZA0bUCJr2DiV2Bo2oETWsAElsoYNKJE1bEDJ+ZTIGjagRNawASWyhg0okTVsQImsYWNHmcgaNrYTWcPGdiJr2NhOZA0b24nsBvvtRNawsZ34XsbRNWzssCJZw8Z2ImvY2E5O6ETWsLGdyPanURIyyydEOLMMe90cFex1c1Sw181Rwd6l7XVzVLDXzVHBXjdHBXvdHBXsdTPLp71wZhn20rNWOLMMe+lZK5xZhr30rBXOLMNeetYKZ5ZhT5VZPoW4MssQ0s1RwV43RwV73RwV7F3aXjdHBXvdHBXsdXNUsNfNUcFeN0d12gtnlmEvPWuFM8uwl561wpll2EvPWuHMMuylZ61wZhn20rOWK7MMIarMMoSoMssQososQ4hlbl1CVJllCFFlliFElVmGEFVmGUJUmeVTiCuzDKHkZf8q1AklsswylMiOSeK4FllmGUpkmWUokWWWoUSWWYYSWWYZSmSZZSiRZZZPJbbMMpTIMstQIsssQ4ksswwl51MiyyxDiSyzDCWyzDKUyDLLUCLLLJ9KbJllKJFllqFEllmGEllmGUrOp0SWWYYSWWYZSmSZZSiRZZahRJZZ3lEmsszydiLLLG8nsszydiLLLG8nvkwgXWZ5O/G9jKPLLO+wIllmeTuRZZa3kxM6kWWWtxPV/tTL07jBKA+j0X73ldfSfj833nxuvvnceu+5+zPoP3iuvvmcvfnc7bKepfz3uVmePOdvPtfefK6/+dx487n55nPrvefuD13O6w3pHPP+ufrmc/bmc8ebz/mbz7U3n+tvPnf/8zLH47nV75+bbz633nvu/uDQD56rbz5nbz53vPnc7c/Lqo91tOr9Oro/e/KD5/qbz403n5tvPrfee+7++MIPnqsvnrP771+3N5873nzu/ufleKz35ffr/f7Iwg+e628+N958br753HrvuVHefO7+56Vfvw8W9//14P/8mw9fFEuhHCkUT6G0FEpPoYwUykyhrAzK/WmDr1NS1v5MWfszZe3PlLU/U9b+TFn7M2Xtz5S1P1PW/kpZ+ytl7a+Utb9S1v5KWfsrZe2vlLW/Utb+Sln7K2XtP/lL5/cxNQdjOZgjB+M5mJaD6TmYkYOZOZicXaDm7AI1ZxeoObtAzdkFas4uUHN2gZqzC9ScXaDm7AI1ZxewnF3AcnYBy9kFLGcXsJxdwHJ2AcvZBSxnF7CcXcBydoEjZxc4cnaBI2cXOHJ2gSNnFzhydoEjZxc4cnaBI2cXOHJ2Ac/ZBTxnF/CcXcBzdgHP2QU8ZxfwnF3Ac3YBz9kFPGcXaDm7QMvZBVrOLtBydoGWswu0nF2g5ewCLWcXaDm7QMvZBXrOLtBzdoGeswv0nF2g5+wCPWcX6Dm7QM/ZBXrOLtBzdoGRswvknA+sOQcEa84JwZpzRLDmnBGsOYcEa84pwZpzTLDmnBOsOQcFa85JwZpzVLDmnBWsOYcFa85pwZpzXLDmnBesOQcGa86JwZpzZLDmnBmsOYcGa86pwZpzbLDmnBusOQcHa87JwZpzdLDmnB20nLODlnN20HLODlrO2UErnoNpOZiegxk5mJmDydkFcs4OWs7ZQcs5O2g5Zwct5+yg5ZwdtJyzg5ZzdtByzg5aztlByzk7aDlnBy3n7KDlnB20nLODlnN20HLODlrO2UHLOTtoOWcHLefsoOWcHbScs4OWc3bQcs4OWs7ZQcs5O2g5Zwct5+yg5ZwdtJyzg5ZzdtByzg5aztlByzk7aF84bdfK4yqZVv9xq6r/44rALxy2+wHlC6fTml2Uoz2hWArlSKF4CqWlUP7toPn95Hj3yS+cGvjBz/UXDg38hNJSKD2FkrKrfeHAQPPHldSt2RPKyqB84bjATyg1hWIplC+s/WNelOMJxVMoLYXSUygjhTJTKCtjcn7hkMBPKCm/na2U385Wym9nXzgg8BNKym9nXzge8BPKSKHMFErG2j9KSaHUFIqlUI4UiqdQWgqlp1BGCmWmUFLWfk1Z+zVl7deUtV9T1n5NWfs1Ze3XlLVfU9Z+TVn7NWXtW8rat5S1bylr31LWvqWsfUtZ+5ay9i1+7ff/3FewNX+UX9TW/1dx6v9lzPZ4ozRn/fNHa52XvNk/Xg3Y5TPJfBaZz/2vNn9TqLIJGZvQwSbkbEKNTaizCbHt05Vto65sO7Wx7dTGtlMb205tbDu1se3UxrZTW+BOfTFGAuPz/XSV+t/PrqN8/oVdZEJHYROqbELGJnSwCTmbUGMT6mxCg02Ibac+2HZqZ9upnW2ndrad2tl2amfbqZ1tp3a2ndoDd+qLMRMYK57RSgKjJjAsgXEkMDyB0RIYPYGRsM775z+7tZTj8eFS7ZZiKZTPv+/V/Pfu229fIPSV8f8ySgol5bs//AuUvi7K7LeUlkLpKZSRQpkplJVBmd9YL73+poxbSk2hWArlSKF4CqWlUHoKZaRQZgplZVDWF9Z+rf74cPXb35RWTaFYCuVIoXgKpaVQegplpFBmCuULa78Ouyhz3lGetFp/H1NzMJ7xT5haWg6m52BGCuYLJwJ/hKk5GMvBHDmYhHUz78/wjuuxMV682/XyyOu6tT9/dF57xSq/Dx+fL4HfeGM87w/7KogvVfH7zULCvMqam6z5IWvusuZN1rzLmstO0Co7QqvsDDXZGWqyM9RkZ6jJzlCTnaEmO0MtbIZehBFO+Hgmtcefbr35LWFFE44STqjhBAsnfLy3zcfi8XncEjyc0MIJPZzw6Zpu5fFCqpV5S5jhhBVN8BJOqOGET39amz0+2uye0MMJn36n+/E4dtGb3RFaCSeEf5Xax2v6esnc2rglzHDCiib0Ek6o4QQLJxzhBA8ntHBCDyd8cU33fkuY4YTP1/S1841bwvh4TV+79zNCDSdYOOHTNd2vA7K9rFuChxNaOKGHE0Y44eM1vdqDUMstYUUTZgkn1HCChROOcIKHE1o4oYcTxhcJt2t6znDC52v6cZSu2y1hfbymr9ehzwg1nGDhhI/n9Kt/iy4PJ7RwQg8njHDCDCeEvzl5cm71a4j55LRa7cd1cLe3F39yqV4em1/1Wu8gTw5F/juKz4syXv0V6HuXGs1nZ51k7E3a/pC2d2n7Jm3fpe2HtP2Utl/K9iY9a0161pr0rDXpWWvSs9akZ61Jz1qTnrUmPWuNZdY+hA6W8XkJJU/EL95CNp+depOxP6TtXdq+Sdt3afshbT+l7ZeyvRdpe+lZ69Kz1qVnrUvPWpeetS49a1161rr0rHXpWdtYZu0lxDI+LyGWiXgJsQy5S4hlbl1CLKPoEmKZLpcQy8C4hFhmwCXEsq0/hDrbTt2Tl/2r+5/ns0TJ31VK/sF+dbnYfJaV+KtfpWF8SgefUs9W+vNt2PNZVuLvKk0+pUWnNAufUuVTSt+X/nwH9XyWKPm7Ss6n1PiUOp/S4FOafEqLTmkVPqXKp5S9e7+4q3w+yw79XSXnU2p8Sp1PafApTT6lRaf0rErg7zpl798vSgq2kxE6HYROne4l07OuhL/rxPcyrpbF55Sd9/uR00Ho5IROjdCJbH9aTbRh4xTXvB78FNe8HfwUF23YgLnm7eAw17wdHOaat4PD3GXNNW8Hh7lmwwbMZSeoaMMGzGVnqGjDBsxlZ6howwbMZWeoaMMGzGVnaHDDBggjnBDbsAHCiiYEN2z8f+rONrlxXFmiG3oxQRQLX4u7e39MuMWeG5dquUVVOfP3iHHO2AbKTSORIJRwgoUTYhs2QPBwQg0ntHBCbMMGCCOcMKMJwQ0bIJRwQmzDBggtnBB7T+RBCG7YACH8qxTcsAHCCCfMaEJwwwYIJZxg4YQ9nODhhBpOaOGE2IYNEEY4IbZhA3/Oim3YAKGEEyycENuwAYKHE2o4oYUTejghtmEDhBlNCG7YAKGEEyycsIcTPJxQwwktnBDbsAHCCCfENmzgEERswwYIJZxg4YTYhg0QPJxQwwktnNDDCSOcEP7mJLhho2we37ABiG7DxrKXvfV72cve+r3sZW/9XvYubS976/eyl731e9nL3vq97GVv/V72sg0bsNdt2Fj20rNWt2Fj2UvPWt2GjWUvPWt1GzaWvfSs1W3YWPZMDRsQomrYWEKyt34ve9lbv5e97K3fy96l7WVv/V72srd+L3vZW7+Xveyt38te9tZv2Os2bCx76Vmr27Cx7KVnrW7DxrKXnrW6DRvLXnrW6jZsLHvpWUvVsLGEmBo2lhBTw8YSYmrYWEIsc+sUYmrYWEJMDRtLiKlhYwkxNWwsIaaGDQhRNWwsoeRl/6KCYClxNWwsJa5L/dZxLa6GjaXE1bCxlLgaNpYSV8PGUuJq2FhKXA0bS4mrYQNKZA0bS4mrYWMpcTVsLCWuho2l5HxKXA0bS4mrYWMpcTVsLCWuho2lxNWwASWyho2lxNWwsZS4GjaWElfDxlJyPiWuho2lxNWwsZS4GjaWElfDxlLiatj4ijJxNWx8OXE1bHw5cTVsfDlxNWx8OXHdYP/lxNWw8eXE9zKOrWHjK6zI1bDx5cTVsPHl5IROXA0bX05k+1MpCZnlAyKcWYa9bo4K9ro5Ktjr5qhg79L2ujkq2OvmqGCvm6OCvW6OCva6meXDXjizDHvpWSucWYa99KwVzizDXnrWCmeWYS89a4Uzy7CnyiwfQlyZZQjp5qhgr5ujgr1ujgr2Lm2vm6OCvW6OCva6OSrY6+aoYK+bozrshTPLsJeetcKZZdhLz1rhzDLspWetcGYZ9tKzVjizDHvpWcuVWYYQVWYZQlSZZQhRZZYhxDK3TiGqzDKEqDLLEKLKLEOIKrMMIarM8iHElVmGUPKyfxXqhBJZZhlKZMckcVyLLLMMJbLMMpTIMstQIsssQ4ksswwlsswylMgyy4cSW2YZSmSZZSiRZZahRJZZhpLzKZFllqFEllmGEllmGUpkmWUokWWWDyW2zDKUyDLLUCLLLEOJLLMMJedTIsssQ4ksswwlsswylMgyy1AiyyyvKBNZZnk5kWWWlxNZZnk5kWWWlxNfJpAus7yc+F7G0WWWV1iRLLO8nMgyy8vJCZ3IMsvLiW1/mv/c7bv27aHj9sJmnBv43Pz3R+2dv9jPf4aq+FQVL5useZE1N1nzXdbcZc2rrHmTNZedoEV2hBbZGWqyM9RkZ6jJzlCTnaEmO0NNdoZa2Aw9CT2ccHsm1cfpIa9+SZjRhH0LJ5RwgoUTbu9t47F4fOyXBA8n1HBCCyfcXdN1678+WrdxSRjhhBlN8C2cUMIJd39aqz0+Wu2a0MIJd7/TbX+cdWvVrgh1CyeEf5Xq7TXt589S7ZeEEU6Y0YS2hRNKOMHCCXs4wcMJNZzQwgkfXNOtXRJGOOH+mj53vn5J6LfX9Ll7PyOUcIKFE+6u6XZmNNo2LwkeTqjhhBZO6OGE22t6Pi6kbmW7JMxowtjCCSWcYOGEPZzg4YQaTmjhhP5BwuWaHiOccH9NP060NLskzNtr+nwd+oxQwgkWTrg9p1/9W3R6OKGGE1o4oYcTRjgh/M3Jk+PcH0PYTGjYsKncsGFTuWHDpnLDhk3lhg2byg0bNpUbNmwqN2zYVG7YsKncsGFTuWHDpnLDhk3lhg2byg0bNpUbNmwqN2zYVG7YsKncsGFTuWHDpnLDhk2yhg2bZA0bNpUbNmwqN2zYVG7YsKncsGFTuWHDpnLDhk3lhg2byg0bNpUbNmwqN2zYVG7YgL30rBVu2IC99KwVbtiwqdywAXvpWSvcsGFTuWHDJlnDBoSoGjYgRNWwASGqhg0IscytU4iqYcMmWcOGTbKGDZtkDRs2yRo2bJI1bNika9iwSdewYZOuYcMmXcOGTbqGDZt0DRs26Ro2bNI1bNika9iwSdewYZOuYcMmXcOGTbqGDZt0DRs26Ro2bNI1bNika9iwSdewYZOuYcMmXcOGTbqGDZt0DRs26Ro2bNI1bNika9iwSdewYZOuYcMmXcOGTbqGDZt0DRs2+Ro2lhNZw8ZyImvYWE5kDRvLiewG++VE1rCxnPhextE1bKywIlnDxnIia9hYTk7oRNawsZzI9qe9iTZsHOKa14Mf4pq3gx/iog0bMNe8HRzmmreDw1zzdnCYu6y55u3gMNds2IC57AQVbdiAuewMFW3YgLnsDBVt2IC57AwVbdiAuewMDW7YAKGHE2IbNkCY0YTghg0QSjjBwgmxDRsgeDihhhNaOCG2YQOEEU6Y0YTghg0QSjghtmEDhBZOiL0n8iAEN2yAEP5VCm7YAGGEE2Y0IbhhA4QSTrBwwh5O8HBCDSe0cEJswwYII5wQ27CBP2fFNmyAUMIJFk6IbdgAwcMJNZzQwgk9nBDbsAHCjCYEN2yAUMIJFk7YwwkeTqjhhBZOiG3YAGGEE2IbNnAIIrZhA4QSTrBwQmzDBggeTqjhhBZO6OGEEU4If3MS3bDhNaFh44AIN2zAXvfWb9jr3voNe91bv2Hv0va6t37DXvfWb9jr3voNe91bv2Gv27Bx2As3bMBeetYKN2zAXnrWCjdswF561go3bMBeetYKN2zAnqph4xDiatiAkO6t37DXvfUb9rq3fsPepe11b/2Gve6t37DXvfUb9rq3fsNe99bvw164YQP20rNWuGED9tKzVrhhA/bSs1a4YQP20rNWuGED9tKzlqthA0JUDRsQomrYgBBVwwaEWObWKUTVsAEhqoYNCFE1bECIqmEDQlQNG4cQV8MGhJKX/asKAiiRNWxAiexSPxzXImvYgBJZwwaUyBo2oETWsAElsoYNKJE1bECJrGHjUGJr2IASWcMGlMgaNqBE1rABJedTImvYgBJZwwaUyBo2oETWsAElsoaNQ4mtYQNKZA0bUCJr2IASWcMGlJxPiaxhA0pkDRtQImvYgBJZwwaUyBo2VpSJrGFjOZE1bCwnsoaN5UTWsLGcyG6wX05kDRvLie9lHF3DxgorkjVsLCeyho3l5IROZA0by4lsf6qWkFk+IMKZZdjr5qhgr5ujgr1ujgr2Lm2vm6OCvW6OCva6OSrY6+aoYK+bWT7shTPLsJeetcKZZdhLz1rhzDLspWetcGYZ9tKzVjizDHuqzPIhxJVZhpBujgr2ujkq2OvmqGDv0va6OSrY6+aoYK+bo4K9bo4K9ro5qsNeOLMMe+lZK5xZhr30rBXOLMNeetYKZ5ZhLz1rhTPLsJeetVyZZQhRZZYhRJVZhhBVZhlCLHPrFKLKLEOIKrMMIarMMoSoMssQososH0JcmWUIJS/7V6FOKJFllqFEdkwSx7XIMstQIsssQ4ksswwlsswylMgyy1AiyyxDiSyzfCixZZahRJZZhhJZZhlKZJllKDmfEllmGUpkmWUokWWWoUSWWYYSWWb5UGLLLEOJLLMMJbLMMpTIMstQcj4lsswylMgyy1AiyyxDiSyzDCWyzPKKMpFllpcTWWZ5OZFllpcTWWZ5OfFlAukyy8uJ72UcXWZ5hRXJMsvLiSyzvJyc0Ikss7ycyPan5k8yy9X747na+p8hHzzEfvgMMp9J5vMk/v2DQoVNyNiEdjYhZxOqbEKNTYhtny5sG3Vh26mNbac2tp3a2HZqY9upjW2nNrad2gJ36pPRExj399MPnoiF0CQT2jc2ocImZGxCO5uQswlVNqHGJtTZhNh26p1tp3a2ndrZdmpn26mdbad2tp3a2XZqZ9upPXCnPhkjgTHjGXVLYJQEhiUw9gSGJzBqAqMlMBLWebv/s/sqSACKpVDuf9+/8Ye8NjP+X/qWQkn57nf/AOXPR+dBqSmUlkLpKZSRQpkZlPGJ9fLnA76glBSKpVD2FIqnUGoKpaVQegplpFBmBmV+YO2/OLAKSkmhWAplT6F4CqWmUFoKpadQRgrlA2v/xVHkdUxry8GUHIxn/BOmbDUH03IwPQXzgROB38KUHIzlYPYcTMK6addnePv5WO8v3u369jhS7PbiRPE494q5+X/+9RL4jTfG7fqwr4L4VBW/3iwkzIusucma77LmLmteZc2brLnsBC2yI7TIzlCTnaEmO0NNdoaa7Aw12RlqsjPUwmboSejhhNszqT7+dOvVLwkzmrBv4YQSTrBwwu29bTwWj4/9kuDhhBpOaOGEu2u6bo8XUnUbl4QRTpjRBN/CCSWccPentdrjo9WuCS2ccPc73fbHsYtW7YpQt3BC+Fep3l7T50vmWvslYYQTZjShbeGEEk6wcMIeTvBwQg0ntHDCB9d0a5eEEU64v6bPna9fEvrtNX3u3s8IJZxg4YS7a7qdB2TbNi8JHk6o4YQWTujhhNtretYHoWyXhBlNGFs4oYQTLJywhxM8nFDDCS2c0D9IuFzTY4QT7q/px1G6ZpeEeXtNn69DnxFKOMHCCbfn9Kt/i04PJ9RwQgsn9HDCCCeEvzl5cm71Y4j+5LTaX96BuT02v+KlXEFK8s3SH7zUqD876yRjb9L2u7S9S9tXafsmbd+l7Ye0/VS2N+lZa9Kz1qRnrUnPWpOetSY9a0161pr0rDXpWWsss/YhtLOMz1MoeSJ+8Bay/uzUm4z9Lm3v0vZV2r5J23dp+yFtP5XtfZO2l561Lj1rXXrWuvSsdelZ69Kz1qVnrUvPWpeetZVl1p5CLOPzFGKZiKcQy5A7hVjm1inEMopOIZbpcgqxDIxTiGUGnEIs2/pDqLHt1C152b+6/7k/S5T8rBJZMXd/lpX40a9SNz6lnU8pu2z6xW3Y/VlW4meVBp/SpFMaG59S4VNK35f+fAd1f5Yo+Vkl51OqfEqNT6nzKQ0+pUmnNDc+pcKnlL17v7irvD/LDv2skvMpVT6lxqfU+ZQGn9KkU3pWJfCzTtn794uSguVkhE47oVOje8n0rCvhZ534XsaVbfI5Zef9vuW0Ezo5oVMldCLbn8Yu2rBxiGteD36Ia94OfoiLNmzAXPN2cJhr3g4Oc83bwWHusuaat4PDXLNhA+ayE1S0YQPmsjNUtGED5rIzVLRhA+ayM1S0YQPmsjM0uGEDhB5OiG3YAGFGE4IbNkAo4QQLJ8Q2bIDg4YQaTmjhhNiGDRBGOGFGE4IbNkAo4YTYhg0QWjgh9p7IgxDcsAFC+FcpuGEDhBFOmNGE4IYNEEo4wcIJezjBwwk1nNDCCbENGyCMcEJswwb+nBXbsAFCCSdYOCG2YQMEDyfUcEILJ/RwQmzDBggzmhDcsAFCCSdYOGEPJ3g4oYYTWjghtmEDhBFOiG3YwCGI2IYNEEo4wcIJsQ0bIHg4oYYTWjihhxNGOCH8zUl0w8a0hIaNAyLcsAF73Vu/Ya976zfsdW/9hr1L2+ve+g173Vu/Ya976zfsdW/9hr1uw8ZhL9ywAXvpWSvcsAF76Vkr3LABe+lZK9ywAXvpWSvcsAF7qoaNQ4irYQNCurd+w1731m/Y6976DXuXtte99Rv2urd+w1731m/Y6976DXvdW78Pe+GGDdhLz1rhhg3YS89a4YYN2EvPWuGGDdhLz1rhhg3YS89aroYNCFE1bECIqmEDQlQNGxBimVunEFXDBoSoGjYgRNWwASGqhg0IUTVsHEJcDRsQSl72ryoIoETWsAElskv9cFyLrGEDSmQNG1Aia9iAElnDBpTIGjagRNawASWyho1Dia1hA0pkDRtQImvYgBJZwwaUnE+JrGEDSmQNG1Aia9iAElnDBpTIGjYOJbaGDSiRNWxAiaxhA0pkDRtQcj4lsoYNKJE1bECJrGEDSmQNG1Aia9hYUSayho3lRNawsZzIGjaWE1nDxnIiu8F+OZE1bCwnvpdxdA0bK6xI1rCxnMgaNpaTEzqRNWwsJ7b9aWZklqd0ZnlKZ5andGZ5SmeWp3RmeUpnlqd0ZnlKZ5andGZ5SmeWp3RmeUpnlqd0ZnlKZ5andGZ5SmeWp3RmeUpnlqd0ZnmyZZYnW2Z5SmeWp3RmeUpnlqd0ZnlKZ5andGZ5SmeWp3RmeUpnlqd0ZnlKZ5andGZ5SmeWp3RmeUpnlqd0ZnlKZ5andGZ5SmeWJ1tmebJllidbZnmyZZYnW2Z5smWWJ1tmebJllidbZnmyZZYnW2Z58mWWJ19mefJllidfZnnyZZYnX2Z58mWWJ19mefJllidfZnnyZZYnX2Z58mWWJ19mefJllidfZnnyZZYnX2Z58mWWJ19mefJllidfZnnyZZYnX2Z58mWWJ19mefJllidfZnnyZZYnX2Z5EmaWJ2FmeRJmlidhZnkSZpYnYWZ5EmaWJ2FmeRJmlidhZnkSZpYnYWZ50mWWbev/3O279u2h4/bCZpwb+Nz890ft7/9iD/GhKj5Vxcsma15kzU3WfJc1d1nzKmveZM1lJ2iRHaFFdoaa7Aw12RlqsjPUZGeoyc5Qk52hFjZDT0IPJ9yeSfVxesirXxJmNGHfwgklnGDhhNt723gsHh/7JcHDCTWc0MIJd9d03fqvj9ZtXBJGOGFGE3wLJ5Rwwt2f1mqPj1a7JrRwwt3vdNsfZ91atStC3cIJ4V+lentN+/mzVPslYYQTZjShbeGEEk6wcMIeTvBwQg0ntHDCB9d0a5eEEU64v6bPna9fEvrtNX3u3s8IJZxg4YS7a7qdGY22zUuChxNqOKGFE3o44faano8LqVvZLgkzmjC2cEIJJ1g4YQ8neDihhhNaOKF/kHC5pscIJ9xf048TLc0uCfP2mj5fhz4jlHCChRNuz+lX/xadHk6o4YQWTujhhBFOCH9z8uQ498cQpcc3bACi27Cx7GVv/V72srd+L3vZW7+XvUvby976vexlb/1e9rK3fi972Vu/l71swwbsdRs2lr30rNVt2Fj20rNWt2Fj2UvPWt2GjWUvPWt1GzaWPVPDBoSoGjaWkOyt38te9tbvZS976/eyd2l72Vu/l73srd/LXvbW72Uve+v3spe99Rv2ug0by1561uo2bCx76Vmr27Cx7KVnrW7DxrKXnrW6DRvLXnrWUjVsLCGmho0lxNSwsYSYGjaWEMvcOoWYGjaWEFPDxhJiathYQkwNG0uIqWEDQlQNG0soedm/qCBYSlwNG0uJ61K/dVyLq2FjKXE1bCwlroaNpcTVsLGUuBo2lhJXw8ZS4mrYgBJZw8ZS4mrYWEpcDRtLiathYyk5nxJXw8ZS4mrYWEpcDRtLiathYylxNWxAiaxhYylxNWwsJa6GjaXE1bCxlJxPiathYylxNWwsJa6GjaXE1bCxlLgaNr6iTFwNG19OXA0bX05cDRtfTlwNG19OZDfYLyeuho0vJ76XcWwNG19hRa6GjS8nroaNLycndOJq2PhyItufzEUbNg5xzevBD3HN28EPcdGGDZhr3g4Oc83bwWGueTs4zF3WXPN2cJhrNmzAXHaCijZswFx2hoo2bMBcdoaKNmzAXHaGijZswFx2hgY3bIDQwwmxDRsgzGhCcMMGCCWcYOGE2IYNEDycUMMJLZwQ27ABwggnzGhCcMMGCCWcENuwAUILJ8TeE3kQghs2QAj/KgU3bIAwwgkzmhDcsAFCCSdYOGEPJ3g4oYYTWjghtmEDhBFOiG3YwJ+zYhs2QCjhBAsnxDZsgODhhBpOaOGEHk6IbdgAYUYTghs2QCjhBAsn7OEEDyfUcEILJ8Q2bIAwwgmxDRs4BBHbsAFCCSdYOCG2YQMEDyfUcEILJ/RwwggnhL85iW7Y2PeEho0DItywAXvdW79hr3vrN+x1b/2GvUvb6976DXvdW79hr3vrN+x1b/2GvW7DxmEv3LABe+lZK9ywAXvpWSvcsAF76Vkr3LABe+lZK9ywAXuqho1DiKthA0K6t37DXvfWb9jr3voNe5e21731G/a6t37DXvfWb9jr3voNe91bvw974YYN2EvPWuGGDdhLz1rhhg3YS89a4YYN2EvPWuGGDdhLz1quhg0IUTVsQIiqYQNCVA0bEGKZW6cQVcMGhKgaNiBE1bABIaqGDQhRNWwcQlwNGxBKXvavKgigRNawASWyS/1wXIusYQNKZA0bUCJr2IASWcMGlMgaNqBE1rABJbKGjUOJrWEDSmQNG1Aia9iAElnDBpScT4msYQNKZA0bUCJr2IASWcMGlMgaNg4ltoYNKJE1bECJrGEDSmQNG1ByPiWyhg0okTVsQImsYQNKZA0bUCJr2FhRJrKGjeVE1rCxnMgaNpYTWcPGciK7wX45kTVsLCe+l3F0DRsrrEjWsLGcyBo2lpMTOpE1bCwnsv3Jt4TM8gERzizDXjdHBXvdHBXsdXNUsHdpe90cFex1c1Sw181RwV43RwV73czyYS+cWYa99KwVzizDXnrWCmeWYS89a4Uzy7CXnrXCmWXYU2WWDyGuzDKEdHNUsNfNUcFeN0cFe5e2181RwV43RwV73RwV7HVzVLDXzVEd9sKZZdhLz1rhzDLspWetcGYZ9tKzVjizDHvpWSucWYa99KzlyixDiCqzDCGqzDKEqDLLEGKZW6cQVWYZQlSZZQhRZZYhRJVZhhBVZvkQ4sosQyh52b8KdUKJLLMMJbJjkjiuRZZZhhJZZhlKZJllKJFllqFEllmGEllmGUpkmeVDiS2zDCWyzDKUyDLLUCLLLEPJ+ZTIMstQIsssQ4ksswwlsswylMgyy4cSW2YZSmSZZSiRZZahRJZZhpLzKZFllqFEllmGEllmGUpkmWUokWWWV5SJLLO8nMgyy8uJLLO8nMgyy8uJLxNIl1leTnwv4+gyyyusSJZZXk5kmeXl5IROZJnl5cS1P9WncYO+PYx6/d1XXrb6+7n+5nPjzefme89dn0H/xnPlzefszecul/XYtl/Pje3Jc/7mc/XN59qbz/U3nxtvPjffe+760OU435COPq6fK28+Z28+t7/5nL/5XH3zufbmc9c/L6M/npvt+rnx5nPzveeuDw5947ny5nP25nP7m89d/rzM8lhHs1yvo+uzJ994rr35XH/zufHmc/O9566PL3zjufLiObv+/jV787n9zeeuf172x3qffr3er48sfOO59uZz/c3nxpvPzfee69ubz13/vLTz98HN/b8e/L+/+fBJsRTKnkLxFEpNobQUSk+hjBTKzKBcnzb4OCVl7Y+UtT9S1v5IWfsjZe2PlLU/Utb+SFn7I2Xtz5S1P1PW/kxZ+zNl7c+UtT9T1v5MWfszZe3PlLU/U9b+k790fh5TcjCWg9lzMJ6DqTmYloPpOZiRg8nZBUrOLlBydoGSswuUnF2g5OwCJWcXKDm7QMnZBUrOLlBydgHL2QUsZxewnF3AcnYBy9kFLGcXsJxdwHJ2AcvZBSxnF9hzdoE9ZxfYc3aBPWcX2HN2gT1nF9hzdoE9ZxfYc3aBPWcX8JxdwHN2Ac/ZBTxnF/CcXcBzdgHP2QU8ZxfwnF3Ac3aBmrML1JxdoObsAjVnF6g5u0DN2QVqzi5Qc3aBmrML1JxdoOXsAi1nF2g5u0DL2QVazi7QcnaBlrMLtJxdoOXsAi1nF+g5u0DO+cCSc0Cw5JwQLDlHBEvOGcGSc0iw5JwSLDnHBEvOOcGSc1Cw5JwULDlHBUvOWcGSc1iw5JwWLDnHBUvOecGSc2Cw5JwYLDlHBkvOmcGSc2iw5JwaLDnHBkvOucGSc3Cw5JwcLDlHB0vO2UHLOTtoOWcHLefsoOWcHbTNczA1B9NyMD0HM3IwObtAztlByzk7aDlnBy3n7KDlnB20nLODlnN20HLODlrO2UHLOTtoOWcHLefsoOWcHbScs4OWc3bQcs4OWs7ZQcs5O2g5Zwct5+yg5ZwdtJyzg5ZzdtByzg5aztlByzk7aDlnBy3n7KDlnB20nLODlnN20HLODlrO2UHLOTtoOWcH7QOn7er2uEqmln/dqur/uiLwA4ftvkH5wOm0aidlr08olkLZUyieQqkplL8dNL+f7O8++YFTA9/4uf7AoYHvUGoKpaVQUna1DxwYqP64krpWe0KZGZQPHBf4DqWkUCyF8oG1v4+Tsj+heAqlplBaCqWnUEYKZWZMzg8cEvgOJeW3s5ny29lM+e3sAwcEvkNJ+e3sA8cDvkPpKZSRQslY+/u2pVBKCsVSKHsKxVMoNYXSUig9hTJSKClrv6Ss/ZKy9kvK2i8pa7+krP2SsvZLytovKWu/pKz9krL2LWXtW8rat5S1bylr31LWvqWsfUtZ+xa/9ts/1xVs1R/lF6W2/ypO/V/GqI83SmOUP3+0lHHKm/3r1YCdPoPMZ5L5XP9q85NChU3I2IR2NiFnE6psQo1NiG2fLmwbdWHbqY1tpza2ndrYdmpj26mNbac2tp3aAnfqk9ETGPf307mVX5+d+3b/CzvJhPaNTaiwCRmb0M4m5GxClU2osQl1NiG2nXpn26mdbad2tp3a2XZqZ9upnW2ndrad2tl2ag/cqU/GSGDMeEbdEhglgWEJjD2B4QmMmsBoCYyEdd7u/+yWbdsfH96KXVIshXL/+17Mf+++7fIFQpsZ/y99S6GkfPe7f4DS5kkZ7ZJSUygthdJTKCOFMjMo4xPrpZXflH5JKSkUS6HsKRRPodQUSkuh9BTKSKHMDMr8wNovxR8fLn75m9IsKRRLoewpFE+h1BRKS6H0FMpIoXxg7ZduJ2WMK8qTVuvPY0oOxjP+CVO2moNpOZiegvnAicBvYUoOxnIwew4mYd2M6zO8/Xys9xfvdn175HXd6p8/Os69Ym6/Dx8fL4HfeGM8rg/7KohPVfHrzULCvMiam6z5LmvusuZV1rzJmstO0CI7QovsDDXZGWqyM9RkZ6jJzlCTnaEmO0MtbIaehB5OuD2T6uNPt179kjCjCfsWTijhBAsn3N7bxmPx+NgvCR5OqOGEFk64u6br9nghVbdxSRjhhBlN8C2cUMIJd39aqz0+Wu2a0MIJd7/TbX8cu2jVrgh1CyeEf5Xq7TV9vmSutV8SRjhhRhPaFk4o4QQLJ+zhBA8n1HBCCyd8cE23dkkY4YT7a/rc+folod9e0+fu/YxQwgkWTri7ptt5QLZt85Lg4YQaTmjhhB5OuL2mZ30QynZJmNGEsYUTSjjBwgl7OMHDCTWc0MIJ/YOEyzU9Rjjh/pp+HKVrdkmYt9f0+Tr0GaGEEyyccHtOv/q36PRwQg0ntHBCDyeMcEL4m5Mn51Y/hqhPTquVtp8Hd49P/RlRfHtsfsVLuYI8ORT5dxQfJ6W/+ivQ5y41qs/OOsnYm7T9Lm3v0vZV2r5J23dp+yFtP5XtTXrWmvSsNelZa9Kz1qRnrUnPWpOetSY9a0161hrLrH0I7Szj8xRKnogfvIWsPjv1JmO/S9u7tH2Vtm/S9l3afkjbT2V736TtpWetS89al561Lj1rXXrWuvSsdelZ69Kz1qVnbWWZtacQy/g8hVgm4inEMuROIZa5dQqxjKJTiGW6nEIsA+MUYpkBpxDLtv4Qamw7dUte9q/uf67PEiU/q5T8g/3qcrH6LCvxo1+lbnxKO59Sy1b6823Y9VlW4meVBp/SpFMaG59S4VNK35f+fAd1fZYo+Vkl51OqfEqNT6nzKQ0+pUmnNDc+pcKnlL17v7irvD7LDv2skvMpVT6lxqfU+ZQGn9KkU3pWJfCzTtn794uSguVkhE47oVOje8n0rCvhZ534XsaVbfI5Zef9vuW0Ezo5oVMldCLbn1oVbdg4xDWvBz/ENW8HP8RFGzZgrnk7OMw1bweHuebt4DB3WXPN28FhrtmwAXPZCSrasAFz2Rkq2rABc9kZKtqwAXPZGSrasAFz2Rka3LABQg8nxDZsgDCjCcENGyCUcIKFE2IbNkDwcEINJ7RwQmzDBggjnDCjCcENGyCUcEJswwYILZwQe0/kQQhu2AAh/KsU3LABwggnzGhCcMMGCCWcYOGEPZzg4YQaTmjhhNiGDRBGOCG2YQN/zopt2AChhBMsnBDbsAGChxNqOKGFE3o4IbZhA4QZTQhu2AChhBMsnLCHEzycUMMJLZwQ27ABwggnxDZs4BBEbMMGCCWcYOGE2IYNEDycUMMJLZzQwwkjnBD+5iS6YaN7QsPGARFu2IC97q3fsNe99Rv2urd+w96l7XVv/Ya97q3fsNe99Rv2urd+w163YeOwF27YgL30rBVu2IC99KwVbtiAvfSsFW7YgL30rBVu2IA9VcPGIcTVsAEh3Vu/Ya976zfsdW/9hr1L2+ve+g173Vu/Ya976zfsdW/9hr3urd+HvXDDBuylZ61wwwbspWetcMMG7KVnrXDDBuylZ61wwwbspWctV8MGhKgaNiBE1bABIaqGDQixzK1TiKphA0JUDRsQomrYgBBVwwaEqBo2DiGuhg0IJS/7VxUEUCJr2IAS2aV+OK5F1rABJbKGDSiRNWxAiaxhA0pkDRtQImvYgBJZw8ahxNawASWyhg0okTVsQImsYQNKzqdE1rABJbKGDSiRNWxAiaxhA0pkDRuHElvDBpTIGjagRNawASWyhg0oOZ8SWcMGlMgaNqBE1rABJbKGDSiRNWysKBNZw8ZyImvYWE5kDRvLiaxhYzmR3WC/nMgaNpYT38s4uoaNFVYka9hYTmQNG8vJCZ3IGjaWE9n+NEpCZvmACGeWYa+bo4K9bo4K9ro5Kti7tL1ujgr2ujkq2OvmqGCvm6OCvW5m+bAXzizDXnrWCmeWYS89a4Uzy7CXnrXCmWXYS89a4cwy7Kkyy4cQV2YZQro5Ktjr5qhgr5ujgr1L2+vmqGCvm6OCvW6OCva6OSrY6+aoDnvhzDLspWetcGYZ9tKzVjizDHvpWSucWYa99KwVzizDXnrWcmWWIUSVWYYQVWYZQlSZZQixzK1TiCqzDCGqzDKEqDLLEKLKLEOIKrN8CHFlliGUvOxfhTqhRJZZhhLZMUkc1yLLLEOJLLMMJbLMMpTIMstQIsssQ4ksswwlsszyocSWWYYSWWYZSmSZZSiRZZah5HxKZJllKJFllqFEllmGEllmGUpkmeVDiS2zDCWyzDKUyDLLUCLLLEPJ+ZTIMstQIsssQ4ksswwlsswylMgyyyvKRJZZXk5kmeXlRJZZXk5kmeXlxJcJpMssLye+l3F0meUVViTLLC8nsszycnJCJ7LM8nJi25/mP3f7rn176Li9sBnnBj43//1Re+cv9vOfoSo+VcXLJmteZM1N1nyXNXdZ8ypr3mTNZSdokR2hRXaGmuwMNdkZarIz1GRnqMnOUJOdoRY2Q09CDyfcnkn1cXrIq18SZjRh38IJJZxg4YTbe9t4LB4f+yXBwwk1nNDCCXfXdN36r4/WbVwSRjhhRhN8CyeUcMLdn9Zqj49Wuya0cMLd73TbH2fdWrUrQt3CCeFfpXp7Tfv5s1T7JWGEE2Y0oW3hhBJOsHDCHk7wcEINJ7RwwgfXdGuXhBFOuL+mz52vXxL67TV97t7PCCWcYOGEu2u6nRmNts1LgocTajihhRN6OOH2mp6PC6lb2S4JM5owtnBCCSdYOGEPJ3g4oYYTWjihf5BwuabHCCfcX9OPEy3NLgnz9po+X4c+I5RwgoUTbs/pV/8WnR5OqOGEFk7o4YQRTgh/c/LkOPfHEHMmNGzMqdywMadyw8acyg0bcyo3bMyp3LAxp3LDxpzKDRtzKjdszKncsDGncsPGnMoNG3MqN2zMqdywMadyw8acyg0bcyo3bMyp3LAxp3LDxpzKDRtzkjVszEnWsDGncsPGnMoNG3MqN2zMqdywMadyw8acyg0bcyo3bMyp3LAxp3LDxpzKDRtzKjdswF561go3bMBeetYKN2zMqdywAXvpWSvcsDGncsPGnGQNGxCiatiAEFXDBoSoGjYgxDK3TiGqho05yRo25iRr2JiTrGFjTrKGjTnJGjbmpGvYmJOuYWNOuoaNOekaNuaka9iYk65hY066ho056Ro25qRr2JiTrmFjTrqGjTnpGjbmpGvYmJOuYWNOuoaNOekaNuaka9iYk65hY066ho056Ro25qRr2JiTrmFjTrqGjTnpGjbmpGvYmJOuYWNOuoaNOekaNuaka9iYk65hY06+ho3lRNawsZzIGjaWE1nDxnIiu8F+OZE1bCwnvpdxdA0bK6xI1rCxnMgaNpaTEzqRNWwsJ679qW1Ns2ED4pLXg0Nc8nZwiGs2bCxzydvBl7nk7eDLXPJ28GXusuaSt4Mvc8mGjWUuO0E1GzaWuewM1WzYWOayM1SzYWOZy85QzYaNZS47Q2MbNhahhxNCGzYWYUYTYhs2FqGEEyycENqwsQgeTqjhhBZOCG3YWIQRTpjRhNiGjUUo4YTQho1FaOGE0HsiQYht2FiE8K9SbMPGIoxwwowmxDZsLEIJJ1g4YQ8neDihhhNaOCG0YWMRRjghtGFj/TkrtGFjEUo4wcIJoQ0bi+DhhBpOaOGEHk4IbdhYhBlNiG3YWIQSTrBwwh5O8HBCDSe0cEJow8YijHBCaMPGOgQR2rCxCCWcYOGE0IaNRfBwQg0ntHBCDyeMcEL4m5Pgho1WanzDBiC6DRvLXvbW72Uve+v3spe99XvZu7S97K3fy1721u9lL3vr97KXvfV72cs2bMBet2Fj2UvPWt2GjWUvPWt1GzaWvfSs1W3YWPbSs1a3YWPZMzVsQIiqYWMJyd76vexlb/1e9rK3fi97l7aXvfV72cve+r3sZW/9Xvayt34ve9lbv2Gv27Cx7KVnrW7DxrKXnrW6DRvLXnrW6jZsLHvpWavbsLHspWctVcPGEmJq2FhCTA0bS4ipYWMJscytU4ipYWMJMTVsLCGmho0lxNSwsYSYGjYgRNWwsYSSl/2LCoKlxNWwsZS4LvVbx7W4GjaWElfDxlLiathYSlwNG0uJq2FjKXE1bCwlroYNKJE1bCwlroaNpcTVsLGUuBo2lpLzKXE1bCwlroaNpcTVsLGUuBo2lhJXwwaUyBo2lhJXw8ZS4mrYWEpcDRtLyfmUuBo2lhJXw8ZS4mrYWEpcDRtLiath4yvKxNWw8eXE1bDx5cTVsPHlxNWw8eVEdoP9cuJq2Phy4nsZx9aw8RVW5GrY+HLiatj4cnJCJ66GjS8nsv3JLCGzfECEM8uw181RwV43RwV73RwV7F3aXjdHBXvdHBXsdXNUsNfNUcFeN7N82AtnlmEvPWuFM8uwl561wpll2EvPWuHMMuylZ61wZhn2VJnlQ4grswwh3RwV7HVzVLDXzVHB3qXtdXNUsNfNUcFeN0cFe90cFex1c1SHvXBmGfbSs1Y4swx76VkrnFmGvfSsFc4sw1561gpnlmEvPWu5MssQososQ4gqswwhqswyhFjm1ilElVmGEFVmGUJUmWUIUWWWIUSVWT6EuDLLEEpe9q9CnVAiyyxDieyYJI5rkWWWoUSWWYYSWWYZSmSZZSiRZZahRJZZhhJZZvlQYsssQ4ksswwlsswylMgyy1ByPiWyzDKUyDLLUCLLLEOJLLMMJbLM8qHEllmGEllmGUpkmWUokWWWoeR8SmSZZSiRZZahRJZZhhJZZhlKZJnlFWUiyywvJ7LM8nIiyywvJ7LM8nLiywTSZZaXE9/LOLrM8gorkmWWlxNZZnk5OaETWWZ5OZHtT7s/ySxX74/naut/hnzwEPvhM8h8JpnPk/j3DwoVNiFjE9rZhJxNqLIJNTYhtn26sG3UhW2nNrad2th2amPbqY1tpza2ndrYdmoL3KlPRk9g3N9PP3giFkKTTGjf2IQKm5CxCe1sQs4mVNmEGptQZxNi26l3tp3a2XZqZ9upnW2ndrad2tl2amfbqZ1tp/bAnfpkjATGjGfULYFREhiWwNgTGJ7AqAmMlsBIWOft/s/uqyABKJZCuf99/8Yf8trM+H/pWwol5bvf/QOUPx+dB6WmUFoKpadQRgplZlDGJ9bLnw/4glJSKJZC2VMonkKpKZSWQukplJFCmRmU+YG1/+LAKiglhWIplD2F4imUmkJpKZSeQhkplA+s/RdHkdcxrS0HU3IwnvFPmLLVHEzLwfQUzAdOBH4LU3IwloPZczAJ66Zdn+Ht52O9v3i369vjSLHbixPF49wr5ub/+ddL4DfeGLfrw74K4lNV/HqzkDAvsuYma77LmruseZU1b7LmshO0yI7QIjtDTXaGmuwMNdkZarIz1GRnqMnOUAuboSehhxNuz6T6+NOtV78kzGjCvoUTSjjBwgm397bxWDw+9kuChxNqOKGFE+6u6bo9XkjVbVwSRjhhRhN8CyeUcMLdn9Zqj49Wuya0cMLd73TbH8cuWrUrQt3CCeFfpXp7TZ8vmWvtl4QRTpjRhLaFE0o4wcIJezjBwwk1nNDCCR9c061dEkY44f6aPne+fknot9f0uXs/I5RwgoUT7q7pdh6Qbdu8JHg4oYYTWjihhxNur+lZH4SyXRJmNGFs4YQSTrBwwh5O8HBCDSe0cEL/IOFyTY8RTri/ph9H6ZpdEubtNX2+Dn1GKOEECyfcntOv/i06PZxQwwktnNDDCSOcEP7m5Mm51Y8h/Mlptb+8A3N7bH7FS7mClOSbpT94qZE/O+skY2/S9ru0vUvbV2n7Jm3fpe2HtP1UtjfpWWvSs9akZ61Jz1qTnrUmPWtNetaa9Kw16VlrLLP2IbSzjM9TKHkifvAWMn926k3Gfpe2d2n7Km3fpO27tP2Qtp/K9r5J20vPWpeetS49a1161rr0rHXpWevSs9alZ61Lz9rKMmtPIZbxeQqxTMRTiGXInUIsc+sUYhlFpxDLdDmFWAbGKcQyA04hlm39IdTYduqWvOxf3f/szxIlP6tEVsztz7ISP/pV6santPMpZZdNv7gN259lJX5WafApTTqlsfEpFT6l9H3pz3dQ+7NEyc8qOZ9S5VNqfEqdT2nwKU06pbnxKRU+pezd+8Vd5f4sO/SzSs6nVPmUGp9S51MafEqTTulZlcDPOmXv3y9KCpaTETrthE6N7iXTs66En3XiexlXtsnnlJ33+5bTTujkhE6V0Ilsf6q7aMPGIa55Pfghrnk7+CEu2rABc83bwWGueTs4zDVvB4e5y5pr3g4Oc82GDZjLTlDRhg2Yy85Q0YYNmMvOUNGGDZjLzlDRhg2Yy87Q4IYNEHo4IbZhA4QZTQhu2AChhBMsnBDbsAGChxNqOKGFE2IbNkAY4YQZTQhu2AChhBNiGzZAaOGE2HsiD0JwwwYI4V+l4IYNEEY4YUYTghs2QCjhBAsn7OEEDyfUcEILJ8Q2bIAwwgmxDRv4c1ZswwYIJZxg4YTYhg0QPJxQwwktnNDDCbENGyDMaEJwwwYIJZxg4YQ9nODhhBpOaOGE2IYNEEY4IbZhA4cgYhs2QCjhBAsnxDZsgODhhBpOaOGEHk4Y4YTwNyfRDRvNEho2DohwwwbsdW/9hr3urd+w1731G/Yuba976zfsdW/9hr3urd+w1731G/a6DRuHvXDDBuylZ61wwwbspWetcMMG7KVnrXDDBuylZ61wwwbsqRo2DiGuhg0I6d76DXvdW79hr3vrN+xd2l731m/Y6976DXvdW79hr3vrN+x1b/0+7IUbNmAvPWuFGzZgLz1rhRs2YC89a4UbNmAvPWuFGzZgLz1ruRo2IETVsAEhqoYNCFE1bECIZW6dQlQNGxCiatiAEFXDBoSoGjYgRNWwcQhxNWxAKHnZv6oggBJZwwaUyC71w3EtsoYNKJE1bECJrGEDSmQNG1Aia9iAElnDBpTIGjYOJbaGDSiRNWxAiaxhA0pkDRtQcj4lsoYNKJE1bECJrGEDSmQNG1Aia9g4lNgaNqBE1rABJbKGDSiRNWxAyfmUyBo2oETWsAElsoYNKJE1bECJrGFjRZnIGjaWE1nDxnIia9hYTmQNG8uJ7Ab75UTWsLGc+F7G0TVsrLAiWcPGciJr2FhOTuhE1rCxnNj2p5mRWZ7SmeUpnVme0pnlKZ1ZntKZ5SmdWZ7SmeUpnVme0pnlKZ1ZntKZ5SmdWZ7SmeUpnVme0pnlKZ1ZntKZ5SmdWZ7SmeXJllmebJnlKZ1ZntKZ5SmdWZ7SmeUpnVme0pnlKZ1ZntKZ5SmdWZ7SmeUpnVme0pnlKZ1ZntKZ5SmdWZ7SmeUpnVme0pnlKZ1ZnmyZ5cmWWZ5smeXJllmebJnlyZZZnmyZ5cmWWZ5smeXJllmebJnlyZdZnnyZ5cmXWZ58meXJl1mefJnlyZdZnnyZ5cmXWZ58meXJl1mefJnlyZdZnnyZ5cmXWZ58meXJl1mefJnlyZdZnnyZ5cmXWZ58meXJl1mefJnlyZdZnnyZ5cmXWZ58meXJl1mefJnlSZhZnoSZ5UmYWZ6EmeVJmFmehJnlSZhZnoSZ5UmYWZ6EmeVJmFmehJnlyZdZ7v2fu33Xvj103F7YjHMDn5v//qi98Rf7Q3yoik9V8bLJmhdZc5M132XNXda8ypo3WXPZCVpkR2iRnaEmO0NNdoaa7Aw12RlqsjPUZGeohc3Qk9DDCbdnUn2cHvLql4QZTdi3cEIJJ1g44fbeNh6Lx8d+SfBwQg0ntHDC3TVdt/7ro3Ubl4QRTpjRBN/CCSWccPentdrjo9WuCS2ccPc73fbHWbdW7YpQt3BC+Fep3l7Tfv4s1X5JGOGEGU1oWzihhBMsnLCHEzycUMMJLZzwwTXd2iVhhBPur+lz5+uXhH57TZ+79zNCCSdYOOHumm5nRqNt85Lg4YQaTmjhhB5OuL2m5+NC6la2S8KMJowtnFDCCRZO2MMJHk6o4YQWTugfJFyu6THCCffX9ONES7NLwry9ps/Xoc8IJZxg4YTbc/rVv0WnhxNqOKGFE3o4YYQTwt+cPDnO/THE6AkNG6MrN2yMrtywMbpyw8boyg0boys3bIyu3LAxunLDxujKDRujKzdsjK7csDG6csPG6MoNG6MrN2yMrtywMbpyw8boyg0boys3bIyu3LAxunLDxuhkDRujkzVsjK7csDG6csPG6MoNG6MrN2yMrtywMbpyw8boyg0boys3bIyu3LAxunLDxujKDRuwl561wg0bsJeetcING6MrN2zAXnrWCjdsjK7csDE6WcMGhKgaNiBE1bABIaqGDQixzK1TiKphY3Syho3RyRo2Ridr2BidrGFjdLKGjdHpGjZGp2vYGJ2uYWN0uoaN0ekaNkana9gYna5hY3S6ho3R6Ro2Rqdr2BidrmFjdLqGjdHpGjZGp2vYGJ2uYWN0uoaN0ekaNkana9gYna5hY3S6ho3R6Ro2Rqdr2BidrmFjdLqGjdHpGjZGp2vYGJ2uYWN0uoaN0ekaNkana9gYna9hYzmRNWwsJ7KGjeVE1rCxnMhusF9OZA0by4nvZRxdw8YKK5I1bCwnsoaN5eSETmQNG8uJbH+aLtqwcYhrXg9+iGveDn6IizZswFzzdnCYa94ODnPN28Fh7rLmmreDw1yzYQPmshNUtGED5rIzVLRhA+ayM1S0YQPmsjNUtGED5rIzNLhhA4QeToht2ABhRhOCGzZAKOEECyfENmyA4OGEGk5o4YTYhg0QRjhhRhOCGzZAKOGE2IYNEFo4IfaeyIMQ3LABQvhXKbhhA4QRTpjRhOCGDRBKOMHCCXs4wcMJNZzQwgmxDRsgjHBCbMMG/pwV27ABQgknWDghtmEDBA8n1HBCCyf0cEJswwYIM5oQ3LABQgknWDhhDyd4OKGGE1o4IbZhA4QRToht2MAhiNiGDRBKOMHCCbENGyB4OKGGE1o4oYcTRjgh/M1JcMNG3/b4hg1AdBs2lr3srd/LXvbW72Uve+v3sndpe9lbv5e97K3fy1721u9lL3vr97KXbdiAvW7DxrKXnrW6DRvLXnrW6jZsLHvpWavbsLHspWetbsPGsmdq2IAQVcPGEpK99XvZy976vexlb/1e9i5tL3vr97KXvfV72cve+r3sZW/9Xvayt37DXrdhY9lLz1rdho1lLz1rdRs2lr30rNVt2Fj20rNWt2Fj2UvPWqqGjSXE1LCxhJgaNpYQU8PGEmKZW6cQU8PGEmJq2FhCTA0bS4ipYWMJMTVsQIiqYWMJJS/7FxUES4mrYWMpcV3qt45rcTVsLCWuho2lxNWwsZS4GjaWElfDxlLiathYSlwNG1Aia9hYSlwNG0uJq2FjKXE1bCwl51PiathYSlwNG0uJq2FjKXE1bCwlroYNKJE1bCwlroaNpcTVsLGUuBo2lpLzKXE1bCwlroaNpcTVsLGUuBo2lhJXw8ZXlImrYePLiath48uJq2Hjy4mrYePLiesG+y8nroaNLye+l3FsDRtfYUWuho0vJ66GjS8nJ3Tiatj4ciLbn8qWkFk+IMKZZdjr5qhgr5ujgr1ujgr2Lm2vm6OCvW6OCva6OSrY6+aoYK+bWT7shTPLsJeetcKZZdhLz1rhzDLspWetcGYZ9tKzVjizDHuqzPIhxJVZhpBujgr2ujkq2OvmqGDv0va6OSrY6+aoYK+bo4K9bo4K9ro5qsNeOLMMe+lZK5xZhr30rBXOLMNeetYKZ5ZhLz1rhTPLsJeetVyZZQhRZZYhRJVZhhBVZhlCLHPrFKLKLEOIKrMMIarMMoSoMssQososH0JcmWUIJS/7V6FOKJFllqFEdkwSx7XIMstQIsssQ4ksswwlsswylMgyy1AiyyxDiSyzfCixZZahRJZZhhJZZhlKZJllKDmfEllmGUpkmWUokWWWoUSWWYYSWWb5UGLLLEOJLLMMJbLMMpTIMstQcj4lsswylMgyy1AiyyxDiSyzDCWyzPKKMpFllpcTWWZ5OZFllpcTWWZ5OfFlAukyy8uJ72UcXWZ5hRXJMsvLiSyzvJyc0Ikss7ycqPanblt9Ejfo28Oo19995WWrv5/rbz433nxuvvfc9Rn0bzxX3nzO3nzuclmPbfv13NiePOdvPlfffK69+Vx/87nx5nPzveeuD12O8w3p6OP6ufLmc/bmc/ubz/mbz9U3n2tvPnf98zL647nZrp8bbz4333vu+uDQN54rbz5nbz63v/nc5c/LLI91NMv1Oro+e/KN59qbz/U3nxtvPjffe+76+MI3nisvnrPr71+zN5/b33zu+udlf6z36dfr/frIwjeea28+1998brz53Hzvub69+dz1z0s7fx/c3P/rwf/7mw+fFEuh7CkUT6HUFEpLofQUykihzAzK9WmDj1NS1v5IWfsjZe2PlLU/Utb+SFn7I2Xtj5S1P1LW/kxZ+zNl7c+UtT9T1v5MWfszZe3PlLU/U9b+TFn7M2XtP/lL5+cxJQdjOZg9B+M5mJqDaTmYnoMZOZicXaDk7AIlZxcoObtAydkFSs4uUHJ2gZKzC5ScXaDk7AIlZxewnF3AcnYBy9kFLGcXsJxdwHJ2AcvZBSxnF7CcXcBydoE9ZxfYc3aBPWcX2HN2gT1nF9hzdoE9ZxfYc3aBPWcX2HN2Ac/ZBTxnF/CcXcBzdgHP2QU8ZxfwnF3Ac3YBz9kFPGcXqDm7QM3ZBWrOLlBzdoGaswvUnF2g5uwCNWcXqDm7QM3ZBVrOLtBydoGWswu0nF2g5ewCLWcXaDm7QMvZBVrOLtBydoGeswvknA8sOQcES84JwZJzRLDknBEsOYcES84pwZJzTLDknBMsOQcFS85JwZJzVLDknBUsOYcFS85pwZJzXLDknBcsOQcGS86JwZJzZLDknBksOYcGS86pwZJzbLDknBssOQcHS87JwZJzdLDknB20nLODlnN20HLODlrO2UHbPAdTczAtB9NzMCMHk7ML5JwdtJyzg5ZzdtByzg5aztlByzk7aDlnBy3n7KDlnB20nLODlnN20HLODlrO2UHLOTtoOWcHLefsoOWcHbScs4OWc3bQcs4OWs7ZQcs5O2g5Zwct5+yg5ZwdtJyzg5ZzdtByzg5aztlByzk7aDlnBy3n7KDlnB20nLODlnN20D5w2q5uj6tkavnXrar+rysCP3DY7huUD5xOq3ZS9vqEYimUPYXiKZSaQvnbQfP7yf7ukx84NfCNn+sPHBr4DqWmUFoKJWVX+8CBgeqPK6lrtSeUmUH5wHGB71BKCsVSKB9Y+/s4KfsTiqdQagqlpVB6CmWkUGbG5PzAIYHvUFJ+O5spv53NlN/OPnBA4DuUlN/OPnA84DuUnkIZKZSMtb9vWwqlpFAshbKnUDyFUlMoLYXSUygjhZKy9kvK2i8pa7+krP2SsvZLytovKWu/pKz9krL2S8raLylr31LWvqWsfUtZ+5ay9i1l7VvK2reUtW/ha7+Uf64r2Ko/yi9Kbf9VnPq/jFEfb5TGKH/+aCnjlDf716sBO30Gmc8k87n+1eYnhQqbkLEJ7WxCziZU2YQamxDbPl3YNurCtlMb205tbDu1se3UxrZTG9tObWw7tQXu1CejJzDu76dzK78+O/ft/hd2kgntG5tQYRMyNqGdTcjZhCqbUGMT6mxCbDv1zrZTO9tO7Ww7tbPt1M62UzvbTu1sO7Wz7dQeuFOfjJHAmPGMuiUwSgLDEhh7AsMTGDWB0RIYCeu83f/ZLdu2Pz68FbukWArl/ve9mP/efdvlC4Q2M/5f+pZCSfnud/8Apc2TMtolpaZQWgqlp1BGCmVmUMYn1ksrvyn9klJSKJZC2VMonkKpKZSWQukplJFCmRmU+YG1X4o/Plz88jelWVIolkLZUyieQqkplJZC6SmUkUL5wNov3U7KGFeUJ63Wn8eUHIxn/BOmbDUH03IwPQXzgROB38KUHIzlYPYcTMK62a/P8Pbzsd5fvNv17ZHXdat//ug494q5/T58fLwEfuON8X592FdBfKqKX28WEuZF1txkzXdZc5c1r7LmTdZcdoIW2RFaZGeoyc5Qk52hJjtDTXaGmuwMNdkZamEz9CT0cMLtmVQff7r16peEGU3Yt3BCCSdYOOH23jYei8fHfknwcEINJ7Rwwt01XbfHC6m6jUvCCCfMaIJv4YQSTrj701rt8dFq14QWTrj7nW7749hFq3ZFqFs4IfyrVG+v6fMlc639kjDCCTOa0LZwQgknWDhhDyd4OKGGE1o44YNrurVLwggn3F/T587XLwn99po+d+9nhBJOsHDC3TXdzgOybZuXBA8n1HBCCyf0cMLtNT3rg1C2S8KMJowtnFDCCRZO2MMJHk6o4YQWTugfJFyu6THCCffX9OMoXbNLwry9ps/Xoc8IJZxg4YTbc/rVv0WnhxNqOKGFE3o4YYQTwt+cPDm3+jGEPTmtVtp+Htxt9cWfXIpvj82veClXkCeHIv+O4uOk9Fd/BfrcpUb27KyTjL1J2+/S9i5tX6Xtm7R9l7Yf0vZT2d6kZ61Jz1qTnrUmPWtNetaa9Kw16Vlr0rPWpGetsczah9DOMj5PoeSJ+MFbyOzZqTcZ+13a3qXtq7R9k7bv0vZD2n4q2/smbS89a1161rr0rHXpWevSs9alZ61Lz1qXnrUuPWsry6w9hVjG5ynEMhFPIZYhdwqxzK1TiGUUnUIs0+UUYhkYpxDLDDiFWLb1h1Bj26lb8rJ/df+zPUuU/KxS8g/2q8vF7FlW4ke/St34lHY+pZat9OfbsO1ZVuJnlQaf0qRTGhufUuFTSt+X/nwHtT1LlPyskvMpVT6lxqfU+ZQGn9KkU5obn1LhU8revV/cVW7PskM/q+R8SpVPqfEpdT6lwac06ZSeVQn8rFP2/v2ipGA5GaHTTujU6F4yPetK+FknvpdxZZt8Ttl5v2857YROTuhUCZ3I9qd9E23YOMQ1rwc/xDVvBz/ERRs2YK55OzjMNW8Hh7nm7eAwd1lzzdvBYa7ZsAFz2Qkq2rABc9kZKtqwAXPZGSrasAFz2Rkq2rABc9kZGtywAUIPJ8Q2bIAwownBDRsglHCChRNiGzZA8HBCDSe0cEJswwYII5wwownBDRsglHBCbMMGCC2cEHtP5EEIbtgAIfyrFNywAcIIJ8xoQnDDBgglnGDhhD2c4OGEGk5o4YTYhg0QRjghtmEDf86KbdgAoYQTLJwQ27ABgocTajihhRN6OCG2YQOEGU0IbtgAoYQTLJywhxM8nFDDCS2cENuwAcIIJ8Q2bOAQRGzDBgglnGDhhNiGDRA8nFDDCS2c0MMJI5wQ/uYkumFjnwkNGwdEuGED9rq3fsNe99Zv2Ove+g17l7bXvfUb9rq3fsNe99Zv2Ove+g173YaNw164YQP20rNWuGED9tKzVrhhA/bSs1a4YQP20rNWuGED9lQNG4cQV8MGhHRv/Ya97q3fsNe99Rv2Lm2ve+s37HVv/Ya97q3fsNe99Rv2urd+H/bCDRuwl561wg0bsJeetcING7CXnrXCDRuwl561wg0bsJeetVwNGxCiatiAEFXDBoSoGjYgxDK3TiGqhg0IUTVsQIiqYQNCVA0bEKJq2DiEuBo2IJS87F9VEECJrGEDSmSX+uG4FlnDBpTIGjagRNawASWyhg0okTVsQImsYQNKZA0bhxJbwwaUyBo2oETWsAElsoYNKDmfElnDBpTIGjagRNawASWyhg0okTVsHEpsDRtQImvYgBJZwwaUyBo2oOR8SmQNG1Aia9iAElnDBpTIGjagRNawsaJMZA0by4msYWM5kTVsLCeyho3lxHaD/eRr2FhOfC/j6Bo2VliRrGFjOZE1bCwnJ3Qia9hYTmT7k7eEzPIBEc4sw143RwV73RwV7HVzVLB3aXvdHBXsdXNUsNfNUcFeN0cFe93M8mEvnFmGvfSsFc4sw1561gpnlmEvPWuFM8uwl561wpll2FNllg8hrswyhHRzVLDXzVHBXjdHBXuXttfNUcFeN0cFe90cFex1c1Sw181RHfbCmWXYS89a4cwy7KVnrXBmGfbSs1Y4swx76VkrnFmGvfSs5cosQ4gqswwhqswyhKgyyxBimVunEFVmGUJUmWUIUWWWIUSVWYYQVWb5EOLKLEMoedm/CnVCiSyzDCWyY5I4rkWWWYYSWWYZSmSZZSiRZZahRJZZhhJZZhlKZJnlQ4ktswwlsswylMgyy1AiyyxDyfmUyDLLUCLLLEOJLLMMJbLMMpTIMsuHEltmGUpkmWUokWWWoUSWWYaS8ymRZZahRJZZhhJZZhlKZJllKJFllleUiSyzvJzIMsvLiSyzvJzIMsvLiS8TSJdZXk58L+PoMssrrEiWWV5OZJnl5eSETmSZ5eVEtj9V/+du37VvDx23Fzbj3MDn5r8/am/8xf4QH6riU1W8bLLmRdbcZM13WXOXNa+y5k3WXHaCFtkRWmRnqMnOUJOdoSY7Q012hprsDDXZGWphM/Qk9HDC7ZlUH6eHvPolYUYT9i2cUMIJFk64vbeNx+LxsV8SPJxQwwktnHB3Tdet//po3cYlYYQTZjTBt3BCCSfc/Wmt9vhotWtCCyfc/U63/XHWrVW7ItQtnBD+Vaq317SfP0u1XxJGOGFGE9oWTijhBAsn7OEEDyfUcEILJ3xwTbd2SRjhhPtr+tz5+iWh317T5+79jFDCCRZOuLum25nRaNu8JHg4oYYTWjihhxNur+n5uJC6le2SMKMJYwsnlHCChRP2cIKHE2o4oYUT+gcJl2t6jHDC/TX9ONHS7JIwb6/p83XoM0IJJ1g44facfvVv0enhhBpOaOGEHk4Y4YTwNydPjnN/DNE8oWGjuXLDRnPlho3myg0bzZUbNporN2w0V27YaK7csNFcuWGjuXLDRnPlho3myg0bzZUbNporN2w0V27YaK7csNFcuWGjuXLDRnPlho3myg0bzckaNpqTNWw0V27YaK7csNFcuWGjuXLDRnPlho3myg0bzZUbNporN2w0V27YaK7csNFcuWED9tKzVrhhA/bSs1a4YaO5csMG7KVnrXDDRnPlho3mZA0bEKJq2IAQVcMGhKgaNiDEMrdOIaqGjeZkDRvNyRo2mpM1bDQna9hoTtaw0ZyuYaM5XcNGc7qGjeZ0DRvN6Ro2mtM1bDSna9hoTtew0ZyuYaM5XcNGc7qGjeZ0DRvN6Ro2mtM1bDSna9hoTtew0ZyuYaM5XcNGc7qGjeZ0DRvN6Ro2mtM1bDSna9hoTtew0ZyuYaM5XcNGc7qGjeZ0DRvN6Ro2mtM1bDTna9hYTmQNG8uJrGFjOZE1bCwnshvslxNZw8Zy4nsZR9ewscKKZA0by4msYWM5OaETWcPGciLbn3oRbdg4xDWvBz/ENW8HP8RFGzZgrnk7OMw1bweHuebt4DB3WXPN28FhrtmwAXPZCSrasAFz2Rkq2rABc9kZKtqwAXPZGSrasAFz2Rka3LABQg8nxDZsgDCjCcENGyCUcIKFE2IbNkDwcEINJ7RwQmzDBggjnDCjCcENGyCUcEJswwYILZwQe0/kQQhu2AAh/KsU3LABwggnzGhCcMMGCCWcYOGEPZzg4YQaTmjhhNiGDRBGOCG2YQN/zopt2AChhBMsnBDbsAGChxNqOKGFE3o4IbZhA4QZTQhu2AChhBMsnLCHEzycUMMJLZwQ27ABwggnxDZs4BBEbMMGCCWcYOGE2IYNEDycUMMJLZzQwwkjnBD+5iS6YWNsCQ0bB0S4YQP2urd+w1731m/Y6976DXuXtte99Rv2urd+w1731m/Y6976DXvdho3DXrhhA/bSs1a4YQP20rNWuGED9tKzVrhhA/bSs1a4YQP2VA0bhxBXwwaEdG/9hr3urd+w1731G/Yuba976zfsdW/9hr3urd+w1731G/a6t34f9sING7CXnrXCDRuwl561wg0bsJeetcING7CXnrXCDRuwl561XA0bEKJq2IAQVcMGhKgaNiDEMrdOIaqGDQhRNWxAiKphA0JUDRsQomrYOIS4GjYglLzsX1UQQImsYQNKZJf64bgWWcMGlMgaNqBE1rABJbKGDSiRNWxAiaxhA0pkDRuHElvDBpTIGjagRNawASWyhg0oOZ8SWcMGlMgaNqBE1rABJbKGDSiRNWwcSmwNG1Aia9iAElnDBpTIGjag5HxKZA0bUCJr2IASWcMGlMgaNqBE1rCxokxkDRvLiaxhYzmRNWwsJ7KGjeVEdoP9ciJr2FhOfC/j6Bo2VliRrGFjOZE1bCwnJ3Qia9hYTmz7U8/ILHfpzHKXzix36cxyl84sd+nMcpfOLHfpzHKXzix36cxyl84sd+nMcpfOLHfpzHKXzix36cxyl84sd+nMcpfOLHfpzHJnyyx3tsxyl84sd+nMcpfOLHfpzHKXzix36cxyl84sd+nMcpfOLHfpzHKXzix36cxyl84sd+nMcpfOLHfpzHKXzix36cxyl84sd7bMcmfLLHe2zHJnyyx3tsxyZ8ssd7bMcmfLLHe2zHJnyyx3tsxy58ssd77McufLLHe+zHLnyyx3vsxy58ssd77McufLLHe+zHLnyyx3vsxy58ssd77McufLLHe+zHLnyyx3vsxy58ssd77McufLLHe+zHLnyyx3vsxy58ssd77McufLLHe+zHLnyyx3vsxyJ8wsd8LMcifMLHfCzHInzCx3wsxyJ8wsd8LMcifMLHfCzHInzCx3wsxy58ssz/kks1y9P56rrf8Z8sFD7IfPIPOZZD5P4t8/KFTYhIxNaGcTcjahyibU2ITY9unCtlEXtp3a2HZqY9upjW2nNrad2th2amPbqS1wpz4ZPYFxfz/94IlYCE0yoX1jEypsQsYmtLMJOZtQZRNqbEKdTYhtp97Zdmpn26mdbad2tp3a2XZqZ9upnW2ndrad2gN36pMxEhgznlG3BEZJYFgCY09geAKjJjBaAiNhnbf7P7uvggSgWArl/vf9G3/IazPj/6VvKZSU7373D1D+fHQelJpCaSmUnkIZKZSZQRmfWC9/PuALSkmhWAplT6F4CqWmUFoKpadQRgplZlDmB9b+iwOroJQUiqVQ9hSKp1BqCqWlUHoKZaRQPrD2XxxFXse0thxMycF4xj9hylZzMC0H01MwHzgR+C1MycFYDmbPwYSvm30r12d4+/lY7y/e7fr2OFLs9uJE8Tj3irn5f/71Eviv3xhDfKiKT1Xx681CwrzImpus+S5r7rLmVda8yZrLTtAiO0KL7Aw12RlqsjPUZGeoyc5Qk52hJjtDLWyGnoQeTrg9k+rjT7de/ZIwown7Fk4o4QQLJ9ze28Zj8fjYLwkeTqjhhBZOuLum6/Z4IVW3cUkY4YQZTfAtnFDCCXd/Wqs9PlrtmtDCCXe/021/HLto1a4IdQsnhH+V6u01fb5krrVfEkY4YUYT2hZOKOEECyfs4QQPJ9RwQgsnfHBNt3ZJGOGE+2v63Pn6JaHfXtPn7v2MUMIJFk64u6bbeUC2bfOS4OGEGk5o4YQeTri9pmd9EMp2SZjRhLGFE0o4wcIJezjBwwk1nNDCCf2DhMs1PUY44f6afhyla3ZJmLfX9Pk69BmhhBMsnHB7Tr/6t+j0cEINJ7RwQg8njHBC+JuTJ+dWP4YoT06r/eUdmNtj8yteyhWkJN8s/blLjZZ9kbY3aftd2t6l7au0fZO279L2Q9p+Ktub9Kw16Vlr0rPWpGetSc9ak561Jj1rTXrWmvSsNZZZ+xDaWcbnKZQ8ET93C9myN2n7Xdrepe2rtH2Ttu/S9kPafirb+yZtLz1rXXrWuvSsdelZ69Kz1qVnrUvPWpeetS49ayvLrD2FWMbnKcQyEU8hliF3CrHMrVOIZRSdQizT5RRiGRinEMsMOIVYtvWHUGPbqVvysn9x//NSqnxKXMXc67hWofsqdeNT2vmUssum/3wb9lLqfEqDT2nSKY2NT6nwKaXvS3+8g3op7XxKzqdU+ZQan1LnUxp8SpNOaW58SoVPKXv3/vNd5Utp51NyPqXKp9T4lDqf0uBTmnRKz6oEftYpe//+c0nBl5MROu2ETo3uJdOzroSfdeJ7GVe2yeeUnff7ltNO6OSETpXQiW1/GqING4e45vXgh7jm7eCHuGjDBsw1bweHuebt4DDXvB0c5i5rrnk7OMw1GzZgLjtBRRs2YC47Q0UbNmAuO0NFGzZgLjtDRRs2YC47Q4MbNkDo4YTYhg0QZjQhuGEDhBJOsHBCbMMGCB5OqOGEFk6IbdgAYYQTZjQhuGEDhBJOiG3YAKGFE2LviTwIwQ0bIIR/lYIbNkAY4YQZTQhu2AChhBMsnLCHEzycUMMJLZwQ27ABwggnxDZs4M9ZsQ0bIJRwgoUTYhs2QPBwQg0ntHBCDyfENmyAMKMJwQ0bIJRwgoUT9nCChxNqOKGFE2IbNkAY4YTYhg0cgoht2AChhBMsnBDbsAGChxNqOKGFE3o4YYQTwt+cRDdsWE9o2Dggwg0bsNe99Rv2urd+w1731m/Yu7S97q3fsNe99Rv2urd+w1731m/Y6zZsHPbCDRuwl561wg0bsJeetcING7CXnrXCDRuwl561wg0bsKdq2DiEuBo2IKR76zfsdW/9hr3urd+wd2l73Vu/Ya976zfsdW/9hr3urd+w1731+7AXbtiAvfSsFW7YgL30rBVu2IC99KwVbtiAvfSsFW7YgL30rOVq2IAQVcMGhKgaNiBE1bABIZa5dQpRNWxAiKphA0JUDRsQomrYgBBVw8YhxNWwAaHkZf+qggBKZA0bUCK71A/HtcgaNqBE1rABJbKGDSiRNWxAiaxhA0pkDRtQImvYOJTYGjagRNawASWyhg0okTVsQMn5lMgaNqBE1rABJbKGDSiRNWxAiaxh41Bia9iAElnDBpTIGjagRNawASXnUyJr2IASWcMGlMgaNqBE1rABJbKGjRVlImvYWE5kDRvLiaxhYzmRNWwsJ7Ib7JcTWcPGcuJ7GUfXsLHCimQNG8uJrGFjOTmhE1nDxnIi2592T8gsHxDhzDLsdXNUsNfNUcFeN0cFe5e2181RwV43RwV73RwV7HVzVLDXzSwf9sKZZdhLz1rhzDLspWetcGYZ9tKzVjizDHvpWSucWYY9VWb5EOLKLENIN0cFe90cFex1c1Swd2l73RwV7HVzVLDXzVHBXjdHBXvdHNVhL5xZhr30rBXOLMNeetYKZ5ZhLz1rhTPLsJeetcKZZdhLz1quzDKEqDLLEKLKLEOIKrMMIZa5dQpRZZYhRJVZhhBVZhlCVJllCFFllg8hrswyhJKX/atQJ5TIMstQIjsmieNaZJllKJFllqFEllmGEllmGUpkmWUokWWWoUSWWT6U2DLLUCLLLEOJLLMMJbLMMpScT4ksswwlsswylMgyy1AiyyxDiSyzfCixZZahRJZZhhJZZhlKZJllKDmfEllmGUpkmWUokWWWoUSWWYYSWWZ5RZnIMsvLiSyzvJzIMsvLiSyzvJz4MoF0meXlxPcyji6zvMKKZJnl5USWWV5OTuhEllleTmT7k9s/d/uufXvouL2wGecGPjf//VF74y/2h/hQFZ+q4mWTNS+y5iZrvsuau6x5lTVvsuayE7TIjtAiO0NNdoaa7Aw12RlqsjPUZGeoyc5QC5uhJ6GHE27PpPo4PeTVLwkzmrBv4YQSTrBwwu29bTwWj4/9kuDhhBpOaOGEu2u6bv3XR+s2LgkjnDCjCb6FE0o44e5Pa7XHR6tdE1o44e53uu2Ps26t2hWhbuGE8K9Svb2m/fxZqv2SMMIJM5rQtnBCCSdYOGEPJ3g4oYYTWjjhg2u6tUvCCCfcX9PnztcvCf32mj5372eEEk6wcMLdNd3OjEbb5iXBwwk1nNDCCT2ccHtNz8eF1K1sl4QZTRhbOKGEEyycsIcTPJxQwwktnNA/SLhc02OEE+6v6ceJlmaXhHl7TZ+vQ58RSjjBwgm35/Srf4tODyfUcEILJ/RwwggnhL85eXKc+2OIagkNG9WUGzaqKTdsVFNu2Kim3LBRTblho5pyw0Y15YaNasoNG9WUGzaqKTdsVFNu2Kim3LBRTblho5pyw0Y15YaNasoNG9WUGzaqKTdsVFNu2KhG1rBRjaxho5pyw0Y15YaNasoNG9WUGzaqKTdsVFNu2Kim3LBRTblho5pyw0Y15YaNasoNG7CXnrXCDRuwl561wg0b1ZQbNmAvPWuFGzaqKTdsVCNr2IAQVcMGhKgaNiBE1bABIZa5dQpRNWxUI2vYqEbWsFGNrGGjGlnDRjWyho1qdA0b1egaNqrRNWxUo2vYqEbXsFGNrmGjGl3DRjW6ho1qdA0b1egaNqrRNWxUo2vYqEbXsFGNrmGjGl3DRjW6ho1qdA0b1egaNqrRNWxUo2vYqEbXsFGNrmGjGl3DRjW6ho1qdA0b1egaNqrRNWxUo2vYqEbXsFGNrmGjGl/DxnIia9hYTmQNG8uJrGFjOZHdYL+cyBo2lhPfyzi6ho0VViRr2FhOZA0by8kJncgaNpYT2/40RRs2DnHN68EPcc3bwQ9x0YYNmGveDg5zzdvBYa55OzjMXdZc83ZwmGs2bMBcdoKKNmzAXHaGijZswFx2hoo2bMBcdoaKNmzAXHaGBjdsgNDDCbENGyDMaEJwwwYIJZxg4YTYhg0QPJxQwwktnBDbsAHCCCfMaEJwwwYIJZwQ27ABQgsnxN4TeRCCGzZACP8qBTdsgDDCCTOaENywAUIJJ1g4YQ8neDihhhNaOCG2YQOEEU6IbdjAn7NiGzZAKOEECyfENmyA4OGEGk5o4YQeToht2ABhRhOCGzZAKOEECyfs4QQPJ9RwQgsnxDZsgDDCCbENGzgEEduwAUIJJ1g4IbZhAwQPJ9RwQgsn9HDCCCeEvzmJbthoI6Fh44AIN2zAXvfWb9jr3voNe91bv2Hv0va6t37DXvfWb9jr3voNe91bv2Gv27Bx2As3bMBeetYKN2zAXnrWCjdswF561go3bMBeetYKN2zAnqph4xDiatiAkO6t37DXvfUb9rq3fsPepe11b/2Gve6t37DXvfUb9rq3fsNe99bvw164YQP20rNWuGED9tKzVrhhA/bSs1a4YQP20rNWuGED9tKzlqthA0JUDRsQomrYgBBVwwaEWObWKUTVsAEhqoYNCFE1bECIqmEDQlQNG4cQV8MGhJKX/asKAiiRNWxAiexSPxzXImvYgBJZwwaUyBo2oETWsAElsoYNKJE1bECJrGHjUGJr2IASWcMGlMgaNqBE1rABJedTImvYgBJZwwaUyBo2oETWsAElsoaNQ4mtYQNKZA0bUCJr2IASWcMGlJxPiaxhA0pkDRtQImvYgBJZwwaUyBo2VpSJrGFjOZE1bCwnsoaN5UTWsLGcyG6wX05kDRvLie9lHF3DxgorkjVsLCeyho3l5IROZA0by4lsf+o1IbN8QIQzy7DXzVHBXjdHBXvdHBXsXdpeN0cFe90cFex1c1Sw181RwV43s3zYC2eWYS89a4Uzy7CXnrXCmWXYS89a4cwy7KVnrXBmGfZUmeVDiCuzDCHdHBXsdXNUsNfNUcHepe11c1Sw181RwV43RwV73RwV7HVzVIe9cGYZ9tKzVjizDHvpWSucWYa99KwVzizDXnrWCmeWYS89a7kyyxCiyixDiCqzDCGqzDKEWObWKUSVWYYQVWYZQlSZZQhRZZYhRJVZPoS4MssQSl72r0KdUCLLLEOJ7JgkjmuRZZahRJZZhhJZZhlKZJllKJFllqFEllmGEllm+VBiyyxDiSyzDCWyzDKUyDLLUHI+JbLMMpTIMstQIsssQ4ksswwlsszyocSWWYYSWWYZSmSZZSiRZZah5HxKZJllKJFllqFEllmGEllmGUpkmeUVZSLLLC8nsszyciLLLC8nsszycuLLBNJllpcT38s4uszyCiuSZZaXE1lmeTk5oRNZZnk5ce1P7WncoG8Po15/95WXrf5+rr/53Hjzufnec9dn0L/xXHnzOXvzuctlPbbt13Nje/Kcv/lcffO59uZz/c3nxpvPzfeeuz50Oc43pKOP6+fKm8/Zm8/tbz7nbz5X33yuvfnc9c/L6I/nZrt+brz53HzvueuDQ994rrz5nL353P7mc5c/L7M81tEs1+vo+uzJN55rbz7X33xuvPncfO+56+ML33iuvHjOrr9/zd58bn/zueufl/2x3qdfr/frIwvfeK69+Vx/87nx5nPzvef69uZz1z8v7fx9cHP/rwf/728+fFIshbKnUDyFUlMoLYXSUygjhTIzKNenDT5OSVn7I2Xtj5S1P1LW/khZ+yNl7Y+UtT9S1v5IWfszZe3PlLU/U9b+TFn7M2Xtz5S1P1PW/kxZ+zNl7c+Utf/kL52fx5QcjOVg9hyM52BqDqblYHoOZuRgcnaBkrMLlJxdoOTsAiVnFyg5u0DJ2QVKzi5QcnaBkrMLlJxdwHJ2AcvZBSxnF7CcXcBydgHL2QUsZxewnF3AcnYBy9kF9pxdYM/ZBfacXWDP2QX2nF1gz9kF9pxdYM/ZBfacXWDP2QU8ZxfwnF3Ac3YBz9kFPGcX8JxdwHN2Ac/ZBTxnF/CcXaDm7AI1ZxeoObtAzdkFas4uUHN2gZqzC9ScXaDm7AI1ZxdoObtAy9kFWs4u0HJ2gZazC7ScXaDl7AItZxdoObtAy9kFes4ukHM+sOQcECw5JwRLzhHBknNGsOQcEiw5pwRLzjHBknNOsOQcFCw5JwVLzlHBknNWsOQcFiw5pwVLznHBknNesOQcGCw5JwZLzpHBknNmsOQcGiw5pwZLzrHBknNusOQcHCw5JwdLztHBknN20HLODlrO2UHLOTtoOWcHbfMcTM3BtBxMz8GMHEzOLpBzdtByzg5aztlByzk7aDlnBy3n7KDlnB20nLODlnN20HLODlrO2UHLOTtoOWcHLefsoOWcHbScs4OWc3bQcs4OWs7ZQcs5O2g5Zwct5+yg5ZwdtJyzg5ZzdtByzg5aztlByzk7aDlnBy3n7KDlnB20nLODlnN20HLODlrO2UH7wGm7uj2ukqnlX7eq+r+uCPzAYbtvUD5wOq3aSdnrE4qlUPYUiqdQagrlbwfN7yf7u09+4NTAN36uP3Bo4DuUmkJpKZSUXe0DBwaqP66krtWeUGYG5QPHBb5DKSkUS6F8YO3v46TsTyieQqkplJZC6SmUkUKZGZPzA4cEvkNJ+e1spvx2NlN+O/vAAYHvUFJ+O/vA8YDvUHoKZaRQMtb+vm0plJJCsRTKnkLxFEpNobQUSk+hjBRKytovKWu/pKz9krL2S8raLylrv6Ss/ZKy9kvK2i8pa7+krH1LWfuWsvYtZe1bytq3lLVvKWvfUta+ha/9Uf65rmCr/ii/KLX9V3Hq/zJGfbxRGqP8+aOljFPe7F+vBuz0GWQ+k8zn+lebnxQqbELGJrSzCTmbUGUTamxCbPt0YduoC9tObWw7tbHt1Ma2UxvbTm1sO7Wx7dQWuFOfjJ7AuL+fzq38+uzct/tf2EkmtG9sQoVNyNiEdjYhZxOqbEKNTaizCbHt1DvbTu1sO7Wz7dTOtlM7207tbDu1s+3UzrZTe+BOfTJGAmPGM+qWwCgJDEtg7AkMT2DUBEZLYCSs83b/Z7ds2/748FbskmIplPvf92L+e/dtly8Q2sz4f+lbCiXlu9/9A5Q2T8pol5SaQmkplJ5CGSmUmUEZn1gvrfym9EtKSaFYCmVPoXgKpaZQWgqlp1BGCmVmUOYH1n4p/vhw8cvflGZJoVgKZU+heAqlplBaCqWnUEYK5QNrv3Q7KWNcUZ60Wn8eU3IwnvFPmLLVHEzLwfQUzAdOBH4LU3IwloPZczAJ62a/PsPbz8d6f/Fu17dHXtet/vmj49wr5vb78PHxEviNN8b79WFfBfGpKn69WUiYF1lzkzXfZc1d1rzKmjdZc9kJWmRHaJGdoSY7Q012hprsDDXZGWqyM9RkZ6iFzdCT0MMJt2dSffzp1qtfEmY0Yd/CCSWcYOGE23vbeCweH/slwcMJNZzQwgl313TdHi+k6jYuCSOcMKMJvoUTSjjh7k9rtcdHq10TWjjh7ne67Y9jF63aFaFu4YTwr1K9vabPl8y19kvCCCfMaELbwgklnGDhhD2c4OGEGk5o4YQPrunWLgkjnHB/TZ87X78k9Ntr+ty9nxFKOMHCCXfXdDsPyLZtXhI8nFDDCS2c0MMJt9f0rA9C2S4JM5owtnBCCSdYOGEPJ3g4oYYTWjihf5BwuabHCCfcX9OPo3TNLgnz9po+X4c+I5RwgoUTbs/pV/8WnR5OqOGEFk7o4YQRTgh/c/Lk3OrHEPPJabXS9vPgbqsv/uRSfHtsfsVLuYI8ORT5dxQfJ6W/+ivQ5y41ms/OOsnYm7T9Lm3v0vZV2r5J23dp+yFtP5XtTXrWmvSsNelZa9Kz1qRnrUnPWpOetSY9a0161hrLrH0I7Szj8xRKnogfvIVsPjv1JmO/S9u7tH2Vtm/S9l3afkjbT2V736TtpWetS89al561Lj1rXXrWuvSsdelZ69Kz1qVnbWWZtacQy/g8hVgm4inEMuROIZa5dQqxjKJTiGW6nEIsA+MUYpkBpxDLtv4Qamw7dUte9q/uf57PEiU/q5T8g/3qcrH5LCvxo1+lbnxKO59Sy1b6823Y81lW4meVBp/SpFMaG59S4VNK35f+fAf1fJYo+Vkl51OqfEqNT6nzKQ0+pUmnNDc+pcKnlL17v7irfD7LDv2skvMpVT6lxqfU+ZQGn9KkU3pWJfCzTtn794uSguVkhE47oVOje8n0rCvhZ534XsaVbfI5Zef9vuW0Ezo5oVMldOLan/q2aTZsQFzyenCIS94ODnHNho1lLnk7+DKXvB18mUveDr7MXdZc8nbwZS7ZsLHMZSeoZsPGMpedoZoNG8tcdoZqNmwsc9kZqtmwscxlZ2hsw8Yi9HBCaMPGIsxoQmzDxiKUcIKFE0IbNhbBwwk1nNDCCaENG4swwgkzmhDbsLEIJZwQ2rCxCC2cEHpPJAixDRuLEP5Vim3YWIQRTpjRhNiGjUUo4QQLJ+zhBA8n1HBCCyeENmwswggnhDZsrD9nhTZsLEIJJ1g4IbRhYxE8nFDDCS2c0MMJoQ0bizCjCbENG4tQwgkWTtjDCR5OqOGEFk4IbdhYhBFOCG3YWIcgQhs2FqGEEyycENqwsQgeTqjhhBZO6OGEEU4If3MS3LDRtxnfsAGIbsPGspe99XvZy976vexlb/1e9i5tL3vr97KXvfV72cve+r3sZW/9XvayDRuw123YWPbSs1a3YWPZS89a3YaNZS89a3UbNpa99KzVbdhY9kwNGxCiathYQrK3fi972Vu/l73srd/L3qXtZW/9Xvayt34ve9lbv5e97K3fy1721m/Y6zZsLHvpWavbsLHspWetbsPGspeetboNG8teetbqNmwse+lZS9WwsYSYGjaWEFPDxhJiathYQixz6xRiathYQkwNG0uIqWFjCTE1bCwhpoYNCFE1bCyh5GX/ooJgKXE1bCwlrkv91nEtroaNpcTVsLGUuBo2lhJXw8ZS4mrYWEpcDRtLiathA0pkDRtLiathYylxNWwsJa6GjaXkfEpcDRtLiathYylxNWwsJa6GjaXE1bABJbKGjaXE1bCxlLgaNpYSV8PGUnI+Ja6GjaXE1bCxlLgaNpYSV8PGUuJq2PiKMnE1bHw5cTVsfDlxNWx8OXE1bHw5sd1gP+kaNr6c+F7GsTVsfIUVuRo2vpy4Gja+nJzQiath48uJbH8qLSGzfECEM8uw181RwV43RwV73RwV7F3aXjdHBXvdHBXsdXNUsNfNUcFeN7N82AtnlmEvPWuFM8uwl561wpll2EvPWuHMMuylZ61wZhn2VJnlQ4grswwh3RwV7HVzVLDXzVHB3qXtdXNUsNfNUcFeN0cFe90cFex1c1SHvXBmGfbSs1Y4swx76VkrnFmGvfSsFc4sw1561gpnlmEvPWu5MssQososQ4gqswwhqswyhFjm1ilElVmGEFVmGUJUmWUIUWWWIUSVWT6EuDLLEEpe9q9CnVAiyyxDieyYJI5rkWWWoUSWWYYSWWYZSmSZZSiRZZahRJZZhhJZZvlQYsssQ4ksswwlsswylMgyy1ByPiWyzDKUyDLLUCLLLEOJLLMMJbLM8qHEllmGEllmGUpkmWUokWWWoeR8SmSZZSiRZZahRJZZhhJZZhlKZJnlFWUiyywvJ7LM8nIiyywvJ7LM8nLiywTSZZaXE9/LOLrM8gorkmWWlxNZZnk5OaETWWZ5OZHtT+b/3O279u2h4/bCZpwb+Nz890ftjb/YH+JDVXyqipdN1rzImpus+S5r7rLmVda8yZrLTtAiO0KL7Aw12RlqsjPUZGeoyc5Qk52hJjtDLWyGnoQeTrg9k+rj9JBXvyTMaMK+hRNKOMHCCbf3tvFYPD72S4KHE2o4oYUT7q7puvVfH63buCSMcMKMJvgWTijhhLs/rdUeH612TWjhhLvf6bY/zrq1aleEuoUTwr9K9faa9vNnqfZLwggnzGhC28IJJZxg4YQ9nODhhBpOaOGED67p1i4JI5xwf02fO1+/JPTba/rcvZ8RSjjBwgl313Q7Mxptm5cEDyfUcEILJ/Rwwu01PR8XUreyXRJmNGFs4YQSTrBwwh5O8HBCDSe0cEL/IOFyTY8RTri/ph8nWppdEubtNX2+Dn1GKOEECyfcntOv/i06PZxQwwktnNDDCSOcEP7m5Mlx7o8hdk9o2NhduWFjd+WGjd2VGzZ2V27Y2F25YWN35YaN3ZUbNnZXbtjYXblhY3flho3dlRs2dldu2NhduWFjd+WGjd2VGzZ2V27Y2F25YWN35YaN3ZUbNnYna9jYnaxhY3flho3dlRs2dldu2NhduWFjd+WGjd2VGzZ2V27Y2F25YWN35YaN3ZUbNnZXbtiAvfSsFW7YgL30rBVu2NhduWED9tKzVrhhY3flho3dyRo2IETVsAEhqoYNCFE1bECIZW6dQlQNG7uTNWzsTtawsTtZw8buZA0bu5M1bOxO17CxO13Dxu50DRu70zVs7E7XsLE7XcPG7nQNG7vTNWzsTtewsTtdw8budA0bu9M1bOxO17CxO13Dxu50DRu70zVs7E7XsLE7XcPG7nQNG7vTNWzsTtewsTtdw8budA0bu9M1bOxO17CxO13Dxu50DRu70zVs7E7XsLE7XcPG7nwNG8uJrGFjOZE1bCwnsoaN5UR2g/1yImvYWE58L+PoGjZWWJGsYWM5kTVsLCcndCJr2FhOZPuTF9GGjUNc83rwQ1zzdvBDXLRhA+aat4PDXPN2cJhr3g4Oc5c117wdHOaaDRswl52gog0bMJedoaINGzCXnaGiDRswl52hog0bMJedocENGyD0cEJswwYIM5oQ3LABQgknWDghtmEDBA8n1HBCCyfENmyAMMIJM5oQ3LABQgknxDZsgNDCCbH3RB6E4IYNEMK/SsENGyCMcMKMJgQ3bIBQwgkWTtjDCR5OqOGEFk6IbdgAYYQTYhs28Oes2IYNEEo4wcIJsQ0bIHg4oYYTWjihhxNiGzZAmNGE4IYNEEo4wcIJezjBwwk1nNDCCbENGyCMcEJswwYOQcQ2bIBQwgkWToht2ADBwwk1nNDCCT2cMMIJ4W9Oohs26pbQsHFAhBs2YK976zfsdW/9hr3urd+wd2l73Vu/Ya976zfsdW/9hr3urd+w123YOOyFGzZgLz1rhRs2YC89a4UbNmAvPWuFGzZgLz1rhRs2YE/VsHEIcTVsQEj31m/Y6976DXvdW79h79L2urd+w1731m/Y6976DXvdW79hr3vr92Ev3LABe+lZK9ywAXvpWSvcsAF76Vkr3LABe+lZK9ywAXvpWcvVsAEhqoYNCFE1bECIqmEDQixz6xSiatiAEFXDBoSoGjYgRNWwASGqho1DiKthA0LJy/5VBQGUyBo2oER2qR+Oa5E1bECJrGEDSmQNG1Aia9iAElnDBpTIGjagRNawcSixNWxAiaxhA0pkDRtQImvYgJLzKZE1bECJrGEDSmQNG1Aia9iAElnDxqHE1rABJbKGDSiRNWxAiaxhA0rOp0TWsAElsoYNKJE1bECJrGEDSmQNGyvKRNawsZzIGjaWE1nDxnIia9hYTmQ32C8nsoaN5cT3Mo6uYWOFFckaNpYTWcPGcnJCJ7KGjeXEtj/1jMxyl84sd+nMcpfOLHfpzHKXzix36cxyl84sd+nMcpfOLHfpzHKXzix36cxyl84sd+nMcpfOLHfpzHKXzix36cxyl84sd7bMcmfLLHfpzHKXzix36cxyl84sd+nMcpfOLHfpzHKXzix36cxyl84sd+nMcpfOLHfpzHKXzix36cxyl84sd+nMcpfOLHfpzHJnyyx3tsxyZ8ssd7bMcmfLLHe2zHJnyyx3tsxyZ8ssd7bMcmfLLHe+zHLnyyx3vsxy58ssd77McufLLHe+zHLnyyx3vsxy58ssd77McufLLHe+zHLnyyx3vsxy58ssd77McufLLHe+zHLnyyx3vsxy58ssd77McufLLHe+zHLnyyx3vsxy58ssd77McufLLHfCzHInzCx3wsxyJ8wsd8LMcifMLHfCzHInzCx3wsxyJ8wsd8LMcifMLHe+zHKbTzLL1fvjudr6nyEfPMR++Awyn0nm8yT+/YNChU3I2IR2NiFnE6psQo1NiG2fLmwbdWHbqY1tpza2ndrYdmpj26mNbac2tp3aAnfqk9ETGPf30w+eiIXQJBPaNzahwiZkbEI7m5CzCVU2ocYm1NmE2HbqnW2ndrad2tl2amfbqZ1tp3a2ndrZdmpn26k9cKc+GSOBMeMZdUtglASGJTD2BIYnMGoCoyUwEtZ5u/+z+ypIAIqlUO5/37/xh7w2M/5f+pZCSfnud/8A5c9H50GpKZSWQukplJFCmRmU8Yn18ucDvqCUFIqlUPYUiqdQagqlpVB6CmWkUGYGZX5g7b84sApKSaFYCmVPoXgKpaZQWgqlp1BGCuUDa//FUeR1TGvLwZQcjGf8E6ZsNQfTcjA9BfOBE4HfwpQcjOVg9hxM/Lrp5foMbz8f6/3Fu13fHkeK3V6cKB7nXjE3/8+/XgL//RvjQ3yoik9V8evNQsK8yJqbrPkua+6y5lXWvMmay07QIjtCi+wMNdkZarIz1GRnqMnOUJOdoSY7Qy1shp6EHk64PZPq40+3Xv2SMKMJ+xZOKOEECyfc3tvGY/H42C8JHk6o4YQWTri7puv2eCFVt3FJGOGEGU3wLZxQwgl3f1qrPT5a7ZrQwgl3v9Ntfxy7aNWuCHULJ4R/lertNX2+ZK61XxJGOGFGE9oWTijhBAsn7OEEDyfUcEILJ3xwTbd2SRjhhPtr+tz5+iWh317T5+79jFDCCRZOuLum23lAtm3zkuDhhBpOaOGEHk64vaZnfRDKdkmY0YSxhRNKOMHCCXs4wcMJNZzQwgn9g4TLNT1GOOH+mn4cpWt2SZi31/T5OvQZoYQTLJxwe06/+rfo9HBCDSe0cEIPJ4xwQvibkyfnVj+GGE9Oq/3lHZjbY/MrXsoVpCTfLP3BS43Gs7NOMvYmbb9L27u0fZW2b9L2Xdp+SNtPZXuTnrUmPWtNetaa9Kw16Vlr0rPWpGetSc9ak561xjJrH0I7y/g8hZIn4gdvIRvPTr3J2O/S9i5tX6Xtm7R9l7Yf0vZT2d43aXvpWevSs9alZ61Lz1qXnrUuPWtdeta69Kx16VlbWWbtKcQyPk8hlol4CrEMuVOIZW6dQiyj6BRimS6nEMvAOIVYZsApxLKtP4Qa207dkpf9q/ufx7NEyc8qkRVzj2dZiR/9KnXjU9r5lLLLpl/chj2eZSV+VmnwKU06pbHxKRU+pfR96c93UI9niZKfVXI+pcqn1PiUOp/S4FOadEpz41MqfErZu/eLu8rHs+zQzyo5n1LlU2p8Sp1PafApTTqlZ1UCP+uUvX+/KClYTkbotBM6NbqXTM+6En7Wie9lXNkmn1N23u9bTjuhkxM6VUIntv1piDZsHOKa14Mf4pq3gx/iog0bMNe8HRzmmreDw1zzdnCYu6y55u3gMNds2IC57AQVbdiAuewMFW3YgLnsDBVt2IC57AwVbdiAuewMDW7YAKGHE2IbNkCY0YTghg0QSjjBwgmxDRsgeDihhhNaOCG2YQOEEU6Y0YTghg0QSjghtmEDhBZOiL0n8iAEN2yAEP5VCm7YAGGEE2Y0IbhhA4QSTrBwwh5O8HBCDSe0cEJswwYII5wQ27CBP2fFNmyAUMIJFk6IbdgAwcMJNZzQwgk9nBDbsAHCjCYEN2yAUMIJFk7YwwkeTqjhhBZOiG3YAGGEE2IbNnAIIrZhA4QSTrBwQmzDBggeTqjhhBZO6OGEEU4If3MS3bAxe0LDxgERbtiAve6t37DXvfUb9rq3fsPepe11b/2Gve6t37DXvfUb9rq3fsNet2HjsBdu2IC99KwVbtiAvfSsFW7YgL30rBVu2IC99KwVbtiAPVXDxiHE1bABId1bv2Gve+s37HVv/Ya9S9vr3voNe91bv2Gve+s37HVv/Ya97q3fh71wwwbspWetcMMG7KVnrXDDBuylZ61wwwbspWetcMMG7KVnLVfDBoSoGjYgRNWwASGqhg0IscytU4iqYQNCVA0bEKJq2IAQVcMGhKgaNg4hroYNCCUv+1cVBFAia9iAEtmlfjiuRdawASWyhg0okTVsQImsYQNKZA0bUCJr2IASWcPGocTWsAElsoYNKJE1bECJrGEDSs6nRNawASWyhg0okTVsQImsYQNKZA0bhxJbwwaUyBo2oETWsAElsoYNKDmfElnDBpTIGjagRNawASWyhg0okTVsrCgTWcPGciJr2FhOZA0by4msYWM5kd1gv5zIGjaWE9/LOLqGjRVWJGvYWE5kDRvLyQmdyBo2lhPX/jQ2j88sA6KbWV72sjmqZS+bo1r2sjmqZe/S9rI5qmUvm6Na9rI5qmUvm6Na9rKZZdjrZpaXvfSs1c0sL3vpWaubWV720rNWN7O87KVnrW5medkzZZYhRJVZXkKyOaplL5ujWvayOapl79L2sjmqZS+bo1r2sjmqZS+bo1r2sjkq2Otmlpe99KzVzSwve+lZq5tZXvbSs1Y3s7zspWetbmZ52UvPWqrM8hJiyiwvIabM8hJiyiwvIZa5dQoxZZaXEFNmeQkxZZaXEFNmeQkxZZYhRJVZXkLJy/5FqHMpcWWWlxLXMcl1XIsrs7yUuDLLS4krs7yUuDLLS4krs7yUuDLLS4krswwlsszyUuLKLC8lrszyUuLKLC8l51PiyiwvJa7M8lLiyiwvJa7M8lLiyixDiSyzvJS4MstLiSuzvJS4MstLyfmUuDLLS4krs7yUuDLLS4krs7yUuDLLX1EmrszylxNXZvnLiSuz/OXElVn+cuLLBLJllr+c+F7GsWWWv8KKXJnlLyeuzPKXkxM6cWWWv5zI9qdi/9ztu/btoeP2wmacG/jc/PdH7Y2/2B/iQ1V8qoqXTda8yJqbrPkua+6y5lXWvMmay07QIjtCi+wMNdkZarIz1GRnqMnOUJOdoSY7Qy1shp6EHk64PZPq4/SQV78kzGjCvoUTSjjBwgm397bxWDw+9kuChxNqOKGFE+6u6br1Xx+t27gkjHDCjCb4Fk4o4YS7P63VHh+tdk1o4YS73+m2P866tWpXhLqFE8K/SvX2mvbzZ6n2S8IIJ8xoQtvCCSWcYOGEPZzg4YQaTmjhhA+u6dYuCSOccH9NnztfvyT022v63L2fEUo4wcIJd9d0OzMabZuXBA8n1HBCCyf0cMLtNT0fF1K3sl0SZjRhbOGEEk6wcMIeTvBwQg0ntHBC/yDhck2PEU64v6YfJ1qaXRLm7TV9vg59RijhBAsn3J7Tr/4tOj2cUMMJLZzQwwkjnBD+5uTJce6PIcwSGjbMlBs2zJQbNsyUGzbMlBs2zJQbNsyUGzbMlBs2zJQbNsyUGzbMlBs2zJQbNsyUGzbMlBs2zJQbNsyUGzbMlBs2zJQbNsyUGzbMlBs2zMgaNszIGjbMlBs2zJQbNsyUGzbMlBs2zJQbNsyUGzbMlBs2zJQbNsyUGzbMlBs2zJQbNmAvPWuFGzZgLz1rhRs2zJQbNmAvPWuFGzbMlBs2zMgaNiBE1bABIaqGDQhRNWxAiGVunUJUDRtmZA0bZmQNG2ZkDRtmZA0bZmQNG2Z0DRtmdA0bZnQNG2Z0DRtmdA0bZnQNG2Z0DRtmdA0bZnQNG2Z0DRtmdA0bZnQNG2Z0DRtmdA0bZnQNG2Z0DRtmdA0bZnQNG2Z0DRtmdA0bZnQNG2Z0DRtmdA0bZnQNG2Z0DRtmdA0bZnQNG2Z0DRtmdA0bZnQNG2Z8DRvLiaxhYzmRNWwsJ7KGjeVEdoP9ciJr2FhOfC/j6Bo2VliRrGFjOZE1bCwnJ3Qia9hYTmz70xRt2DjENa8HP8Q1bwc/xEUbNmCueTs4zDVvB4e55u3gMHdZc83bwWGu2bABc9kJKtqwAXPZGSrasAFz2Rkq2rABc9kZKtqwAXPZGRrcsAFCDyfENmyAMKMJwQ0bIJRwgoUTYhs2QPBwQg0ntHBCbMMGCCOcMKMJwQ0bIJRwQmzDBggtnBB7T+RBCG7YACH8qxTcsAHCCCfMaEJwwwYIJZxg4YQ9nODhhBpOaOGE2IYNEEY4IbZhA3/Oim3YAKGEEyycENuwAYKHE2o4oYUTejghtmEDhBlNCG7YAKGEEyycsIcTPJxQwwktnBDbsAHCCCfENmzgEERswwYIJZxg4YTYhg0QPJxQwwktnNDDCSOcEP7mJLphYx8JDRsHRLhhA/a6t37DXvfWb9jr3voNe5e21731G/a6t37DXvfWb9jr3voNe92GjcNeuGED9tKzVrhhA/bSs1a4YQP20rNWuGED9tKzVrhhA/ZUDRuHEFfDBoR0b/2Gve6t37DXvfUb9i5tr3vrN+x1b/2Gve6t37DXvfUb9rq3fh/2wg0bsJeetcING7CXnrXCDRuwl561wg0bsJeetcING7CXnrVcDRsQomrYgBBVwwaEqBo2IMQyt04hqoYNCFE1bECIqmEDQlQNGxCiatg4hLgaNiCUvOxfVRBAiaxhA0pkl/rhuBZZwwaUyBo2oETWsAElsoYNKJE1bECJrGEDSmQNG4cSW8MGlMgaNqBE1rABJbKGDSg5nxJZwwaUyBo2oETWsAElsoYNKJE1bBxKbA0bUCJr2IASWcMGlMgaNqDkfEpkDRtQImvYgBJZwwaUyBo2oETWsLGiTGQNG8uJrGFjOZE1bCwnsoaN5UR2g/1yImvYWE58L+PoGjZWWJGsYWM5kTVsLCcndCJr2FhOZPuT14TM8gERzizDXjdHBXvdHBXsdXNUsHdpe90cFex1c1Sw181RwV43RwV73czyYS+cWYa99KwVzizDXnrWCmeWYS89a4Uzy7CXnrXCmWXYU2WWDyGuzDKEdHNUsNfNUcFeN0cFe5e2181RwV43RwV73RwV7HVzVLDXzVEd9sKZZdhLz1rhzDLspWetcGYZ9tKzVjizDHvpWSucWYa99KzlyixDiCqzDCGqzDKEqDLLEGKZW6cQVWYZQlSZZQhRZZYhRJVZhhBVZvkQ4sosQyh52b8KdUKJLLMMJbJjkjiuRZZZhhJZZhlKZJllKJFllqFEllmGEllmGUpkmeVDiS2zDCWyzDKUyDLLUCLLLEPJ+ZTIMstQIsssQ4ksswwlsswylMgyy4cSW2YZSmSZZSiRZZahRJZZhpLzKZFllqFEllmGEllmGUpkmWUokWWWV5SJLLO8nMgyy8uJLLO8nMgyy8uJLxNIl1leTnwv4+gyyyusSJZZXk5kmeXl5IROZJnl5US1P43yNG7Qt4dRr7/7ystWfz/X33xuvPncfO+56zPo33iuvPmcvfnc5bIe2/brubE9ec7ffK6++Vx787n+5nPjzefme89dH7oc5xvS0cf1c+XN5+zN5/Y3n/M3n6tvPtfefO7652X0x3OzXT833nxuvvfc9cGhbzxX3nzO3nxuf/O5y5+XWR7raJbrdXR99uQbz7U3n+tvPjfefG6+99z18YVvPFdePGfX379mbz63v/nc9c/L/ljv06/X+/WRhW881958rr/53Hjzufnec31787nrn5d2/j64uf/Xg//3Nx8+KZZC2VMonkKpKZSWQukplJFCmRmU69MGH6ekrP2RsvZHytofKWt/pKz9kbL2R8raHylrf6Ss/Zmy9mfK2p8pa3+mrP2ZsvZnytqfKWt/pqz9mbL2Z8raf/KXzs9jSg7GcjB7DsZzMDUH03IwPQczcjA5u0DJ2QVKzi5QcnaBkrMLlJxdoOTsAiVnFyg5u0DJ2QVKzi5gObuA5ewClrMLWM4uYDm7gOXsApazC1jOLmA5u4Dl7AJ7zi6w5+wCe84usOfsAnvOLrDn7AJ7zi6w5+wCe84usOfsAp6zC3jOLuA5u4Dn7AKeswt4zi7gObuA5+wCnrMLeM4uUHN2gZqzC9ScXaDm7AI1ZxeoObtAzdkFas4uUHN2gZqzC7ScXaDl7AItZxdoObtAy9kFWs4u0HJ2gZazC7ScXaDl7AI9ZxfIOR9Ycg4IlpwTgiXniGDJOSNYcg4JlpxTgiXnmGDJOSdYcg4KlpyTgiXnqGDJOStYcg4LlpzTgiXnuGDJOS9Ycg4MlpwTgyXnyGDJOTNYcg4NlpxTgyXn2GDJOTdYcg4OlpyTgyXn6GDJOTtoOWcHLefsoOWcHbScs4O2eQ6m5mBaDqbnYEYOJmcXyDk7aDlnBy3n7KDlnB20nLODlnN20HLODlrO2UHLOTtoOWcHLefsoOWcHbScs4OWc3bQcs4OWs7ZQcs5O2g5Zwct5+yg5ZwdtJyzg5ZzdtByzg5aztlByzk7aDlnBy3n7KDlnB20nLODlnN20HLODlrO2UHLOTtoOWcHLefsoH3gtF3dHlfJ1PKvW1X9X1cEfuCw3TcoHzidVu2k7PUJxVIoewrFUyg1hfK3g+b3k/3dJz9wauAbP9cfODTwHUpNobQUSsqu9oEDA9UfV1LXak8oM4PygeMC36GUFIqlUD6w9vdxUvYnFE+h1BRKS6H0FMpIocyMyfmBQwLfoaT8djZTfjubKb+dfeCAwHcoKb+dfeB4wHcoPYUyUigZa3/fthRKSaFYCmVPoXgKpaZQWgqlp1BGCiVl7ZeUtV9S1n5JWfslZe2XlLVfUtZ+SVn7JWXtl5S1X1LWvqWsfUtZ+5ay9i1l7VvK2reUtW8pa9/C134t/1xXsFV/lF+U2v6rOPV/GaM+3iiNUf780VLGKW/2r1cDdvoMMp9J5nP9q81PChU2IWMT2tmEnE2osgk1NiG2fbqwbdSFbac2tp3a2HZqY9upjW2nNrad2th2agvcqU9GT2Dc30/nVn59du7b/S/sJBPaNzahwiZkbEI7m5CzCVU2ocYm1NmE2HbqnW2ndrad2tl2amfbqZ1tp3a2ndrZdmpn26k9cKc+GSOBMeMZdUtglASGJTD2BIYnMGoCoyUwEtZ5u/+zW7Ztf3x4K3ZJsRTK/e97Mf+9+7bLFwhtZvy/9C2FkvLd7/4BSpsnZbRLSk2htBRKT6GMFMrMoIxPrJdWflP6JaWkUCyFsqdQPIVSUygthdJTKCOFMjMo8wNrvxR/fLj45W9Ks6RQLIWyp1A8hVJTKC2F0lMoI4XygbVfup2UMa4oT1qtP48pORjP+CdM2WoOpuVgegrmAycCv4UpORjLwew5mIR1s1+f4e3nY72/eLfr2yOv61b//NFx7hVz+334+HgJ/MYb4/36sK+C+FQVv94sJMyLrLnJmu+y5i5rXmXNm6y57AQtsiO0yM5Qk52hJjtDTXaGmuwMNdkZarIz1MJm6Eno4YTbM6k+/nTr1S8JM5qwb+GEEk6wcMLtvW08Fo+P/ZLg4YQaTmjhhLtrum6PF1J1G5eEEU6Y0QTfwgklnHD3p7Xa46PVrgktnHD3O932x7GLVu2KULdwQvhXqd5e0+dL5lr7JWGEE2Y0oW3hhBJOsHDCHk7wcEINJ7RwwgfXdGuXhBFOuL+mz52vXxL67TV97t7PCCWcYOGEu2u6nQdk2zYvCR5OqOGEFk7o4YTba3rWB6Fsl4QZTRhbOKGEEyycsIcTPJxQwwktnNA/SLhc02OEE+6v6cdRumaXhHl7TZ+vQ58RSjjBwgm35/Srf4tODyfUcEILJ/RwwggnhL85eXJu9WOI9uS02vEfzoO7rb74k0vx7bH5FS/lCvLkUOTfUXyclP7qr0Cfu9SoPTvrJGNv0va7tL1L21dp+yZt36Xth7T9VLY36Vlr0rPWpGetSc9ak561Jj1rTXrWmvSsNelZayyz9iG0s4zPUyh5In7wFrL27NSbjP0ube/S9lXavknbd2n7IW0/le19k7aXnrUuPWtdeta69Kx16Vnr0rPWpWetS89al561lWXWnkIs4/MUYpmIpxDLkDuFWObWKcQyik4hlulyCrEMjFOIZQacQizb+kOose3ULXnZv7r/uT1LlPysUvIP9qvLxdqzrMSPfpW68SntfEotW+nPt2G3Z1mJn1UafEqTTmlsfEqFTyl9X/rzHdTtWaLkZ5WcT6nyKTU+pc6nNPiUJp3S3PiUCp9S9u794q7y9iw79LNKzqdU+ZQan1LnUxp8SpNO6VmVwM86Ze/fL0oKlpMROu2ETo3uJdOzroSfdeJ7GVe2yeeUnff7ltNO6OSETpXQiWx/6ptow8Yhrnk9+CGueTv4IS7asAFzzdvBYa55OzjMNW8Hh7nLmmveDg5zzYYNmMtOUNGGDZjLzlDRhg2Yy85Q0YYNmMvOUNGGDZjLztDghg0QejghtmEDhBlNCG7YAKGEEyycENuwAYKHE2o4oYUTYhs2QBjhhBlNCG7YAKGEE2IbNkBo4YTYeyIPQnDDBgjhX6Xghg0QRjhhRhOCGzZAKOEECyfs4QQPJ9RwQgsnxDZsgDDCCbENG/hzVmzDBgglnGDhhNiGDRA8nFDDCS2c0MMJsQ0bIMxoQnDDBgglnGDhhD2c4OGEGk5o4YTYhg0QRjghtmEDhyBiGzZAKOEECyfENmyA4OGEGk5o4YQeThjhhPA3J9ENG30mNGwcEOGGDdjr3voNe91bv2Gve+s37F3aXvfWb9jr3voNe91bv2Gve+s37HUbNg574YYN2EvPWuGGDdhLz1rhhg3YS89a4YYN2EvPWuGGDdhTNWwcQlwNGxDSvfUb9rq3fsNe99Zv2Lu0ve6t37DXvfUb9rq3fsNe99Zv2Ove+n3YCzdswF561go3bMBeetYKN2zAXnrWCjdswF561go3bMBeetZyNWxAiKphA0JUDRsQomrYgBDL3DqFqBo2IETVsAEhqoYNCFE1bECIqmHjEOJq2IBQ8rJ/VUEAJbKGDSiRXeqH41pkDRtQImvYgBJZwwaUyBo2oETWsAElsoYNKJE1bBxKbA0bUCJr2IASWcMGlMgaNqDkfEpkDRtQImvYgBJZwwaUyBo2oETWsHEosTVsQImsYQNKZA0bUCJr2ICS8ymRNWxAiaxhA0pkDRtQImvYgBJZw8aKMpE1bCwnsoaN5UTWsLGcyBo2lhPbDfaTr2FjOfG9jKNr2FhhRbKGjeVE1rCxnJzQiaxhYzmR7U+jJWSWD4hwZhn2ujkq2OvmqGCvm6OCvUvb6+aoYK+bo4K9bo4K9ro5KtjrZpYPe+HMMuylZ61wZhn20rNWOLMMe+lZK5xZhr30rBXOLMOeKrN8CHFlliGkm6OCvW6OCva6OSrYu7S9bo4K9ro5Ktjr5qhgr5ujgr1ujuqwF84sw1561gpnlmEvPWuFM8uwl561wpll2EvPWuHMMuylZy1XZhlCVJllCFFlliFElVmGEMvcOoWoMssQososQ4gqswwhqswyhKgyy4cQV2YZQsnL/lWoE0pkmWUokR2TxHEtsswylMgyy1AiyyxDiSyzDCWyzDKUyDLLUCLLLB9KbJllKJFllqFEllmGEllmGUrOp0SWWYYSWWYZSmSZZSiRZZahRJZZPpTYMstQIsssQ4ksswwlsswylJxPiSyzDCWyzDKUyDLLUCLLLEOJLLO8okxkmeXlRJZZXk5kmeXlRJZZXk58mUC6zPJy4nsZR5dZXmFFsszyciLLLC8nJ3QiyywvJ7L9afo/d/uufXvouL2wGecGPjf//VF74y/2h/hQFZ+q4mWTNS+y5iZrvsuau6x5lTVvsuayE7TIjtAiO0NNdoaa7Aw12RlqsjPUZGeoyc5QC5uhJ6GHE27PpPo4PeTVLwkzmrBv4YQSTrBwwu29bTwWj4/9kuDhhBpOaOGEu2u6bv3XR+s2LgkjnDCjCb6FE0o44e5Pa7XHR6tdE1o44e53uu2Ps26t2hWhbuGE8K9Svb2m/fxZqv2SMMIJM5rQtnBCCSdYOGEPJ3g4oYYTWjjhg2u6tUvCCCfcX9PnztcvCf32mj5372eEEk6wcMLdNd3OjEbb5iXBwwk1nNDCCT2ccHtNz8eF1K1sl4QZTRhbOKGEEyycsIcTPJxQwwktnNA/SLhc02OEE+6v6ceJlmaXhHl7TZ+vQ58RSjjBwgm35/Srf4tODyfUcEILJ/RwwggnhL85eXKc+1MI2zy+YQMQ3YaNZS976/eyl731e9nL3vq97F3aXvbW72Uve+v3spe99XvZy976vexlGzZgr9uwseylZ61uw8ayl561ug0by1561uo2bCx76Vmr27Cx7JkaNiBE1bCxhGRv/V72srd+L3vZW7+XvUvby976vexlb/1e9rK3fi972Vu/l73srd+w123YWPbSs1a3YWPZS89a3YaNZS89a3UbNpa99KzVbdhY9tKzlqphYwkxNWwsIaaGjSXE1LCxhFjm1inE1LCxhJgaNpYQU8PGEmJq2FhCTA0bEKJq2FhCycv+RQXBUuJq2FhKXJf6reNaXA0bS4mrYWMpcTVsLCWuho2lxNWwsZS4GjaWElfDBpTIGjaWElfDxlLiathYSlwNG0vJ+ZS4GjaWElfDxlLiathYSlwNG0uJq2EDSmQNG0uJq2FjKXE1bCwlroaNpeR8SlwNG0uJq2FjKXE1bCwlroaNpcTVsPEVZeJq2Phy4mrY+HLiatj4cuJq2Phy4rrB/suJq2Hjy4nvZRxbw8ZXWJGrYePLiath48vJCZ24Gja+nMj2p1I0GzYgLnk9OMQlbweHuGbDxjKXvB18mUveDr7MJW8HX+Yuay55O/gyl2zYWOayE1SzYWOZy85QzYaNZS47QzUbNpa57AzVbNhY5rIzNLZhYxF6OCG0YWMRZjQhtmFjEUo4wcIJoQ0bi+DhhBpOaOGE0IaNRRjhhBlNiG3YWIQSTght2FiEFk4IvScShNiGjUUI/yrFNmwswggnzGhCbMPGIpRwgoUT9nCChxNqOKGFE0IbNhZhhBNCGzbWn7NCGzYWoYQTLJwQ2rCxCB5OqOGEFk7o4YTQho1FmNGE2IaNRSjhBAsn7OEEDyfUcEILJ4Q2bCzCCCeENmysQxChDRuLUMIJFk4IbdhYBA8n1HBCCyf0cMIIJ4S/OYlu2LAtoWHjgAg3bMBe99Zv2Ove+g173Vu/Ye/S9rq3fsNe99Zv2Ove+g173Vu/Ya/bsHHYCzdswF561go3bMBeetYKN2zAXnrWCjdswF561go3bMCeqmHjEOJq2ICQ7q3fsNe99Rv2urd+w96l7XVv/Ya97q3fsNe99Rv2urd+w1731u/DXrhhA/bSs1a4YQP20rNWuGED9tKzVrhhA/bSs1a4YQP20rOWq2EDQlQNGxCiatiAEFXDBoRY5tYpRNWwASGqhg0IUTVsQIiqYQNCVA0bhxBXwwaEkpf9qwoCKJE1bECJ7FI/HNcia9iAElnDBpTIGjagRNawASWyhg0okTVsQImsYeNQYmvYgBJZwwaUyBo2oETWsAEl51Mia9iAElnDBpTIGjagRNawASWyho1Dia1hA0pkDRtQImvYgBJZwwaUnE+JrGEDSmQNG1Aia9iAElnDBpTIGjZWlImsYWM5kTVsLCeyho3lRNawsZzIbrBfTmQNG8uJ72UcXcPGCiuSNWwsJ7KGjeXkhE5kDRvLiW1/6hmZ5S6dWe7SmeUunVnu0pnlLp1Z7tKZ5S6dWe7SmeUunVnu0pnlLp1Z7tKZ5S6dWe7SmeUunVnu0pnlLp1Z7tKZ5S6dWe5smeXOllnu0pnlLp1Z7tKZ5S6dWe7SmeUunVnu0pnlLp1Z7tKZ5S6dWe7SmeUunVnu0pnlLp1Z7tKZ5S6dWe7SmeUunVnu0pnlzpZZ7myZ5c6WWe5smeXOllnubJnlzpZZ7myZ5c6WWe5smeXOllnufJnlzpdZ7nyZ5c6XWe58meXOl1nufJnlzpdZ7nyZ5c6XWe58meXOl1nufJnlzpdZ7nyZ5c6XWe58meXOl1nufJnlzpdZ7nyZ5c6XWe58meXOl1nufJnlzpdZ7nyZ5c6XWe58meXOl1nuhJnlTphZ7oSZ5U6YWe6EmeVOmFnuhJnlTphZ7oSZZTixZZbh5IRObJllOJHtT/t8klmu3h/P1db/DPngIfbDZ5D5TDKfJ/HvHxQqbELGJrSzCTmbUGUTamxCbPt0YduoC9tObWw7tbHt1Ma2UxvbTm1sO7Wx7dQWuFOfjJ7AuL+ffvBELIQmmdC+sQkVNiFjE9rZhJxNqLIJNTahzibEtlPvbDu1s+3UzrZTO9tO7Ww7tbPt1M62UzvbTu2BO/XJGAmMGc+oWwKjJDAsgbEnMDyBURMYLYGRsM7b/Z/dV0ECUCyFcv/7/o0/5LWZ8f/StxRKyne/+wcofz46D0pNobQUSk+hjBTKzKCMT6yXPx/wBaWkUCyFsqdQPIVSUygthdJTKCOFMjMo8wNr/8WBVVBKCsVSKHsKxVMoNYXSUig9hTJSKB9Y+y+OIq9jWlsOpuRgPOOfMGWrOZiWg+kpmA+cCPwWpuRgLAez52Di142X6zO8/Xys9xfvdn17HCl2e3GieJx7xdz8P/96Cfz3b4wP8aEqPlXFrzcLCfMia26y5rusucuaV1nzJmsuO0GL7AgtsjPUZGeoyc5Qk52hJjtDTXaGmuwMtbAZehJ6OOH2TKqPP9169UvCjCbsWzihhBMsnHB7bxuPxeNjvyR4OKGGE1o44e6artvjhVTdxiVhhBNmNMG3cEIJJ9z9aa32+Gi1a0ILJ9z9Trf9ceyiVbsi1C2cEP5VqrfX9PmSudZ+SRjhhBlNaFs4oYQTLJywhxM8nFDDCS2c8ME13dolYYQT7q/pc+frl4R+e02fu/czQgknWDjh7ppu5wHZts1LgocTajihhRN6OOH2mp71QSjbJWFGE8YWTijhBAsn7OEEDyfUcEILJ/QPEi7X9BjhhPtr+nGUrtklYd5e0+fr0GeEEk6wcMLtOf3q36LTwwk1nNDCCT2cMMIJ4W9Onpxb/RiiPjmt9pd3YG6Pza94KVeQknyz9AcvNarPzjrJ2Ju0/S5t79L2Vdq+Sdt3afshbT+V7U161pr0rDXpWWvSs9akZ61Jz1qTnrUmPWtNetYay6x9CO0s4/MUSp6IH7yFrD479SZjv0vbu7R9lbZv0vZd2n5I209le9+k7aVnrUvPWpeetS49a1161rr0rHXpWevSs9alZ21lmbWnEMv4PIVYJuIpxDLkTiGWuXUKsYyiU4hlupxCLAPjFGKZAacQy7b+EGpsO3VLXvav7n+uzxIlP6tEVsxdn2UlfvSr1I1PaedTyi6bfnEbdn2WlfhZpcGnNOmUxsanVPiU0velP99BXZ8lSn5WyfmUKp9S41PqfEqDT2nSKc2NT6nwKWXv3i/uKq/PskM/q+R8SpVPqfEpdT6lwac06ZSeVQn8rFP2/v2ipGA5GaHTTujU6F4yPetK+FknvpdxZZt8Ttl5v2857YROTuhUCZ3Y9qch2rBxiGteD36Ia94OfoiLNmzAXPN2cJhr3g4Oc83bwWHusuaat4PDXLNhA+ayE1S0YQPmsjNUtGED5rIzVLRhA+ayM1S0YQPmsjM0uGEDhB5OiG3YAGFGE4IbNkAo4QQLJ8Q2bIDg4YQaTmjhhNiGDRBGOGFGE4IbNkAo4YTYhg0QWjgh9p7IgxDcsAFC+FcpuGEDhBFOmNGE4IYNEEo4wcIJezjBwwk1nNDCCbENGyCMcEJswwb+nBXbsAFCCSdYOCG2YQMEDyfUcEILJ/RwQmzDBggzmhDcsAFCCSdYOGEPJ3g4oYYTWjghtmEDhBFOiG3YwCGI2IYNEEo4wcIJsQ0bIHg4oYYTWjihhxNGOCH8zUl0w0brCQ0bB0S4YQP2urd+w1731m/Y6976DXuXtte99Rv2urd+w1731m/Y6976DXvdho3DXrhhA/bSs1a4YQP20rNWuGED9tKzVrhhA/bSs1a4YQP2VA0bhxBXwwaEdG/9hr3urd+w1731G/Yuba976zfsdW/9hr3urd+w1731G/a6t34f9sING7CXnrXCDRuwl561wg0bsJeetcING7CXnrXCDRuwl561XA0bEKJq2IAQVcMGhKgaNiDEMrdOIaqGDQhRNWxAiKphA0JUDRsQomrYOIS4GjYglLzsX1UQQImsYQNKZJf64bgWWcMGlMgaNqBE1rABJbKGDSiRNWxAiaxhA0pkDRuHElvDBpTIGjagRNawASWyhg0oOZ8SWcMGlMgaNqBE1rABJbKGDSiRNWwcSmwNG1Aia9iAElnDBpTIGjag5HxKZA0bUCJr2IASWcMGlMgaNqBE1rCxokxkDRvLiaxhYzmRNWwsJ7KGjeVEdoP9ciJr2FhOfC/j6Bo2VliRrGFjOZE1bCwnJ3Qia9hYTmT7U/eEzPIBEc4sw143RwV73RwV7HVzVLB3aXvdHBXsdXNUsNfNUcFeN0cFe93M8mEvnFmGvfSsFc4sw1561gpnlmEvPWuFM8uwl561wpll2FNllg8hrswyhHRzVLDXzVHBXjdHBXuXttfNUcFeN0cFe90cFex1c1Sw181RHfbCmWXYS89a4cwy7KVnrXBmGfbSs1Y4swx76VkrnFmGvfSs5cosQ4gqswwhqswyhKgyyxBimVunEFVmGUJUmWUIUWWWIUSVWYYQVWb5EOLKLEMoedm/CnVCiSyzDCWyY5I4rkWWWYYSWWYZSmSZZSiRZZahRJZZhhJZZhlKZJnlQ4ktswwlsswylMgyy1AiyyxDyfmUyDLLUCLLLEOJLLMMJbLMMpTIMsuHEltmGUpkmWUokWWWoUSWWYaS8ymRZZahRJZZhhJZZhlKZJllKJFllleUiSyzvJzIMsvLiSyzvJzIMsvLiS8TSJdZXk58L+PoMssrrEiWWV5OZJnl5eSETmSZ5eVEtj8N++du37VvDx23Fzbj3MDn5r8/am/8xf4QH6riU1W8bLLmRdbcZM13WXOXNa+y5k3WXHaCFtkRWmRnqMnOUJOdoSY7Q012hprsDDXZGWphM/Qk9HDC7ZlUH6eHvPolYUYT9i2cUMIJFk64vbeNx+LxsV8SPJxQwwktnHB3Tdet//po3cYlYYQTZjTBt3BCCSfc/Wmt9vhotWtCCyfc/U63/XHWrVW7ItQtnBD+Vaq317SfP0u1XxJGOGFGE9oWTijhBAsn7OEEDyfUcEILJ3xwTbd2SRjhhPtr+tz5+iWh317T5+79jFDCCRZOuLum25nRaNu8JHg4oYYTWjihhxNur+n5uJC6le2SMKMJYwsnlHCChRP2cIKHE2o4oYUT+gcJl2t6jHDC/TX9ONHS7JIwb6/p83XoM0IJJ1g44facfvVv0enhhBpOaOGEHk4Y4YTwNydPjnN/DDEtoWFjmnLDxjTlho1pyg0b05QbNqYpN2xMU27YmKbcsDFNuWFjmnLDxjTlho1pyg0b05QbNqYpN2xMU27YmKbcsDFNuWFjmnLDxjTlho1pyg0b08gaNqaRNWxMU27YmKbcsDFNuWFjmnLDxjTlho1pyg0b05QbNqYpN2xMU27YmKbcsDFNuWED9tKzVrhhA/bSs1a4YWOacsMG7KVnrXDDxjTlho1pZA0bEKJq2IAQVcMGhKgaNiDEMrdOIaqGjWlkDRvTyBo2ppE1bEwja9iYRtawMY2uYWMaXcPGNLqGjWl0DRvT6Bo2ptE1bEyja9iYRtewMY2uYWMaXcPGNLqGjWl0DRvT6Bo2ptE1bEyja9iYRtewMY2uYWMaXcPGNLqGjWl0DRvT6Bo2ptE1bEyja9iYRtewMY2uYWMaXcPGNLqGjWl0DRvT6Bo2ptE1bEzja9hYTmQNG8uJrGFjOZE1bCwnshvslxNZw8Zy4nsZR9ewscKKZA0by4msYWM5OaETWcPGcmLbn6Zow8Yhrnk9+CGueTv4IS7asAFzzdvBYa55OzjMNW8Hh7nLmmveDg5zzYYNmMtOUNGGDZjLzlDRhg2Yy85Q0YYNmMvOUNGGDZjLztDghg0QejghtmEDhBlNCG7YAKGEEyycENuwAYKHE2o4oYUTYhs2QBjhhBlNCG7YAKGEE2IbNkBo4YTYeyIPQnDDBgjhX6Xghg0QRjhhRhOCGzZAKOEECyfs4QQPJ9RwQgsnxDZsgDDCCbENG/hzVmzDBgglnGDhhNiGDRA8nFDDCS2c0MMJsQ0bIMxoQnDDBgglnGDhhD2c4OGEGk5o4YTYhg0QRjghtmEDhyBiGzZAKOEECyfENmyA4OGEGk5o4YQeThjhhPA3J8ENG/s24hs2ANFt2Fj2srd+L3vZW7+Xveyt38vepe1lb/1e9rK3fi972Vu/l73srd/LXrZhA/a6DRvLXnrW6jZsLHvpWavbsLHspWetbsPGspeetboNG8ueqWEDQlQNG0tI9tbvZS976/eyl731e9m7tL3srd/LXvbW72Uve+v3spe99XvZy976DXvdho1lLz1rdRs2lr30rNVt2Fj20rNWt2Fj2UvPWt2GjWUvPWupGjaWEFPDxhJiathYQkwNG0uIZW6dQkwNG0uIqWFjCTE1bCwhpoaNJcTUsAEhqoaNJZS87F9UECwlroaNpcR1qd86rsXVsLGUuBo2lhJXw8ZS4mrYWEpcDRtLiathYylxNWxAiaxhYylxNWwsJa6GjaXE1bCxlJxPiathYylxNWwsJa6GjaXE1bCxlLgaNqBE1rCxlLgaNpYSV8PGUuJq2FhKzqfE1bCxlLgaNpYSV8PGUuJq2FhKXA0bX1EmroaNLyeuho0vJ66GjS8nroaNLyeuG+y/nLgaNr6c+F7GsTVsfIUVuRo2vpy4Gja+nJzQiath48uJbH8qNSGzfECEM8uw181RwV43RwV73RwV7F3aXjdHBXvdHBXsdXNUsNfNUcFeN7N82AtnlmEvPWuFM8uwl561wpll2EvPWuHMMuylZ61wZhn2VJnlQ4grswwh3RwV7HVzVLDXzVHB3qXtdXNUsNfNUcFeN0cFe90cFex1c1SHvXBmGfbSs1Y4swx76VkrnFmGvfSsFc4sw1561gpnlmEvPWu5MssQososQ4gqswwhqswyhFjm1ilElVmGEFVmGUJUmWUIUWWWIUSVWT6EuDLLEEpe9q9CnVAiyyxDieyYJI5rkWWWoUSWWYYSWWYZSmSZZSiRZZahRJZZhhJZZvlQYsssQ4ksswwlsswylMgyy1ByPiWyzDKUyDLLUCLLLEOJLLMMJbLM8qHEllmGEllmGUpkmWUokWWWoeR8SmSZZSiRZZahRJZZhhJZZhlKZJnlFWUiyywvJ7LM8nIiyywvJ7LM8nLiywTSZZaXE9/LOLrM8gorkmWWlxNZZnk5OaETWWZ5OXHtT+1p3KBvD6Nef/eVl63+fq6/+dx487n53nPXZ9C/8Vx58zl787nLZT227ddzY3vynL/5XH3zufbmc/3N58abz833nrs+dDnON6Sjj+vnypvP2ZvP7W8+528+V998rr353PXPy+iP52a7fm68+dx877nrg0PfeK68+Zy9+dz+5nOXPy+zPNbRLNfr6PrsyTeea28+1998brz53HzvuevjC994rrx4zq6/f83efG5/87nrn5f9sd6nX6/36yML33iuvflcf/O58eZz873n+vbmc9c/L+38fXBz/68H/+9vPnxSLIWyp1A8hVJTKC2F0lMoI4UyMyjXpw0+TklZ+yNl7Y+UtT9S1v5IWfsjZe2PlLU/Utb+SFn7M2Xtz5S1P1PW/kxZ+zNl7c+UtT9T1v5MWfszZe3PlLX/5C+dn8eUHIzlYPYcjOdgag6m5WB6DmbkYHJ2gZKzC5ScXaDk7AIlZxcoObtAydkFSs4uUHJ2gZKzC5ScXcBydgHL2QUsZxewnF3AcnYBy9kFLGcXsJxdwHJ2AcvZBfacXWDP2QX2nF1gz9kF9pxdYM/ZBfacXWDP2QX2nF1gz9kFPGcX8JxdwHN2Ac/ZBTxnF/CcXcBzdgHP2QU8ZxfwnF2g5uwCNWcXqDm7QM3ZBWrOLlBzdoGaswvUnF2g5uwCNWcXaDm7QMvZBVrOLtBydoGWswu0nF2g5ewCLWcXaDm7QMvZBXrOLpBzPrDkHBAsOScES84RwZJzRrDkHBIsOacES84xwZJzTrDkHBQsOScFS85RwZJzVrDkHBYsOacFS85xwZJzXrDkHBgsOScGS86RwZJzZrDkHBosOacGS86xwZJzbrDkHBwsOScHS87RwZJzdtByzg5aztlByzk7aDlnB23zHEzNwbQcTM/BjBxMzi6Qc3bQcs4OWs7ZQcs5O2g5Zwct5+yg5ZwdtJyzg5ZzdtByzg5aztlByzk7aDlnBy3n7KDlnB20nLODlnN20HLODlrO2UHLOTtoOWcHLefsoOWcHbScs4OWc3bQcs4OWs7ZQcs5O2g5Zwct5+yg5ZwdtJyzg5ZzdtByzg5aztlB+8Bpu7o9rpKp5V+3qvq/rgj8wGG7b1A+cDqt2knZ6xOKpVD2FIqnUGoK5W8Hze8n+7tPfuDUwDd+rj9waOA7lJpCaSmUlF3tAwcGqj+upK7VnlBmBuUDxwW+QykpFEuhfGDt7+Ok7E8onkKpKZSWQukplJFCmRmT8wOHBL5DSfntbKb8djZTfjv7wAGB71BSfjv7wPGA71B6CmWkUDLW/r5tKZSSQrEUyp5C8RRKTaG0FEpPoYwUSsraLylrv6Ss/ZKy9kvK2i8pa7+krP2SsvZLytovKWu/pKx9S1n7lrL2LWXtW8rat5S1bylr31LWvoWvfSv/XFewVX+UX5Ta/qs49X8Zoz7eKI1R/vzRUsYpb/avVwN2+gwyn0nmc/2rzU8KFTYhYxPa2YScTaiyCTU2IbZ9urBt1IVtpza2ndrYdmpj26mNbac2tp3a2HZqC9ypT0ZPYNzfT+dWfn127tv9L+wkE9o3NqHCJmRsQjubkLMJVTahxibU2YTYduqdbad2tp3a2XZqZ9upnW2ndrad2tl2amfbqT1wpz4ZI4Ex4xl1S2CUBIYlMPYEhicwagKjJTAS1nm7/7Nbtm1/fHgrdkmxFMr973sx/737tssXCG1m/L/0LYWS8t3v/gFKmydltEtKTaG0FEpPoYwUysygjE+sl1Z+U/olpaRQLIWyp1A8hVJTKC2F0lMoI4UyMyjzA2u/FH98uPjlb0qzpFAshbKnUDyFUlMoLYXSUygjhfKBtV+6nZQxrihPWq0/jyk5GM/4J0zZag6m5WB6CuYDJwK/hSk5GMvB7DmYhHWzX5/h7edjvb94t+vbI6/rVv/80XHuFXP7ffj4eAn8xhvj/fqwr4L4VBW/3iwkzIusucma77LmLmteZc2brLnsBC2yI7TIzlCTnaEmO0NNdoaa7Aw12RlqsjPUwmboSejhhNszqT7+dOvVLwkzmrBv4YQSTrBwwu29bTwWj4/9kuDhhBpOaOGEu2u6bo8XUnUbl4QRTpjRBN/CCSWccPentdrjo9WuCS2ccPc73fbHsYtW7YpQt3BC+Fep3l7T50vmWvslYYQTZjShbeGEEk6wcMIeTvBwQg0ntHDCB9d0a5eEEU64v6bPna9fEvrtNX3u3s8IJZxg4YS7a7qdB2TbNi8JHk6o4YQWTujhhNtretYHoWyXhBlNGFs4oYQTLJywhxM8nFDDCS2c0D9IuFzTY4QT7q/px1G6ZpeEeXtNn69DnxFKOMHCCbfn9Kt/i04PJ9RwQgsn9HDCCCeEvzl5cm71Y4j9yWm10vbz4G6rL/7kUnx7bH7FS7mCPDkU+XcUHyelv/or0OcuNdqfnXWSsTdp+13a3qXtq7R9k7bv0vZD2n4q25v0rDXpWWvSs9akZ61Jz1qTnrUmPWtNetaa9Kw1lln7ENpZxucplDwRP3gL2f7s1JuM/S5t79L2Vdq+Sdt3afshbT+V7X2TtpeetS49a1161rr0rHXpWevSs9alZ61Lz1qXnrWVZdaeQizj8xRimYinEMuQO4VY5tYpxDKKTiGW6XIKsQyMU4hlBpxCLNv6Q6ix7dQtedm/uv95f5Yo+Vml5B/sV5eL7c+yEj/6VerGp7TzKbVspT/fhr0/y0r8rNLgU5p0SmPjUyp8Sun70p/voN6fJUp+Vsn5lCqfUuNT6nxKg09p0inNjU+p8Cll794v7irfn2WHflbJ+ZQqn1LjU+p8SoNPadIpPasS+Fmn7P37RUnBcjJCp53QqdG9ZHrWlfCzTnwv48o2+Zyy837fctoJnZzQqRI6ke1Pvok2bBzimteDH+Kat4Mf4qINGzDXvB0c5pq3g8Nc83ZwmLusuebt4DDXbNiAuewEFW3YgLnsDBVt2IC57AwVbdiAuewMFW3YgLnsDA1u2AChhxNiGzZAmNGEfQsnlHCChRNiGzZA8HBCDSe0cEJswwYII5wwownBDRsglHBCbMMGCC2cEHtP5EEIbtgAIfyrFNywAcIIJ8xoQnDDBgglnGDhhD2c4OGEGk5o4YTYhg0QRjghtmEDf86KbdgAoYQTLJwQ27ABgocTajihhRN6OCG2YQOEGU0IbtgAoYQTLJywhxM8nFDDCS2cENuwAcIIJ8Q2bOAQRGzDBgglnGDhhNiGDRA8nFDDCS2c0MMJI5wQ/uYkumHDZ0LDxgERbtiAve6t37DXvfUb9rq3fsPepe11b/2Gve6t37DXvfUb9rq3fsNet2HjsBdu2IC99KwVbtiAvfSsFW7YgL30rBVu2IC99KwVbtiAPVXDxiG0UzVsQEj31m/Y6976DXvdW79h79L2urd+w1731m/Y6976DXvdW79hr3vr92Ev3LABe+lZK9ywAXvpWSvcsAF76Vkr3LABe+lZK9ywAXvpWcvVsAEhqoYNCFE1bECIqmEDQixz6xSiatiAEFXDBoSoGjYgRNWwASGqho1DiKthA0LJy/5VBQGUyBo2oER2qR+Oa5E1bECJrGEDSmQNG1Aia9iAElnDBpTIGjagRNawcSixNWxAiaxhA0pkDRtQImvYgJLzKZE1bECJrGEDSmQNG1Aia9iAElnDxqHE1rABJbKGDSiRNWxAiaxhA0rOp0TWsAElsoYNKJE1bECJrGEDSmQNGyvKRNawsZzIGjaWE1nDxnIia9hYTmw32E++ho3lxPcyjq5hY4UVyRo2lhNZw8ZyckInsoaN5US2P9WWkFk+IMKZZdjr5qhgr5ujgr1ujgr2Lm2vm6OCvW6OCva6OSrY6+aoYK+bWT7shTPLsJeetcKZZdhLz1rhzDLspWetcGYZ9tKzVjizDHuqzPIhxJVZhpBujgr2ujkq2OvmqGDv0va6OSrY6+aoYK+bo4K9bo4K9ro5qsNeOLMMe+lZK5xZhr30rBXOLMNeetYKZ5ZhLz1rhTPLsJeetVyZZQhRZZYhRJVZhhBVZhlCLHPrFKLKLEOIKrMMIarMMoSoMssQososH0JcmWUIJS/7V6FOKJFllqFEdkwSx7XIMstQIsssQ4ksswwlsswylMgyy1AiyyxDiSyzfCixZZahRJZZhhJZZhlKZJllKDmfEllmGUpkmWUokWWWoUSWWYYSWWb5UGLLLEOJLLMMJbLMMpTIMstQcj4lsswylMgyy1AiyyxDiSyzDCWyzPKKMpFllpcTWWZ5OZFllpcTWWZ5OfFlAukyy8uJ72UcXWZ5hRXJMsvLiSyzvJyc0Ikss7ycyPan5v/c7bv27aHj9sJmnBv43Pz3R+2Nv9gf4kNVfKqKl03WvMiam6z5LmvusuZV1rzJmstO0CI7QovsDDXZGWqyM9RkZ6jJzlCTnaEmO0MtbIaehB5OuD2T6uP0kFe/JMxowr6FE0o4wcIJt/e28Vg8PvZLgocTajihhRPurum69V8frdu4JIxwwowm+BZOKOGEuz+t1R4frXZNaOGEu9/ptj/OurVqV4S6hRPCv0r19pr282ep9kvCCCfMaELbwgklnGDhhD2c4OGEGk5o4YQPrunWLgkjnHB/TZ87X78k9Ntr+ty9nxFKOMHCCXfXdDszGm2blwQPJ9RwQgsn9HDC7TU9HxdSt7JdEmY0YWzhhBJOsHDCHk7wcEINJ7RwQv8g4XJNjxFOuL+mHydaml0S5u01fb4OfUYo4QQLJ9ye06/+LTo9nFDDCS2c0MMJI5wQ/ubkyXHujyG6JzRsdFdu2Oiu3LDRXblho7tyw0Z35YaN7soNG92VGza6KzdsdFdu2Oiu3LDRXblho7tyw0Z35YaN7soNG92VGza6KzdsdFdu2Oiu3LDRXblhoztZw0Z3soaN7soNG92VGza6KzdsdFdu2Oiu3LDRXblho7tyw0Z35YaN7soNG92VGza6KzdswF561go3bMBeetYKN2x0V27YgL30rBVu2Oiu3LDRnaxhA0JUDRsQomrYgBBVwwaEWObWKUTVsNGdrGGjO1nDRneyho3uZA0b3ckaNrrTNWx0p2vY6E7XsNGdrmGjO13DRne6ho3udA0b3ekaNrrTNWx0p2vY6E7XsNGdrmGjO13DRne6ho3udA0b3ekaNrrTNWx0p2vY6E7XsNGdrmGjO13DRne6ho3udA0b3ekaNrrTNWx0p2vY6E7XsNGdrmGjO13DRne6ho3ufA0by4msYWM5kTVsLCeyho3lRHaD/XIia9hYTnwv4+gaNlZYkaxhYzmRNWwsJyd0ImvYWE5k+9Moog0bh7jm9eCHuObt4Ie4aMMGzDVvB4e55u3gMNe8HRzmLmuueTs4zDUbNmAuO0FFGzZgLjtDRRs2YC47Q0UbNmAuO0NFGzZgLjtDgxs2QOjhhNiGDRBmNCG4YQOEEk6wcEJswwYIHk6o4YQWToht2ABhhBNmNCG4YQOEEk6IbdgAoYUTYu+JPAjBDRsghH+Vghs2QBjhhBlNCG7YAKGEEyycsIcTPJxQwwktnBDbsAHCCCfENmzgz1mxDRsglHCChRNiGzZA8HBCDSe0cEIPJ8Q2bIAwownBDRsglHCChRP2cIKHE2o4oYUTYhs2QBjhhNiGDRyCiG3YAKGEEyycENuwAYKHE2o4oYUTejhhhBPC35xEN2zMLaFh44AIN2zAXvfWb9jr3voNe91bv2Hv0va6t37DXvfWb9jr3voNe91bv2Gv27Bx2As3bMBeetYKN2zAXnrWCjdswF561go3bMBeetYKN2zAnqph4xDiatiAkO6t37DXvfUb9rq3fsPepe11b/2Gve6t37DXvfUb9rq3fsNe99bvw164YQP20rNWuGED9tKzVrhhA/bSs1a4YQP20rNWuGED9tKzlqthA0JUDRsQomrYgBBVwwaEWObWKUTVsAEhqoYNCFE1bECIqmEDQlQNG4cQV8MGhJKX/asKAiiRNWxAiexSPxzXImvYgBJZwwaUyBo2oETWsAElsoYNKJE1bECJrGHjUGJr2IASWcMGlMgaNqD0/9SdbXIjx5JsN/RMlhkV+bW42fsrzxYAjU1BoABE0P33Zd1zxGZFdIPp6WQNG1ByPiWyhg0okTVsQImsYQNKZA0bUCJr2DiV2Bo2oETWsAElsoYNKJE1bEDJ+ZTIGjagRNawASWyhg0okTVsQImsYWNHmcgaNrYTWcPGdiJr2NhOZA0b24nsBvvtRNawsZ34Poyja9jYYUWyho3tRNawsZ2c0ImsYWM7sc2nkZFZHtKZ5SGdWR7SmeUhnVke0pnlIZ1ZHtKZ5SGdWR7SmeUhnVke0pnlIZ1ZHtKZ5SGdWR7SmeUhnVke0pnlIZ1ZHtKZ5cGWWR5smeUhnVke0pnlIZ1ZHtKZ5SGdWR7SmeUhnVke0pnlIZ1ZHtKZ5SGdWR7SmeUhnVke0pnlIZ1ZHtKZ5SGdWR7SmeUhnVkebJnlwZZZHmyZ5cGWWR5smeXBllkebJnlwZZZHmyZ5cGWWR5smeXBl1kefJnlwZdZHnyZ5cGXWR58meXBl1kefJnlwZdZHnyZ5cGXWR58meXBl1kefJnlwZdZHnyZ5cGXWR58meXBl1kefJnlwZdZHnyZ5cGXWR58meXBl1kefJnlwZdZHnyZ5cGXWR58meVBmFkehJnlQZhZHoSZ5UGYWR6EmeVBmFkehJnlQZhZHoSZ5UGYWR6EmeVBl1keZT3JLDcft+daH/8O+d4hdvhMMp9F5vMk/v2LQpVNyNiEDjYhZxNqbEKdTYhtTle2QV3ZJrWxTWpjm9TGNqmNbVIb26Q2tkltgZP6zhgJjM/n6fdOxG6hRSZ0FDahyiZkbEIHm5CzCTU2oc4mNNiE2Cb1wTapnW1SO9ukdrZJ7WyT2tkmtbNNameb1B44qe+MmcBY8YxWEhg1gWEJjCOB4QmMlsDoCYyE97x//rP7IkiwKZZC+fzP/Qe/yOsr479llBRKyp/+8C9Q/vXo/Ka0FEpPoYwUykyhrAzK/Mb78q8HfDelplAshXKkUDyF0lIoPYUyUigzhbIyKOsL7/6/H1jdlJpCsRTKkULxFEpLofQUykihzBTKF979fz+K/OeYVsnB1ByMZ/wTppaWg+k5mJGC+cKJwB9hag7GcjBHDib+van1+gzvuD82xovPdr3cjhS7vThRPO+zYhX/n398CPzfPzE+xaeq+FIVvx4WEuZV1txkzQ9Zc5c1b7LmXdZcdoNW2RVaZXeoye5Qk92hJrtDTXaHmuwONdkdamE79E4Y4YSPd1K7/erWm18SVjThKOGEGk6wcMLHs23eXh6fxyXBwwktnNDDCZ++063cPpBqZV4SZjhhRRO8hBNqOOHTn9Zmty9tdk3o4YRP/6T7cTt20ZtdEVoJJ4R/l9rH7/T9Q+bWxiVhhhNWNKGXcEINJ1g44QgneDihhRN6OOGL73Tvl4QZTvj8nb5PvnFJGB+/0/fp/YxQwwkWTvj0ne73A7K9rEuChxNaOKGHE0Y44eN3erUboZZLwoomzBJOqOEECycc4QQPJ7RwQg8njC8SLt/pOcMJn7/Tt6N03S4J6+N3+v5x6DNCDSdYOOHjPf3q36LLwwktnNDDCSOcMMMJ4Z+cPDm3+jWEPTmt9h/vwCy34Ve91itITb5Z+ouXGtmzs04y9iZtf0jbu7R9k7bv0vZD2n5K2y9le5PetSa9a01615r0rjXpXWvSu9akd61J71qT3rXGsmtvQgfL+rwLJW/EL95CZs9OvcnYH9L2Lm3fpO27tP2Qtp/S9kvZ3ou0vfSudeld69K71qV3rUvvWpfetS69a11617r0rm0su/YuxLI+70IsG/EuxLLk7kIse+suxLKK7kIs2+UuxLIw7kIsO+AuxDLWb0KdbVL35Nf+1f3P9ixR8rtKXMXc+7hWpfsuDeNTOviUssumX9yGbc+yEr+rNPmUFp3SLHxKlU8pfS79+x3U9ixR8rtKzqfU+JQ6n9LgU5p8SotOaRU+pcqnlD29X9xVbs+yQ7+r5HxKjU+p8ykNPqXJp7TolJ5VCfyuU/b8flFSsJ2M0OkgdOp0HzI960r4XSe+D+NqWXxO2Xm/HzkdhE5O6NQIndjm0xRt2DjFNa8HP8U1bwc/xUUbNmCueTs4zDVvB4e55u3gMHdZc83bwWGu2bABc9kNKtqwAXPZHSrasAFz2R0q2rABc9kdKtqwAXPZHRrcsAHCCCfENmyAsKIJwQ0bINRwgoUTYhs2QPBwQgsn9HBCbMMGCDOcsKIJwQ0bINRwQmzDBgg9nBB7T+RJCG7YACH8uxTcsAHCDCesaEJwwwYINZxg4YQjnODhhBZO6OGE2IYNEGY4IbZhA7/Oim3YAKGGEyycENuwAYKHE1o4oYcTRjghtmEDhBVNCG7YAKGGEyyccIQTPJzQwgk9nBDbsAHCDCfENmzgEERswwYINZxg4YTYhg0QPJzQwgk9nDDCCTOcEP7JSXTDxjESGjZOiHDDBux1b/2Gve6t37DXvfUb9i5tr3vrN+x1b/2Gve6t37DXvfUb9roNG6e9cMMG7KV3rXDDBuyld61wwwbspXetcMMG7KV3rXDDBuypGjZOIa6GDQjp3voNe91bv2Gve+s37F3aXvfWb9jr3voNe91bv2Gve+s37HVv/T7thRs2YC+9a4UbNmAvvWuFGzZgL71rhRs2YC+9a4UbNmAvvWu5GjYgRNWwASGqhg0IUTVsQIhlb92FqBo2IETVsAEhqoYNCFE1bECIqmHjFOJq2IBQ8mv/qoIASmQNG1Aiu9QPx7XIGjagRNawASWyhg0okTVsQImsYQNKZA0bUCJr2DiV2Bo2oETWsAElsoYNKJE1bEDJ+ZTIGjagRNawASWyhg0okTVsQImsYeNUYmvYgBJZwwaUyBo2oETWsAEl51Mia9iAElnDBpTIGjagRNawASWyho0dZSJr2NhOZA0b24msYWM7kTVsbCeyG+y3E1nDxnbi+zCOrmFjhxXJGja2E1nDxnZyQieyho3tRDaf3BMyyydEOLMMe90cFex1c1Sw181Rwd6l7XVzVLDXzVHBXjdHBXvdHBXsdTPLp71wZhn20rtWOLMMe+ldK5xZhr30rhXOLMNeetcKZ5ZhT5VZPoW4MssQ0s1RwV43RwV73RwV7F3aXjdHBXvdHBXsdXNUsNfNUcFeN0d12gtnlmEvvWuFM8uwl961wpll2EvvWuHMMuyld61wZhn20ruWK7MMIarMMoSoMssQososQ4hlb92FqDLLEKLKLEOIKrMMIarMMoSoMsunEFdmGULJr/2rUCeUyDLLUCI7JonjWmSZZSiRZZahRJZZhhJZZhlKZJllKJFllqFEllk+ldgyy1AiyyxDiSyzDCWyzDKUnE+JLLMMJbLMMpTIMstQIsssQ4kss3wqsWWWoUSWWYYSWWYZSmSZZSg5nxJZZhlKZJllKJFllqFEllmGEllmeUeZyDLL24kss7ydyDLL24kss7yd+DKBdJnl7cT3YRxdZnmHFckyy9uJLLO8nZzQiSyzvJ3I5lOzvz7tu/Zy03F7YTPvA3wVf3ypvfEb+1N8qoovVfFaZM2rrLnJmh+y5i5r3mTNu6y57Aatsiu0yu5Qk92hJrtDTXaHmuwONdkdarI71MJ26J0wwgkf76R2Oz3kzS8JK5pwlHBCDSdYOOHj2TZvL4/P45Lg4YQWTujhhE/f6VbG31/ayrwkzHDCiiZ4CSfUcMKnP63Nbl/a7JrQwwmf/kn343bWrTe7IrQSTgj/LrWP32m//yy1cUmY4YQVTeglnFDDCRZOOMIJHk5o4YQeTvjiO937JWGGEz5/p++Tb1wSxsfv9H16PyPUcIKFEz59p/s9o9HLuiR4OKGFE3o4YYQTPn6n1+1C6l7LJWFFE2YJJ9RwgoUTjnCChxNaOKGHE8YXCZfv9JzhhM/f6duJlm6XhPXxO33/OPQZoYYTLJzw8Z5+9W/R5eGEFk7o4YQRTpjhhPBPTp4c5/4aoltCw0Y35YaNbsoNG92UGza6KTdsdFNu2Oim3LDRTblho5tyw0Y35YaNbsoNG92UGza6KTdsdFNu2Oim3LDRTblho5tyw0Y35YaNbsoNG92UGza6kTVsdCNr2Oim3LDRTblho5tyw0Y35YaNbsoNG92UGza6KTdsdFNu2Oim3LDRTblho5tywwbspXetcMMG7KV3rXDDRjflhg3YS+9a4YaNbsoNG93IGjYgRNWwASGqhg0IUTVsQIhlb92FqBo2upE1bHQja9joRtaw0Y2sYaMbWcNGN7qGjW50DRvd6Bo2utE1bHSja9joRtew0Y2uYaMbXcNGN7qGjW50DRvd6Bo2utE1bHSja9joRtew0Y2uYaMbXcNGN7qGjW50DRvd6Bo2utE1bHSja9joRtew0Y2uYaMbXcNGN7qGjW50DRvd6Bo2utE1bHSja9joRtew0Y2vYWM7kTVsbCeyho3tRNawsZ3IbrDfTmQNG9uJ78M4uoaNHVYka9jYTmQNG9vJCZ3IGja2E9t8WqING6e45vXgp7jm7eCnuGjDBsw1bweHuebt4DDXvB0c5i5rrnk7OMw1GzZgLrtBRRs2YC67Q0UbNmAuu0NFGzZgLrtDRRs2YC67Q4MbNkAY4YTYhg0QVjQhuGEDhBpOsHBCbMMGCB5OaOGEHk6IbdgAYYYTVjQhuGEDhBpOiG3YAKGHE2LviTwJwQ0bIIR/l4IbNkCY4YQVTQhu2AChhhMsnHCEEzyc0MIJPZwQ27ABwgwnxDZs4NdZsQ0bINRwgoUTYhs2QPBwQgsn9HDCCCfENmyAsKIJwQ0bINRwgoUTjnCChxNaOKGHE2IbNkCY4YTYhg0cgoht2AChhhMsnBDbsAGChxNaOKGHE0Y4YYYTwj85iW7YGDOhYeOECDdswF731m/Y6976DXvdW79h79L2urd+w1731m/Y6976DXvdW79hr9uwcdoLN2zAXnrXCjdswF561wo3bMBeetcKN2zAXnrXCjdswJ6qYeMU4mrYgJDurd+w1731G/a6t37D3qXtdW/9hr3urd+w1731G/a6t37DXvfW79NeuGED9tK7VrhhA/bSu1a4YQP20rtWuGED9tK7VrhhA/bSu5arYQNCVA0bEKJq2IAQVcMGhFj21l2IqmEDQlQNGxCiatiAEFXDBoSoGjZOIa6GDQglv/avKgigRNawASWyS/1wXIusYQNKZA0bUCJr2IASWcMGlMgaNqBE1rABJbKGjVOJrWEDSmQNG1Aia9iAElnDBpScT4msYQNKZA0bUCJr2IASWcMGlMgaNk4ltoYNKJE1bECJrGEDSmQNG1ByPiWyhg0okTVsQImsYQNKZA0bUCJr2NhRJrKGje1E1rCxncgaNrYTWcPGdiK7wX47kTVsbCe+D+PoGjZ2WJGsYWM7kTVsbCcndCJr2NhOZPNptoTM8gkRzizDXjdHBXvdHBXsdXNUsHdpe90cFex1c1Sw181RwV43RwV73czyaS+cWYa99K4VzizDXnrXCmeWYS+9a4Uzy7CX3rXCmWXYU2WWTyGuzDKEdHNUsNfNUcFeN0cFe5e2181RwV43RwV73RwV7HVzVLDXzVGd9sKZZdhL71rhzDLspXetcGYZ9tK7VjizDHvpXSucWYa99K7lyixDiCqzDCGqzDKEqDLLEGLZW3chqswyhKgyyxCiyixDiCqzDCGqzPIpxJVZhlDya/8q1AklsswylMiOSeK4FllmGUpkmWUokWWWoUSWWYYSWWYZSmSZZSiRZZZPJbbMMpTIMstQIsssQ4ksswwl51MiyyxDiSyzDCWyzDKUyDLLUCLLLJ9KbJllKJFllqFEllmGEllmGUrOp0SWWYYSWWYZSmSZZSiRZZahRJZZ3lEmsszydiLLLG8nsszydiLLLG8nvkwgXWZ5O/F9GEeXWd5hRbLM8nYiyyxvJyd0Isssbyeq+bRslScBrWOUv59zezy2xv2x62TU68fqe4/Ze48d//Wxc/sf9UkEY5Tbn9Jojw73Wto/HhzvPjjffXC9+eD12fyfPFjffdDeffDyj3GW2x/jLM8e9HcfbO8+2N99cLz74Hz3wfXmg9fHUuf9M+Rz1D15sL77oL374PHug/7ug+3dB/u7D17/5Mxxe3D1Jw/Odx9cbz54fcjqJw/Wdx+0dx883n3w8idn1dtrteqT1+r6sM5PHuzvPjjefXC+++B688HrQx8/ebC+eNCe/Dl2e/fB490Hr39yjtsEWP5kAlyf9vjJg/3dB8e7D853H1xvPjjKuw9e/+T0+1+oi/v/evL//ZcvfmAsB3PkYDwH03IwPQczcjAzB7NSMNfnNr6PyZkCM2cKzJwpMHOmwMyZAjNnCsycKTBzpsDMmQIrZwqsnCmwcqbAypkCK2cKrJwpsHKmwMqZAitnCqycKfDk98gBnJrEsSTOkcTxJE5L4vQkzkjizCRO0jyoSfOgJs2DmjQPatI8qEnzoCbNg5o0D2rSPKhJ86AmzQNLmgeWNA8saR5Y0jywpHlgSfPAkuaBJc0DS5oHljQPjqR5cCTNgyNpHhxJ8+BImgdH0jw4kubBkTQPjqR5cCTNA0+aB540DzxpHnjSPPCkeeBJ88CT5oEnzQNPmgeeNA9a0jxoSfOgJc2DljQPWtI8aEnzoCXNg5Y0D1rSPGhJ86AnzYOeNA960jzoSfOgJ82DnjQPetI86EnzoCfNg540D0bSPEg6g1iTDiHWpFOINekYYk06h1iTDiLWpJOINekoYk06i1iTDiPWpNOINek4Yk06j1iTDiTWpBOJNelIYk06k1iTDiXWpFOJNelYYk06l1iTDibWpJOJNeloYk06m1iTDifWpNOJNel4Yk06n2hJ5xMt6XyiJZ1PtKTziVY8idOSOD2JM5I4M4mTNA+Szida0vlESzqfaEnnEy3pfKIlnU+0pPOJlnQ+0ZLOJ1rS+URLOp9oSecTLel8oiWdT7Sk84mWdD7Rks4nWtL5REs6n2hJ5xMt6XyiJZ1PtKTziZZ0PtGSzida0vlESzqfaEnnEy3pfKIlnU+0pPOJlnQ+0ZLOJ1rS+URLOp9oXzjP18rt5ptW/3GJrtd/YmYK5gun35rdMUd7hrEczJGD8RxMy8H818Xzj0fH249+4RjCT36+v3AK4UeYloPpOZicEfeFEwjNb/eRt2bPMCsF84XzBz/C1ByM5WC+MAWOeccczzCeg2k5mJ6DGTmYmYNZKcv0C6cOfoTJ+Wvbyvlr28r5a9sXThz8CJPz17YvnDf4EWbkYGYOJmUKHKXkYGoOxnIwRw7GczAtB9NzMCMHM3MwOVOg5kyBmjMFas4UqDlToOZMgZozBWrOFKg5U6DmTIGaMwUsZwpYzhSwnClgOVPAcqaA5UwBy5kCljAFxl/XjX3Nb+UftfX/1bP7fyGz3T5/mrP++5fWOu/2Zv/4CMEeQpNNaLEJXf9951eNKp2R0RkddEZOZ9TojDqdEd3ErnQju9LNbKOb2UY3s41uZhvdzDa6mW10M9sCZ/YDMjIgn0/WVerfX7uO8oXv7WIzOgqdUaUzMjqjg87I6YwanVGnMxp0RnQz+6Cb2U43s51uZjvdzHa6me10M9vpZrbTzWwPnNkPyMyArARIKxmQmgGxDMiRAfEMSMuA9AxIxhvfP/8RrqUcty8u1a4xloP5/A+/mj9mcb/+hKGvlP+aUXIwOT8Cw7+A6euOmf0a03IwPQczcjAzB7NSMPMb702vD8y4xtQcjOVgjhyM52BaDqbnYEYOZuZgVgpmfWEK1Oq3L65+/ReoVXMwloM5cjCeg2k5mJ6DGTmYmYP5whSow+6YOS8xT5q/Azg1ieMp/8SppSVxehJn5HC+cM7wZ5yaxLEkzpHEyXh/1vUJ4XF/bowXHwl7uaWG3dq/f+m8T41VHmebz8+O3/mgeV0fJZYwX7Lm10NDQ73qqpuu+qGr7rrqTVe966rr7tKqu0yr7jY13W1qutvUdLep6W5T092mprtNLWybPhAjHvHxdmq33/p682vECkccJR5R4xEWj/h4ys3bS+TzuEZ4PKLFI3o84tO3u5Xb51WtzGvEjEescISXeESNR3z6Q9vs9qXNniB6POLTP+5+3M5u9GaXiFbiEfHfqPbx233/NLq1cY2Y8YgVjuglHlHjERaPOOIRHo9o8Ygej/ji2937NWLGIz5/u+9jcFwjxsdv932YP0XUeITFIz59u/v9+G0v6xrh8YgWj+jxiBGP+PjtXu2GqOUascIRs8QjajzC4hFHPMLjES0e0eMR44uI67d7znjE52/37Xxet2vE+vjtvn+K+hRR4xEWj/h4d7/8F+vyeESLR/R4xIhHzHhE/McsT07Ffo/hT07A1X7cTwb39uKXNtXLbRJWr/WS8uS45X/D+LxjxqtfJH3x1iV/dnpKR9+09Q9tfdfWb9r6XVt/aOtPbf0lrW/aW9e0t65pb13T3rqmvXVNe+ua9tY17a1r2lvXWLbu3ehgWaQPo+Td+M1r0vzZOTod/UNb37X1m7Z+19Yf2vpTW39J63vR1tfeuq69dV1767r21nXtrevaW9e1t65rb13X3rqNZes+jFgW6cOIZTc+jFjW3cOIZYM9jFiW0sOIZc88jFhWx8OIZRs8jFgG/N2o083snvz2v7yt2p9FVX7ZKfmn++U9Z/4sgPG736dhhE4HoVPPdnpxd7c/i1/8stMkdFp8TrMQOlVCp/T59OK2bH8WUvllJyd0aoROndBpEDpNQqfF57QKoVMldMqe46+uVfdncaRfdnJCp0bo1AmdBqHTJHRafE7Pug9+WSp7kr9qVdhSxih1MEp1vg+hnpU7/LIU4cd1tSxCqewY4c+kDkYpZ5RqjFJsc6p11VKQ01z0HvPTXPQa89NctRQE6qLXmENd9BpzqIteYw5111UXvcYc6qKlIFDX3aWqpSBQ192mqqUgUNfdpqqlIFDX3aaqpSBQ192m0aUgQIx4RHApCBArHBFdCgJEjUdYPCK4FAQIj0e0eESPRwSXggAx4xErHBFdCgJEjUcEl4IA0eMRwbdVnojoUhAg4r9R0aUgQMx4xApHRJeCAFHjERaPOOIRHo9o8YgejwguBQFixiOCS0HwO7DgUhAgajzC4hHBpSBAeDyixSN6PGLEI4JLQYBY4YjoUhAgajzC4hFHPMLjES0e0eMRwaUgQMx4RHApCM5SBJeCAFHjERaPCC4FAcLjES0e0eMRIx4x4xHxH7OEl4L0llEKclKUS0GgL3w9OfSFryeHvvD15NB3bX3h68mhL3w9OfSFryeHvvD15NAXLgU59ZVLQaCvvXWVS0Ggr711lUtBoK+9dZVLQaCvvXWVS0Ggz1UKchqRlYLASPh6cugLX08OfeHryaHv2vrC15NDX/h6cugLX08OfeHryaEvfD35qa9cCgJ97a2rXAoCfe2tq1wKAn3tratcCgJ97a2rXAoCfe2tS1YKAiOuUhAYcZWCwIirFARGLBvsYcRVCgIjrlIQGHGVgsCIqxQERlylIKcRWSkIjJLf/peFCXBiKwWBE9stgzjlxVYKAie2UhA4sZWCwImtFARObKUgcGIrBYETWynI6URXCgIntlIQOLGVgsCJrRQETk7oxFYKAie2UhA4sZWCwImtFARObKUgpxNdKQic2EpB4MRWCgIntlIQODmhE1spCJzYSkHgxFYKAie2UhA4sZWC7GwUWynIlmIrBdlSbKUgW4qtFGRLsV22v6XYSkG2FOHHdXylIDsEyVYKsqXYSkG2lDNKsZWCbCm2OTUsIxJ9UpQj0dAXDmdBXzicBX3hcBb0XVtfOJwFfeFwFvSFw1nQFw5nQV84En3qK0eioa+9dZUj0dDX3rrKkWjoa29d5Ug09LW3rnIkGvpckejTiCwSDSPhcBb0hcNZ0BcOZ0HftfWFw1nQFw5nQV84nAV94XAW9IXDWae+ciQa+tpbVzkSDX3trasciYa+9tZVjkRDX3vrKkeioa+9dcki0TDiikTDiCsSDSOuSDSMWDbYw4grEg0jrkg0jLgi0TDiikTDiCsSfRqRRaJhlPz2v4yLwoktEg0ntjOWOOXFFomGE1skGk5skWg4sUWi4cQWiYYTWyQaTmyR6NOJLhINJ7ZINJzYItFwYotEw8kJndgi0XBii0TDiS0SDSe2SDSc2CLRpxNdJBpObJFoOLFFouHEFomGkxM6sUWi4cQWiYYTWyQaTmyRaDixRaJ3NootEr2l2CLRW4otEr2l2CLRW4owasgXid5ShB/X8UWidwiSLRK9pdgi0VvKGaXYItFbim1OzfLXp43dXm4+bi905n2Ur+KPL7V3ftF/mk9Z8yVrXouuetVVN131Q1fdddWbrnrXVdfdpVV3mVbdbWq629R0t6npblPT3aamu01Nd5ta2DZ9IEY84uPt1G4Hj7z5NWKFI44Sj6jxCItHfDzl5u0l8nlcIzwe0eIRPR7x6dvdyvj7S1uZ14gZj1jhCC/xiBqP+PSHttntS5s9QfR4xKd/3P24HZjrzS4RrcQj4r9R7eO32+8/UW1cI2Y8YoUjeolH1HiExSOOeITHI1o8oscjvvh2936NmPGIz9/u+xgc14jx8dt9H+ZPETUeYfGIT9/ufk+A9LKuER6PaPGIHo8Y8YiP3+51uyy713KNWOGIWeIRNR5h8YgjHuHxiBaP6PGI8UXE9ds9Zzzi87f7djSm2zViffx23z9FfYqo8QiLR3y8u1/+i3V5PKLFI3o8YsQjZjwi/mOWJ8fFv8dYJaMUZBXpUpBVpEtBVpEuBVlFuhRkFelSkFWkS0FWkS4FWUW6FGQV6VKQVaRLQVaRLgVZRboUZBXpUpBVpEtBVpEuBVlFuhRkFelSkFWkS0FWkS4FWYWtFGQVtlKQVaRLQVaRLgVZRboUZBXpUpBVpEtBVpEuBVlFuhRkFelSkFWkS0FWkS4FWUW6FAT62ltXuRQE+tpbV7kUZBXpUhDoa29d5VKQVaRLQVZhKwWBEVcpCIy4SkFgxFUKAiOWDfYw4ioFWYWtFGQVtlKQVdhKQVZhKwVZha0UZBW+UpBV+EpBVuErBVmFrxRkFb5SkFX4SkFW4SsFWYWvFGQVvlKQVfhKQVbhKwVZha8UZBW+UpBV+EpBVuErBVmFrxRkFb5SkFX4SkFW4SsFWYWvFGQVvlKQVfhKQVbhKwVZha8UZBW+UpBV+EpBVuErBVmFrxRkFb5SkFX4SkFWISwF2VJspSBbiq0UZEuxlYJsKbbL9rcUWynIliL8uI6vFGSHINlKQbYUWynIlnJGKbZSkC1FN6eGainIaS56j/lpLnqN+WmuWgoCddFrzKEueo051EWvMYe666qLXmMOddFSEKjr7lLVUhCo625T1VIQqOtuU9VSEKjrblPVUhCo627T6FIQIEY8IrgUBIgVjoguBQGixiMsHhFcCgKExyNaPKLHI4JLQYCY8YgVjoguBQGixiOCS0GA6PGI4NsqT0R0KQgQ8d+o6FIQIGY8YoUjoktBgKjxCItHHPEIj0e0eESPRwSXggAx4xHBpSD4HVhwKQgQNR5h8YjgUhAgPB7R4hE9HjHiEcGlIECscER0KQgQNR5h8YgjHuHxiBaP6PGI4FIQIGY8IrgUBGcpgktBgKjxCItHBJeCAOHxiBaP6PGIEY+Y8Yj4j1miS0Gs9IRSEFCES0G2vu715Ftf93ryra97PfnWd2193evJt77u9eRbX/d68q2vez351tctBYG+cCnI1tfeusKlIFtfe+sKl4Jsfe2tK1wKsvW1t65wKcjWpyoFgRFXKcg20r2efOvrXk++9XWvJ9/6rq2vez351te9nnzr615PvvV1ryff+rrXk0NfuBRk62tvXeFSkK2vvXWFS0G2vvbWFS4F2fraW1e4FGTra29drlKQbURVCrKNqEpBthFVKcg2YtlgDyOqUpBtRFUKso2oSkG2EVUpyDaiKgWBEVcpyDZKfvtfFSZsJ7JSkO1EdsvgPuVFVgqynchKQbYTWSnIdiIrBdlOZKUg24msFGQ7kZWCwImtFGQ7kZWCbCeyUpDtRFYKsp2c0ImsFGQ7kZWCbCeyUpDtRFYKsp3ISkHgxFYKsp3ISkG2E1kpyHYiKwXZTk7oRFYKsp3ISkG2E1kpyHYiKwXZTmSlIH+yUWSlIH+kyEpB/kiRlYL8kSIrBfkjRXbZ/h8pslKQP1KEH9fRlYL8CUGSlYL8kSIrBfkj5YxSZKUgf6TY5lQ9MiLRJ0U5Eg194XAW9IXDWdAXDmdB37X1hcNZ0BcOZ0FfOJwFfeFwFvSFI9GnvnIkGvraW1c5Eg197a2rHImGvvbWVY5EQ1976ypHoqHPFYk+jcgi0TASDmdBXzicBX3hcBb0XVtfOJwFfeFwFvSFw1nQFw5nQV84nHXqK0eioa+9dZUj0dDX3rrKkWjoa29d5Ug09LW3rnIkGvraW5csEg0jrkg0jLgi0TDiikTDiGWDPYy4ItEw4opEw4grEg0jrkg0jLgi0acRWSQaRslv/8u4KJzYItFwYjtjiVNebJFoOLFFouHEFomGE1skGk5skWg4sUWi4cQWiT6d6CLRcGKLRMOJLRINJ7ZINJyc0IktEg0ntkg0nNgi0XBii0TDiS0SfTrRRaLhxBaJhhNbJBpObJFoODmhE1skGk5skWg4sUWi4cQWiYYTWyR6Z6PYItFbii0SvaXYItFbii0SvaUIo4Z8kegtRfhxHV8keocg2SLRW4otEr2lnFGKLRK9pdjmlLUnkejm4/Zg6+PfKd88EH8KTTahxSb0JF/+m0aVzsjojA46I6czanRGnc6IbmJXupFd6Wa20c1so5vZRjezjW5mG93MNrqZbYEz+wEZGZDPJ+s3T9fCaLEZHYXOqNIZGZ3RQWfkdEaNzqjTGQ06I7qZfdDNbKeb2U43s51uZjvdzHa6me10M9vpZrYHzuwHZGZAVgKklQxIzYBYBuTIgHgGpGVAegYk443vn/8Iv0woAGM5mM//8H/y67++Uv5rRsnB5PwIDP8C5sWZfGBaDqbnYEYOZuZgVgpmfuO9eXFqGJiag7EczJGD8RxMy8H0HMzIwcwczErBrC9MgVfHYIGpORjLwRw5GM/BtBxMz8GMHMzMwXxhCrw65ryPfZUkTk3ieMo/cWppSZyexBk5nC+cM/wZpyZxLIlzJHEy3p9xfUJ43J8b48VHwl5uJ5bdXhxYnvepsYr/zz8+O37ng+ZxfZRYwnzJml8PDQ31qqtuuuqHrrrrqjdd9a6rrrtLq+4yrbrb1HS3qeluU9Pdpqa7TU13m5ruNrWwbfpAjHjEx9up3X7r682vESsccZR4RI1HWDzi4yk3by+Rz+Ma4fGIFo/o8YhP3+5Wbp9XtTKvETMescIRXuIRNR7x6Q9ts9uXNnuC6PGIT/+4+3E7u9GbXSJaiUfEf6Pax2/3/dPo1sY1YsYjVjiil3hEjUdYPOKIR3g8osUjejzii29379eIGY/4/O2+j8FxjRgfv933Yf4UUeMRFo/49O3u9+O3vaxrhMcjWjyixyNGPOLjt3u1G6KWa8QKR8wSj6jxCItHHPEIj0e0eESPR4wvIq7f7jnjEZ+/3bfzed2uEevjt/v+KepTRI1HWDzi49398l+sy+MRLR7R4xEjHjHjEfEfszw5Ffs9xvHkBNx/vLaz3CZh9VovKTX5Zuxv3rp0PDs9paNv2vqHtr5r6zdt/a6tP7T1p7b+ktY37a1r2lvXtLeuaW9d0966pr11TXvrmvbWNe2tayxb9250sCzSh1HybvzmNWnHs3N0OvqHtr5r6zdt/a6tP7T1p7b+ktb3oq2vvXVde+u69tZ17a3r2lvXtbeua29d1966rr11G8vWfRixLNKHEctufBixrLuHEcsGexixLKWHEcueeRixrI6HEcs2eBixDPi7Uaeb2T357X95W/XxLKryy05sPeTHswDG736fhhE6HYRO2c3ar+7uPp7FL37ZaRI6LT6nWQidKqFT+nx6cVv28Syk8stOTujUCJ06odMgdJqETovPaRVCp0rolD3HX12rfjyLI/2ykxM6NUKnTug0CJ0modPic3rWffDLUtmT/FWrwpYyRqmDUarzfQj1rNzhl6UIP66rZRFKZccIfyZ1MEo5o1RjlGKbU+6qpSCnueg95qe56DXmp7lqKQjURa8xh7roNeZQF73GHOquqy56jTnURUtBoK67S1VLQaCuu01VS0GgrrtNVUtBoK67TVVLQaCuu02jS0GAGPGI4FIQIFY4IroUBIgaj7B4RHApCBAej2jxiB6PCC4FAWLGI1Y4IroUBIgajwguBQGixyOCb6s8EdGlIEDEf6OiS0GAmPGIFY6ILgUBosYjLB5xxCM8HtHiET0eEVwKAsSMRwSXguB3YMGlIEDUeITFI4JLQYDweESLR/R4xIhHBJeCALHCEdGlIEDUeITFI454hMcjWjyixyOCS0GAmPGI4FIQnKUILgUBosYjLB4RXAoChMcjWjyixyNGPGLGI+I/ZgkvBWlHRinISVEuBYG+8PXk0Be+nhz6wteTQ9+19YWvJ4e+8PXk0Be+nhz6wteTQ1+4FOTUVy4Fgb721lUuBYG+9tZVLgWBvvbWVS4Fgb721lUuBYE+VynIaURWCgIj4evJoS98PTn0ha8nh75r6wtfTw594evJoS98PTn0ha8nh77w9eSnvnIpCPS1t65yKQj0tbeucikI9LW3rnIpCPS1t65yKQj0tbcuWSkIjLhKQWDEVQoCI65SEBixbLCHEVcpCIy4SkFgxFUKAiOuUhAYcZWCnEZkpSAwSn77XxYmwImtFARObLcM4pQXWykInNhKQeDEVgoCJ7ZSEDixlYLAia0UBE5spSCnE10pCJzYSkHgxFYKAie2UhA4OaETWykInNhKQeDEVgoCJ7ZSEDixlYKcTnSlIHBiKwWBE1spCJzYSkHg5IRObKUgcGIrBYETWykInNhKQeDEVgqys1FspSBbiq0UZEuxlYJsKbZSkC3Fdtn+lmIrBdlShB/X8ZWC7BAkWynIlmIrBdlSzijFVgqypdjmVC8ZkeiTohyJhr5wOAv6wuEs6AuHs6Dv2vrC4SzoC4ezoC8czoK+cDgL+sKR6FNfORINfe2tqxyJhr721lWORENfe+sqR6Khr711lSPR0OeKRJ9GZJFoGAmHs6AvHM6CvnA4C/qurS8czoK+cDgL+sLhLOgLh7OgLxzOOvWVI9HQ1966ypFo6GtvXeVINPS1t65yJBr62ltXORINfe2tSxaJhhFXJBpGXJFoGHFFomHEssEeRlyRaBhxRaJhxBWJhhFXJBpGXJHo04gsEg2j5Lf/ZVwUTmyRaDixnbHEKS+2SDSc2CLRcGKLRMOJLRINJ7ZINJzYItFwYotEn050kWg4sUWi4cQWiYYTWyQaTk7oxBaJhhNbJBpObJFoOLFFouHEFok+negi0XBii0TDiS0SDSe2SDScnNCJLRINJ7ZINJzYItFwYotEw4ktEr2zUWyR6C3FFoneUmyR6C3FFoneUoRRQ75I9JYi/LiOLxK9Q5BskegtxRaJ3lLOKMUWid5SdHNq/vVpY7eXm4/bC515H+Wr+ONL7a1f9M+/pqz5kjWvRVe96qqbrvqhq+666k1Xveuq6+7SqrtMq+42Nd1tarrb1HS3qeluU9Pdpqa7TS1smz4QIx7x8XZqt4NH3vwascIRR4lH1HiExSM+nnLz9hL5PK4RHo9o8Ygej/j07W5l/P2lrcxrxIxHrHCEl3hEjUd8+kPb7PalzZ4gejzi0z/uftwOzPVml4hW4hHx36j28dvt95+oNq4RMx6xwhG9xCNqPMLiEUc8wuMRLR7R4xFffLt7v0bMeMTnb/d9DI5rxPj47b4P86eIGo+weMSnb3e/J0B6WdcIj0e0eESPR4x4xMdv97pdlt1ruUascMQs8Ygaj7B4xBGP8HhEi0f0eMT4IuL67Z4zHvH52307GtPtGrE+frvvn6I+RdR4hMUjPt7dL//Fujwe0eIRPR4x4hEzHhH/McuT4+LfY4yZUQoypnQpyJjSpSBjSpeCjCldCjKmdCnImNKlIGNKl4KMKV0KMqZ0KciY0qUgY0qXgowpXQoypnQpyJjSpSBjSpeCjCldCjKmdCnImNKlIGNKl4KMyVYKMiZbKciY0qUgY0qXgowpXQoypnQpyJjSpSBjSpeCjCldCjKmdCnImNKlIGNKl4KMKV0KAn3tratcCgJ97a2rXAoypnQpCPS1t65yKciY0qUgY7KVgsCIqxQERlylIDDiKgWBEcsGexhxlYKMyVYKMiZbKciYbKUgY7KVgozJVgoyJl8pyJh8pSBj8pWCjMlXCjImXynImHylIGPylYKMyVcKMiZfKciYfKUgY/KVgozJVwoyJl8pyJh8pSBj8pWCjMlXCjImXynImHylIGPylYKMyVcKMiZfKciYfKUgY/KVgozJVwoyJl8pyJh8pSBj8pWCjMlXCjImXynImHylIGMSloJsKbZSkC3FVgqypdhKQbYU22X7W4qtFGRLEX5cx1cKskOQbKUgW4qtFGRLOaMUWynIlmKbU7OploKc5qL3mJ/moteYn+aqpSBQF73GHOqi15hDXfQac6i7rrroNeZQFy0FgbruLlUtBYG67jZVLQWBuu42VS0FgbruNlUtBYG67jaNLgUBYsQjgktBgFjhiOhSECBqPMLiEcGlIEB4PKLFI3o8IrgUBIgZj1jhiOhSECBqPCK4FASIHo8Ivq3yRESXggAR/42KLgUBYsYjVjgiuhQEiBqPsHjEEY/weESLR/R4RHApCBAzHhFcCoLfgQWXggBR4xEWjwguBQHC4xEtHtHjESMeEVwKAsQKR0SXggBR4xEWjzjiER6PaPGIHo8ILgUBYsYjgktBcJYiuBQEiBqPsHhEcCkIEB6PaPGIHo8Y8YgZj4j/mCW8FGR5RinISVEuBYG+8PXk0Be+nhz6wteTQ9+19YWvJ4e+8PXk0Be+nhz6wteTQ1+4FOTUVy4Fgb721lUuBYG+9tZVLgWBvvbWVS4Fgb721lUuBYE+VynIaURWCgIj4evJoS98PTn0ha8nh75r6wtfTw594evJoS98PTn0ha8nh77w9eSnvnIpCPS1t65yKQj0tbeucikI9LW3rnIpCPS1t65yKQj0tbcuWSkIjLhKQWDEVQoCI65SEBixbLCHEVcpCIy4SkFgxFUKAiOuUhAYcZWCnEZkpSAwSn77XxYmwImtFARObLcM4pQXWykInNhKQeDEVgoCJ7ZSEDixlYLAia0UBE5spSCnE10pCJzYSkHgxFYKAie2UhA4OaETWykInNhKQeDEVgoCJ7ZSEDixlYKcTnSlIHBiKwWBE1spCJzYSkHg5IRObKUgcGIrBYETWykInNhKQeDEVgqys1FspSBbiq0UZEuxlYJsKbZSkC3Fdtn+lmIrBdlShB/X8ZWC7BAkWynIlmIrBdlSzijFVgqypcjm1FFqQiQaFOFI9NbXDWdtfd1w1tbXDWdtfdfW1w1nbX3dcNbW1w1nbX3dcNbW141EQ184Er31tbeucCR662tvXeFI9NbX3rrCkeitr711hSPRW58qEg0jrkj0NtINZ2193XDW1tcNZ21919bXDWdtfd1w1tbXDWdtfd1w1tbXDWdBXzgSvfW1t65wJHrra29d4Uj01tfeusKR6K2vvXWFI9FbX3vrckWitxFVJHobUUWitxFVJHobsWywhxFVJHobUUWitxFVJHobUUWitxFVJBpGXJHobZT89r+Ki24nskj0diI7Y7lPeZFForcTWSR6O5FForcTWSR6O5FForcTWSR6O5FFouHEFoneTmSR6O1EFoneTmSR6O3khE5kkejtRBaJ3k5kkejtRBaJ3k5kkWg4sUWitxNZJHo7kUWitxNZJHo7OaETWSR6O5FForcTWSR6O5FForcTWST6TzaKLBL9R4osEv1HiiwS/UeKLBL9R4owakgXif4jRfhxHV0k+k8IkiwS/UeKLBL9R8oZpcgi0X+kyOZUfxpeGOWmNNqjdr2W9o8Hx7sPzncfXG8+eH2i/ScP1ncftHcfvHzDZyl/PzjLswf93Qfbuw/2dx8c7z44331wvfng9RHOef88dY755MH67oP27oPHuw/6uw+2dx/s7z54/ZMzx+3B1Z88ON99cL354PUxpJ88WN990N598Hj3wcufnFVvr9WqT16r65MsP3mwv/vgePfB+e6D680Hrw9D/OTB+uJBe/Ln2O3dB493H7z+yTluE2D5kwlwfQbiJw/2dx8c7z44331wvfngKO8+eP2T0+9/eyzu/+vJ//dfvviBsRzMkYPxHEzLwfQczMjBzBzMSsFcH2L4PiZnCsycKTBzpsDMmQIzZwrMnCkwc6bAzJkCM2cKrJwpsHKmwMqZAitnCqycKbBypsDKmQIrZwqsnCmwcqbAk1+gBnBqEseSOEcSx5M4LYnTkzgjiTOTOEnzoCbNg5o0D2rSPKhJ86AmzYOaNA9q0jyoSfOgJs2DmjQPLGkeWNI8sKR5YEnzwJLmgSXNA0uaB5Y0DyxpHljSPDiS5sGRNA+OpHlwJM2DI2keHEnz4EiaB0fSPDiS5sGRNA88aR540jzwpHngSfPAk+aBJ80DT5oHnjQPPGkeeNI8aEnzoCXNg5Y0D1rSPGhJ86AlzYOWNA9a0jxoSfOgJc2DnjQPetI86EnzoCfNg540D3rSPOhJ86AnzYOeNA960jwYSfMg6QxiTTqEWJNOIdakY4g16RxiTTqIWJNOItako4g16SxiTTqMWJNOI9ak44g16TxiTTqQWJNOJNakI4k16UxiTTqUWJNOJdakY4k16VxiTTqYWJNOJtako4k16WxiTTqcWJNOJ9ak44k16XyiJZ1PtKTziZZ0PtGSzida8SROS+L0JM5I4swkTtI8SDqfaEnnEy3pfKIlnU+0pPOJlnQ+0ZLOJ1rS+URLOp9oSecTLel8oiWdT7Sk84mWdD7Rks4nWtL5REs6n2hJ5xMt6XyiJZ1PtKTziZZ0PtGSzida0vlESzqfaEnnEy3pfKIlnU+0pPOJlnQ+0ZLOJ1rS+URLOp9oSecTLel8on3hPF8rt5tvWv3H1bH+z+sPv3Cc7yeYL5x+a3bHHO0ZxnIwRw7GczAtB/NfF88/Hh1vP/qFYwg/+fn+wimEH2FaDqbnYHJG3BdOIDS/3cLdmj3DrBTMF84f/AhTczCWg/nCFDjmHXM8w3gOpuVgeg5m5GBmDmalLNMvnDr4ESbnr20r569tK+evbV84cfAjTM5f275w3uBHmJGDmTmYlClwlJKDqTkYy8EcORjPwbQcTM/BjBzMzMHkTIGaMwVqzhSoOVOg5kyBmjMFas4UqDlToOZMgZozBWrOFLCcKWA5U8BypoDlTAHLmQKWMwUsZwpYwhQYf1231DW/lX/U1v9X0+z/hcx2+/xpzvrvX1rrvNub/eMjBHsITTahxSZ0/fedXzWqdEZGZ3TQGTmdUaMz6nRGdBO70o3sSjezjW5mG93MNrqZbXQz2+hmttHNbAuc2Q/IyIB8PllXqX9/7TrKF763i83oKHRGlc7I6IwOOiOnM2p0Rp3OaNAZ0c3sg25mO93MdrqZ7XQz2+lmttPNbKeb2U43sz1wZj8gMwOyEiCtZEBqBsQyIEcGxDMgLQPSMyAZb3z//Ee4lnLcvrhUu8ZYDubzP/xq/pjF/foThr5S/mtGycHk/AgM/wKmrztm9mtMy8H0HMzIwcwczErBzG+8N70+MOMaU3MwloM5cjCeg2k5mJ6DGTmYmYNZKZj1hSlQq9++uPr1X6BWzcFYDubIwXgOpuVgeg5m5GBmDuYLU6AOu2PmvMQ8af4O4NQkjqf8E6eWlsTpSZyRw/nCOcOfcWoSx5I4RxIn4/1Z1yeEx/25MV58JOzllhp2a//+pfM+NVZ5nG0+Pzt+54PmdX2UWMJ8yZpfDw0N9aqrbrrqh66666o3XfWuq667S6vuMq2629R0t6npblPT3aamu01Nd5ua7ja1sG36QIx4xMfbqd1+6+vNrxErHHGUeESNR1g84uMpN28vkc/jGuHxiBaP6PGIT9/uVm6fV7UyrxEzHrHCEV7iETUe8ekPbbPblzZ7gujxiE//uPtxO7vRm10iWolHxH+j2sdv9/3T6NbGNWLGI1Y4opd4RI1HWDziiEd4PKLFI3o84otvd+/XiBmP+Pztvo/BcY0YH7/d92H+FFHjERaP+PTt7vfjt+f/3TXC4xEtHtHjESMe8fHbvdoNUcs1YoUjZolH1HiExSOOeITHI1o8oscjxhcR12/3nPGIz9/u2/m8bteI9fHbff8U9SmixiMsHvHx7n75L9bl8YgWj+jxiBGPmPGI+I9ZnpyK/R6jPjkBV/txPxnc24tf2lQvt0lYvdZLypPjlv8N4/OOGa9+kfTFW5fqs9NTOvqmrX9o67u2ftPW79r6Q1t/ausvaX3T3rqmvXVNe+ua9tY17a1r2lvXtLeuaW9d0966xrJ170YHyyJ9GCXvxm9ek1afnaPT0T+09V1bv2nrd239oa0/tfWXtL4XbX3trevaW9e1t65rb13X3rquvXVde+u69tZ17a3bWLbuw4hlkT6MWHbjw4hl3T2MWDbYw4hlKT2MWPbMw4hldTyMWLbBw4hlwN+NOt3M7slv/8vbquuzqMovOyX/dL+856w+C2D87vdpGKHTQejUs51e3N1dn8UvftlpEjotPqdZCJ0qoVP6fHpxW3Z9FlL5ZScndGqETp3QaRA6TUKnxee0CqFTJXTKnuOvrlWvz+JIv+zkhE6N0KkTOg1Cp0notPicnnUf/LJU9iR/1aqwpYxR6mCU6nwfQj0rd/hlKcKP62pZhFLZMcKfSR2MUs4o1Ril2OaUddVSkNNc9B7z01z0GvPTXLUUBOqi15hDXfQac6iLXmMOdddVF73GHOqipSBQ192lqqUgUNfdpqqlIFDX3aaqpSBQ192mqqUgUNfdptGlIECMeERwKQgQKxwRXQoCRI1HWDwiuBQECI9HtHhEj0cEl4IAMeMRKxwRXQoCRI1HBJeCANHjEcG3VZ6I6FIQIOK/UdGlIEDMeMQKR0SXggBR4xEWjzjiER6PaPGIHo8ILgUBYsYjgktB8Duw4FIQIGo8wuIRwaUgQHg8osUjejxixCOCS0GAWOGI6FIQIGo8wuIRRzzC4xEtHtHjEcGlIEDMeERwKQjOUgSXggBR4xEWjwguBQHC4xEtHtHjESMeMeMR8R+zhJeCHC2jFOSkKJeCQF/4enLoC19PDn3h68mh79r6wteTQ1/4enLoC19PDn3h68mhL1wKcuorl4JAX3vrKpeCQF976yqXgkBfe+sql4JAX3vrKpeCQJ+rFOQ0IisFgZHw9eTQF76eHPrC15ND37X1ha8nh77w9eTQF76eHPrC15NDX/h68lNfuRQE+tpbV7kUBPraW1e5FAT62ltXuRQE+tpbV7kUBPraW5esFARGXKUgMOIqBYERVykIjFg22MOIqxQERlylIDDiKgWBEVcpCIy4SkFOI7JSEBglv/0vCxPgxFYKAie2WwZxyoutFARObKUgcGIrBYETWykInNhKQeDEVgoCJ7ZSkNOJrhQETmylIHBiKwWBE1spCJyc0ImtFARObKUgcGIrBYETWykInNhKQU4nulIQOLGVgsCJrRQETmylIHByQie2UhA4sZWCwImtFARObKUgcGIrBdnZKLZSkC3FVgqypdhKQbYUWynIlmK7bH9LsZWCbCnCj+v4SkF2CJKtFGRLsZWCbClnlGIrBdlSbHPKLSMSfVKUI9HQFw5nQV84nAV94XAW9F1bXzicBX3hcBb0hcNZ0BcOZ0FfOBJ96itHoqGvvXWVI9HQ1966ypFo6GtvXeVINPS1t65yJBr6XJHo04gsEg0j4XAW9IXDWdAXDmdB37X1hcNZ0BcOZ0FfOJwFfeFwFvSFw1mnvnIkGvraW1c5Eg197a2rHImGvvbWVY5EQ1976ypHoqGvvXXJItEw4opEw4grEg0jrkg0jFg22MOIKxINI65INIy4ItEw4opEw4grEn0akUWiYZT89r+Mi8KJLRINJ7YzljjlxRaJhhNbJBpObJFoOLFFouHEFomGE1skGk5skejTiS4SDSe2SDSc2CLRcGKLRMPJCZ3YItFwYotEw4ktEg0ntkg0nNgi0acTXSQaTmyRaDixRaLhxBaJhpMTOrFFouHEFomGE1skGk5skWg4sUWidzaKLRK9pdgi0VuKLRK9pdgi0VuKMGrIF4neUoQf1/FFoncIki0SvaXYItFbyhml2CLRW4ptTrXy16eN3V5uPm4vdOZ9lK/ijy+1d37Rf5pPWfMla16LrnrVVTdd9UNX3XXVm65611XX3aVVd5lW3W1qutvUdLep6W5T092mprtNTXebWtg2fSBGPOLj7dRuB4+8+TVihSOOEo+o8QiLR3w85ebtJfJ5XCM8HtHiET0e8enb3cr4+0tbmdeIGY9Y4Qgv8Ygaj/j0h7bZ7UubPUH0eMSnf9z9uB2Y680uEa3EI+K/Ue3jt9vvP1FtXCNmPGKFI3qJR9R4hMUjjniExyNaPKLHI774dvd+jZjxiM/f7vsYHNeI8fHbfR/mTxE1HmHxiE/f7n5PgPSyrhEej2jxiB6PGPGIj9/udbssu9dyjVjhiFniETUeYfGIIx7h8YgWj+jxiPFFxPXbPWc84vO3+3Y0pts1Yn38dt8/RX2KqPEIi0d8vLtf/ot1eTyixSN6PGLEI2Y8Iv5jlifHxb/H6CWjFKQX6VKQXqRLQXqRLgXpRboUpBfpUpBepEtBepEuBelFuhSkF+lSkF6kS0F6kS4F6UW6FKQX6VKQXqRLQXqRLgXpRboUpBfpUpBepEtBepEuBemFrRSkF7ZSkF6kS0F6kS4F6UW6FKQX6VKQXqRLQXqRLgXpRboUpBfpUpBepEtBepEuBelFuhQE+tpbV7kUBPraW1e5FKQX6VIQ6GtvXeVSkF6kS0F6YSsFgRFXKQiMuEpBYMRVCgIjlg32MOIqBemFrRSkF7ZSkF7YSkF6YSsF6YWtFKQXvlKQXvhKQXrhKwXpha8UpBe+UpBe+EpBeuErBemFrxSkF75SkF74SkF64SsF6YWvFKQXvlKQXvhKQXrhKwXpha8UpBe+UpBe+EpBeuErBemFrxSkF75SkF74SkF64SsF6YWvFKQXvlKQXvhKQXrhKwXpha8UpBe+UpBe+EpBeiEsBdlSbKUgW4qtFGRLsZWCbCm2y/a3FFspyJYi/LiOrxRkhyDZSkG2FFspyJZyRim2UpAtRTenhmopyGkueo/5aS56jflprloKAnXRa8yhLnqNOdRFrzGHuuuqi15jDnXRUhCo6+5S1VIQqOtuU9VSEKjrblPVUhCo625T1VIQqOtu0+hSECBGPCK4FASIFY6ILgUBosYjLB4RXAoChMcjWjyixyOCS0GAmPGIFY6ILgUBosYjgktBgOjxiODbKk9EdCkIEPHfqOhSECBmPGKFI6JLQYCo8QiLRxzxCI9HtHhEj0cEl4IAMeMRwaUg+B1YcCkIEDUeYfGI4FIQIDwe0eIRPR4x4hHBpSBArHBEdCkIEDUeYfGIIx7h8YgWj+jxiOBSECBmPCK4FARnKYJLQYCo8QiLRwSXggDh8YgWj+jxiBGPmPGI+I9ZwktBRs8oBTkpyqUg0Be+nhz6wteTQ1/4enLou7a+8PXk0Be+nhz6wteTQ1/4enLoC5eCnPrKpSDQ1966yqUg0NfeusqlINDX3rrKpSDQ1966yqUg0OcqBTmNyEpBYCR8PTn0ha8nh77w9eTQd2194evJoS98PTn0ha8nh77w9eTQF76e/NRXLgWBvvbWVS4Fgb721lUuBYG+9tZVLgWBvvbWVS4Fgb721iUrBYERVykIjLhKQWDEVQoCI5YN9jDiKgWBEVcpCIy4SkFgxFUKAiOuUpDTiKwUBEbJb//LwgQ4sZWCwIntlkGc8mIrBYETWykInNhKQeDEVgoCJ7ZSEDixlYLAia0U5HSiKwWBE1spCJzYSkHgxFYKAicndGIrBYETWykInNhKQeDEVgoCJ7ZSkNOJrhQETmylIHBiKwWBE1spCJyc0ImtFARObKUgcGIrBYETWykInNhKQXY2iq0UZEuxlYJsKbZSkC3FVgqypdgu299SbKUgW4rw4zq+UpAdgmQrBdlSbKUgW8oZpdhKQbYU25yaR0Yk+qQoR6KhLxzOgr5wOAv6wuEs6Lu2vnA4C/rC4SzoC4ezoC8czoK+cCT61FeORENfe+sqR6Khr711lSPR0NfeusqRaOhrb13lSDT0uSLRpxFZJBpGwuEs6AuHs6AvHM6CvmvrC4ezoC8czoK+cDgL+sLhLOgLh7NOfeVINPS1t65yJBr62ltXORINfe2tqxyJhr721lWORENfe+uSRaJhxBWJhhFXJBpGXJFoGLFssIcRVyQaRlyRaBhxRaJhxBWJhhFXJPo0IotEwyj57X8ZF4UTWyQaTmxnLHHKiy0SDSe2SDSc2CLRcGKLRMOJLRINJ7ZINJzYItGnE10kGk5skWg4sUWi4cQWiYaTEzqxRaLhxBaJhhNbJBpObJFoOLFFok8nukg0nNgi0XBii0TDiS0SDScndGKLRMOJLRINJ7ZINJzYItFwYotE72wUWyR6S7FForcUWyR6S7FForcUYdSQLxK9pQg/ruOLRO8QJFskekuxRaK3lDNKsUWitxTbnFrtSSS6+bg92Pr4d8o3D8SfQpNNaLEJPcmX/6ZRpTMyOqODzsjpjBqdUaczopvYlW5kV7qZbXQz2+hmttHNbKOb2UY3s41uZlvgzH5ARgbk88n6zdO1MFpsRkehM6p0RkZndNAZOZ1RozPqdEaDzohuZh90M9vpZrbTzWynm9lON7OdbmY73cx2upntgTP7AZkZkJUAaSUDUjMglgE5MiCeAWkZkJ4ByXjj++c/wi8TCsBYDubzP/yf/Pqvr5T/mlFyMDk/AsO/gHlxJh+YloPpOZiRg5k5mJWCmd94b16cGgam5mAsB3PkYDwH03IwPQczcjAzB7NSMOsLU+DVMVhgag7GcjBHDsZzMC0H03MwIwczczBfmAKvjjnvY18liVOTOJ7yT5xaWhKnJ3FGDucL5wx/xqlJHEviHEmcjPdnXJ8QHvfnxnjxkbCX24lltxcHlud9aqzi//OPz47f+aB5XB8lljBfsubXQ0NDveqqm676oavuuupNV73rquvu0qq7TKvuNjXdbWq629R0t6npblPT3aamu00tbJs+ECMe8fF2arff+nrza8QKRxwlHlHjERaP+HjKzdtL5PO4Rng8osUjejzi07e7ldvnVa3Ma8SMR6xwhJd4RI1HfPpD2+z2pc2eIHo84tM/7n7czm70ZpeIVuIR8d+o9vHbff80urVxjZjxiBWO6CUeUeMRFo844hEej2jxiB6P+OLb3fs1YsYjPn+772NwXCPGx2/3fZg/RdR4hMUjPn27+/34bS/rGuHxiBaP6PGIEY/4+O1e7Yao5RqxwhGzxCNqPMLiEUc8wuMRLR7R4xHji4jrt3vOeMTnb/ftfF63a8T6+O2+f4r6FFHjERaP+Hh3v/wX6/J4RItH9HjEiEfMeET8xyxPTsV+jTHKkxNw//HaznKbhNVrvaTU5Juxv3jr0tav2vqmrX9o67u2ftPW79r6Q1t/ausvaX3T3rqmvXVNe+ua9tY17a1r2lvXtLeuaW9d0966xrJ170YHyyJ9GCXvxi9ek7b1TVv/0NZ3bf2mrd+19Ye2/tTWX9L6XrT1tbeua29d1966rr11XXvruvbWde2t69pb17W3bmPZug8jlkX6MGLZjQ8jlnX3MGLZYA8jlqX0MGLZMw8jltXxMGLZBg8jlgF/N+p0M7snv/2vbqveTo3QiayHfJ/yqnzfp2GETgehU3az9ou7u7fTIHSahE6Lz2kWQqdK6JQ+n/79tuztdBA6OaFTI3TqhE6D0GkSOi0+p1UInSqhU/Ycf3Gt+nY6CJ2c0KkROnVCp0HoNAmdFp/Ts+6DX5bKnuQvWhX+SBmj1MEo1fk+hHpW7vDLUoQf19WyCKWyY4Q/kzoYpZxRqjFKsc2p6qKlIDDXvMcc5prXmMNctBRkq2teY77VNa8x3+qa15hvdddV17zGfKtrloJsdd1dKloKstV1t6loKchW192moqUgW113m4qWgmx13W0aXAqyESMeEVsKshErHBFcCrIRNR5h8YjYUpCN8HhEi0f0eERsKchGzHjECkcEl4JsRI1HxJaCbESPR8TeVglEcCnIRsR/o4JLQTZixiNWOCK4FGQjajzC4hFHPMLjES0e0eMRsaUgGzHjEbGlIPt3YLGlIBtR4xEWj4gtBdkIj0e0eESPR4x4RGwpyEascERwKchG1HiExSOOeITHI1o8oscjYktBNmLGI2JLQfZZithSkI2o8QiLR8SWgmyExyNaPKLHI0Y8YsYj4j9mCS8FsSOjFOSkKJeCQF/4enLoC19PDn3h68mh79r6wteTQ1/4enLoC19PDn3h68mhL1wKcuorl4JAX3vrKpeCQF976yqXgkBfe+sql4JAX3vrKpeCQJ+rFOQ0IisFgZHw9eTQF76eHPrC15ND37X1ha8nh77w9eTQF76eHPrC15NDX/h68lNfuRQE+tpbV7kUBPraW1e5FAT62ltXuRQE+tpbV7kUBPraW5esFARGXKUgMOIqBYERVykIjFg22MOIqxQERlylIDDiKgWBEVcpCIy4SkFOI7JSEBglv/0vCxPgxFYKAie2WwZxyoutFARObKUgcGIrBYETWykInNhKQeDEVgoCJ7ZSkNOJrhQETmylIHBiKwWBE1spCJyc0ImtFARObKUgcGIrBYETWykInNhKQU4nulIQOLGVgsCJrRQETmylIHByQie2UhA4sZWCwImtFARObKUgcGIrBdnZKLZSkC3FVgqypdhKQbYUWynIlmK7bH9LsZWCbCnCj+v4SkF2CJKtFGRLsZWCbClnlGIrBdlSbHPqKBmR6JOiHImGvnA4C/rC4SzoC4ezoO/a+sLhLOgLh7OgLxzOgr5wOAv6wpHoU185Eg197a2rHImGvvbWVY5EQ1976ypHoqGvvXWVI9HQ54pEn0ZkkWgYCYezoC8czoK+cDgL+q6tLxzOgr5wOAv6wuEs6AuHs6AvHM469ZUj0dDX3rrKkWjoa29d5Ug09LW3rnIkGvraW1c5Eg197a1LFomGEVckGkZckWgYcUWiYcSywR5GXJFoGHFFomHEFYmGEVckGkZckejTiCwSDaPkt/9lXBRObJFoOLGdscQpL7ZINJzYItFwYotEw4ktEg0ntkg0nNgi0XBii0SfTnSRaDixRaLhxBaJhhNbJBpOTujEFomGE1skGk5skWg4sUWi4cQWiT6d6CLRcGKLRMOJLRINJ7ZINJyc0IktEg0ntkg0nNgi0XBii0TDiS0SvbNRbJHoLcUWid5SbJHoLcUWid5ShFFDvkj0liL8uI4vEr1DkGyR6C3FFoneUs4oxRaJ3lJ0c2r+9Wljt5ebj9sLnXkf5av440vtrV/0z7+mrPmSNa9FV73qqpuu+qGr7rrqTVe966rr7tKqu0yr7jY13W1qutvUdLep6W5T092mprtNLWybPhAjHvHxdmq3g0fe/BqxwhFHiUfUeITFIz6ecvP2Evk8rhEej2jxiB6P+PTtbmX8/aWtzGvEjEescISXeESNR3z6Q9vs9qXNniB6POLTP+5+3A7M9WaXiFbiEfHfqPbx2+33n6g2rhEzHrHCEb3EI2o8wuIRRzzC4xEtHtHjEV98u3u/Rsx4xOdv930MjmvE+Pjtvg/zp4gaj7B4xKdvd78nQHpZ1wiPR7R4RI9HjHjEx2/3ul2W3Wu5RqxwxCzxiBqPsHjEEY/weESLR/R4xPgi4vrtnjMe8fnbfTsa0+0asT5+u++foj5F1HiExSM+3t0v/8W6PB7R4hE9HjHiETMeEf8xy5Pj4t9j+MwoBfEpXQriU7oUxKd0KYhP6VIQn9KlID6lS0F8SpeC+JQuBfEpXQriU7oUxKd0KYhP6VIQn9KlID6lS0F8SpeC+JQuBfEpXQriU7oUxKd0KYhPtlIQn2ylID6lS0F8SpeC+JQuBfEpXQriU7oUxKd0KYhP6VIQn9KlID6lS0F8SpeC+JQuBYG+9tZVLgWBvvbWVS4F8SldCgJ97a2rXAriU7oUxCdbKQiMuEpBYMRVCgIjrlIQGLFssIcRVymIT7ZSEJ9spSA+2UpBfLKVgvhkKwXxyVcK4pOvFMQnXymIT75SEJ98pSA++UpBfPKVgvjkKwXxyVcK4pOvFMQnXymIT75SEJ98pSA++UpBfPKVgvjkKwXxyVcK4pOvFMQnXymIT75SEJ98pSA++UpBfPKVgvjkKwXxyVcK4pOvFMQnXymIT75SEJ98pSA++UpBfBKWgmwptlKQLcVWCrKl2EpBthTbZftbiq0UZEsRflzHVwqyQ5BspSBbiq0UZEs5oxRbKciWYptTramWgpzmoveYn+ai15if5qqlIFAXvcYc6qLXmENd9BpzqLuuuug15lAXLQWBuu4uVS0FgbruNlUtBYG67jZVLQWBuu42VS0FgbruNo0uBQFixCOCS0GAWOGI6FIQIGo8wuIRwaUgQHg8osUjejwiuBQEiBmPWOGI6FIQIGo8IrgUBIgejwi+rfJERJeCABH/jYouBQFixiNWOCK6FASIGo+weMQRj/B4RItH9HhEcCkIEDMeEVwKgt+BBZeCAFHjERaPCC4FAcLjES0e0eMRIx4RXAoCxApHRJeCAFHjERaPOOIRHo9o8YgejwguBQFixiOCS0FwliK4FASIGo+weERwKQgQHo9o8YgejxjxiBmPiP+YJbwUpHtGKchJUS4Fgb7w9eTQF76eHPrC15ND37X1ha8nh77w9eTQF76eHPrC15NDX7gU5NRXLgWBvvbWVS4Fgb721lUuBYG+9tZVLgWBvvbWVS4FgT5XKchpRFYKAiPh68mhL3w9OfSFryeHvmvrC19PDn3h68mhL3w9OfSFryeHvvD15Ke+cikI9LW3rnIpCPS1t65yKQj0tbeucikI9LW3rnIpCPS1ty5ZKQiMuEpBYMRVCgIjrlIQGLFssIcRVykIjLhKQWDEVQoCI65SEBhxlYKcRmSlIDBKfvtfFibAia0UBE5stwzilBdbKQic2EpB4MRWCgIntlIQOLGVgsCJrRQETmylIKcTXSkInNhKQeDEVgoCJ7ZSEDg5oRNbKQic2EpB4MRWCgIntlIQOLGVgpxOdKUgcGIrBYETWykInNhKQeDkhE5spSBwYisFgRNbKQic2EpB4MRWCrKzUWylIFuKrRRkS7GVgmwptlKQLcV22f6WYisF2VKEH9fxlYLsECRbKciWYisF2VLOKMVWCrKl2ObUqBmR6JOiHImGvnA4C/rC4SzoC4ezoO/a+sLhLOgLh7OgLxzOgr5wOAv6wpHoU185Eg197a2rHImGvvbWVY5EQ1976ypHoqGvvXWVI9HQ54pEn0ZkkWgYCYezoC8czoK+cDgL+q6tLxzOgr5wOAv6wuEs6AuHs6AvHM469ZUj0dDX3rrKkWjoa29d5Ug09LW3rnIkGvraW1c5Eg197a1LFomGEVckGkZckWgYcUWiYcSywR5GXJFoGHFFomHEFYmGEVckGkZckejTiCwSDaPkt/9lXBRObJFoOLGdscQpL7ZINJzYItFwYotEw4ktEg0ntkg0nNgi0XBii0SfTnSRaDixRaLhxBaJhhNbJBpOTujEFomGE1skGk5skWg4sUWi4cQWiT6d6CLRcGKLRMOJLRINJ7ZINJyc0IktEg0ntkg0nNgi0XBii0TDiS0SvbNRbJHoLcUWid5SbJHoLcUWid5ShFFDvkj0liL8uI4vEr1DkGyR6C3FFoneUs4oxRaJ3lJcc+q0ehZeGOWmNNqjdr2W9o8Hx7sPzncfXG8+eH2i/ScP1ncftHcfvHzDZyl/PzjLswf93Qfbuw/2dx8c7z44331wvfng9RHOef88dY755MH67oP27oPHuw/6uw+2dx/s7z54/ZMzx+3B1Z88ON99cL354PUxpJ88WN990N598Hj3wcufnFVvr9WqT16r65MsP3mwv/vgePfB+e6D680Hrw9D/OTB+uJBe/Ln2O3dB493H7z+yTluE2D5kwlwfQbiJw/2dx8c7z44331wvfngKO8+eP2T0+9/eyzu/+vJ//dfvviBsRzMkYPxHEzLwfQczMjBzBzMSsFcH2L4PiZnCsycKTBzpsDMmQIzZwrMnCkwc6bAzJkCM2cKrJwpsHKmwMqZAitnCqycKbBypsDKmQIrZwqsnCmwcqbAk1+gBnBqEseSOEcSx5M4LYnTkzgjiTOTOEnzoCbNg5o0D2rSPKhJ86AmzYOaNA9q0jyoSfOgJs2DmjQPLGkeWNI8sKR5YEnzwJLmgSXNA0uaB5Y0DyxpHljSPDiS5sGRNA+OpHlwJM2DI2keHEnz4EiaB0fSPDiS5sGRNA88aR540jzwpHngSfPAk+aBJ80DT5oHnjQPPGkeeNI8aEnzoCXNg5Y0D1rSPGhJ86AlzYOWNA9a0jxoSfOgJc2DnjQPetI86EnzoCfNg540D3rSPOhJ86AnzYOeNA960jwYSfMg6QxiTTqEWJNOIdakY4g16RxiTTqIWJNOItako4g16SxiTTqMWJNOI9ak44g16TxiTTqQWJNOJNakI4k16UxiTTqUWJNOJdakY4k16VxiTTqYWJNOJtako4k16WxiTTqcWJNOJ9ak44k16XyiJZ1PtKTziZZ0PtGSzida8SROS+L0JM5I4swkTtI8SDqfaEnnEy3pfKIlnU+0pPOJlnQ+0ZLOJ1rS+URLOp9oSecTLel8oiWdT7Sk84mWdD7Rks4nWtL5REs6n2hJ5xMt6XyiJZ1PtKTziZZ0PtGSzida0vlESzqfaEnnEy3pfKIlnU+0pPOJlnQ+0ZLOJ1rS+URLOp9oSecTLel8on3hPF8rt5tvWv3H1bH+z+sPv3Cc7yeYL5x+a3bHHO0ZxnIwRw7GczAtB/NfF88/Hh1vP/qFYwg/+fn+wimEH2FaDqbnYHJG3BdOIDS/3cLdmj3DrBTMF84f/AhTczCWg/nCFDjmHXM8w3gOpuVgeg5m5GBmDmalLNMvnDr4ESbnr20r569tK+evbV84cfAjTM5f275w3uBHmJGDmTmYlClwlJKDqTkYy8EcORjPwbQcTM/BjBzMzMHkTIGaMwVqzhSoOVOg5kyBmjMFas4UqDlToOZMgZozBWrOFLCcKWA5U8BypoDlTAHLmQKWMwUsZwpYwhQYf1231DW/lX/U1v9X0+z/hcx2+/xpzvrvX1rrvNub/eMjBHsITTahxSZ0/fedXzWqdEZGZ3TQGTmdUaMz6nRGdBO70o3sSjezjW5mG93MNrqZbXQz2+hmttHNbAuc2Q/IyIB8PllXqX9/7TrKF763i83oKHRGlc7I6IwOOiOnM2p0Rp3OaNAZ0c3sg25mO93MdrqZ7XQz2+lmttPNbKeb2U43sz1wZj8gMwOyEiCtZEBqBsQyIEcGxDMgLQPSMyAZb3z//Ee4lnLcvrhUu8ZYDubzP/xq/pjF/foThr5S/mtGycHk/AgM/wKmrztm9mtMy8H0HMzIwcwczErBzG+8N70+MOMaU3MwloM5cjCeg2k5mJ6DGTmYmYNZKZj1hSlQq9++uPr1X6BWzcFYDubIwXgOpuVgeg5m5GBmDuYLU6AOu2PmvMQ8af4O4NQkjqf8E6eWlsTpSZyRw/nCOcOfcWoSx5I4RxIn4/1Z1yeEx/25MV58JOzllhp2a//+pfM+NVZ5nG0+Pzt+54PmdX2UWMJ8yZpfDw0N9aqrbrrqh66666o3XfWuq667S6vuMq2629R0t6npblPT3aamu01Nd5ua7ja1sG36QIx4xMfbqd1+6+vNrxErHHGUeESNR1g84uMpN28vkc/jGuHxiBaP6PGIT9/uVm6fV7UyrxEzHrHCEV7iETUe8ekPbbPblzZ7gujxiE//uPtxO7vRm10iWolHxH+j2sdv9/3T6NbGNWLGI1Y4opd4RI1HWDziiEd4PKLFI3o84otvd+/XiBmP+Pztvo/BcY0YH7/d92H+FFHjERaP+PTt7vfjt72sa4THI1o8oscjRjzi47d7tRuilmvECkfMEo+o8QiLRxzxCI9HtHhEj0eMLyKu3+454xGfv92383ndrhHr47f7/inqU0SNR1g84uPd/fJfrMvjES0e0eMRIx4x4xHxH7M8ORX7PcZ8cgKu9uN+Mri3F7+0qV5uk7B6rZeUJ8ct/xvG5x0zXv0i6Yu3Ls1np6d09E1b/9DWd239pq3ftfWHtv7U1l/S+qa9dU1765r21jXtrWvaW9e0t65pb13T3rqmvXWNZevejQ6WRfowSt6N37wmbT47R6ejf2jru7Z+09bv2vpDW39q6y9pfS/a+tpb17W3rmtvXdfeuq69dV1767r21nXtrevaW7exbN2HEcsifRix7MaHEcu6exixbLCHEctSehix7JmHEcvqeBixbIOHEcuAvxt1upndk9/+l7dVz2dRlV92Sv7pfnnP2XwWwPjd79MwQqeD0KlnO724u3s+i1/8stMkdFp8TrMQOlVCp/T59OK27PkspPLLTk7o1AidOqHTIHSahE6Lz2kVQqdK6JQ9x19dqz6fxZF+2ckJnRqhUyd0GoROk9Bp8Tk96z74ZansSf6qVWFLGaPUwSjV+T6Eelbu8MtShB/X1bIIpbJjhD+TOhilnFGqMUqxzanVVUtBTnPRe8xPc9FrzE9z1VIQqIteYw510WvMoS56jTnUXVdd9BpzqIuWgkBdd5eqloJAXXebqpaCQF13m6qWgkBdd5uqloJAXXebRpeCADHiEcGlIECscER0KQgQNR5h8YjgUhAgPB7R4hE9HhFcCgLEjEescER0KQgQNR4RXAoCRI9HBN9WeSKiS0GAiP9GRZeCADHjESscEV0KAkSNR1g84ohHeDyixSN6PCK4FASIGY8ILgXB78CCS0GAqPEIi0cEl4IA4fGIFo/o8YgRjwguBQFihSOiS0GAqPEIi0cc8QiPR7R4RI9HBJeCADHjEcGlIDhLEVwKAkSNR1g8IrgUBAiPR7R4RI9HjHjEjEfEf8wSXQpSS0soBQFFuBRk6+teT771da8n3/q615NvfdfW172efOvrXk++9XWvJ9/6uteTb33dUhDoC5eCbH3trStcCrL1tbeucCnI1tfeusKlIFtfe+sKl4JsfapSEBhxlYJsI93rybe+7vXkW1/3evKt79r6uteTb33d68m3vu715Ftf93ryra97PTn0hUtBtr721hUuBdn62ltXuBRk62tvXeFSkK2vvXWFS0G2vvbW5SoF2UZUpSDbiKoUZBtRlYJsI5YN9jCiKgXZRlSlINuIqhRkG1GVgmwjqlIQGHGVgmyj5Lf/VWHCdiIrBdlOZLcM7lNeZKUg24msFGQ7kZWCbCeyUpDtRFYKsp3ISkG2E1kpCJzYSkG2E1kpyHYiKwXZTmSlINvJCZ3ISkG2E1kpyHYiKwXZTmSlINuJrBQETmylINuJrBRkO5GVgmwnslKQ7eSETmSlINuJrBRkO5GVgmwnslKQ7URWCvInG0VWCvJHiqwU5I8UWSnIHymyUpA/UmSX7f+RIisF+SNF+HEdXSnInxAkWSnIHymyUpA/Us4oRVYK8keKbU5Vy4hEnxTlSDT0hcNZ0BcOZ0FfOJwFfdfWFw5nQV84nAV94XAW9IXDWdAXjkSf+sqRaOhrb13lSDT0tbeuciQa+tpbVzkSDX3trasciYY+VyT6NCKLRMNIOJwFfeFwFvSFw1nQd2194XAW9IXDWdAXDmdBXzicBX3hcNaprxyJhr721lWORENfe+sqR6Khr711lSPR0NfeusqRaOhrb12ySDSMuCLRMOKKRMOIKxINI5YN9jDiikTDiCsSDSOuSDSMuCLRMOKKRJ9GZJFoGCW//S/jonBii0TDie2MJU55sUWi4cQWiYYTWyQaTmyRaDixRaLhxBaJhhNbJPp0ootEw4ktEg0ntkg0nNgi0XByQie2SDSc2CLRcGKLRMOJLRINJ7ZI9OlEF4mGE1skGk5skWg4sUWi4eSETmyRaDixRaLhxBaJhhNbJBpObJHonY1ii0RvKbZI9JZii0RvKbZI9JYijBryRaK3FOHHdXyR6B2CZItEbym2SPSWckYptkj0lmKbU1b++rSx28vNx+2FzryP8lX88aX2zi/6T/Mpa75kzWvRVa+66qarfuiqu65601Xvuuq6u7TqLtOqu01Nd5ua7jY13W1qutvUdLep6W5TC9umD8SIR3y8ndrt4JE3v0ascMRR4hE1HmHxiI+n3Ly9RD6Pa4THI1o8oscjPn27Wxl/f2kr8xox4xErHOElHlHjEZ/+0Da7fWmzJ4gej/j0j7sftwNzvdklopV4RPw3qn38dvv9J6qNa8SMR6xwRC/xiBqPsHjEEY/weESLR/R4xBff7t6vETMe8fnbfR+D4xoxPn6778P8KaLGIywe8enb3e8JkF7WNcLjES0e0eMRIx7x8du9bpdl91quESscMUs8osYjLB5xxCM8HtHiET0eMb6IuH6754xHfP52347GdLtGrI/f7vunqE8RNR5h8YiPd/fLf7Euj0e0eESPR4x4xIxHxH/M8uS4+PcYR8koBTmKdCnIUaRLQY4iXQpyFOlSkKNIl4IcRboU5CjSpSBHkS4FOYp0KchRpEtBjiJdCnIU6VKQo0iXghxFuhTkKNKlIEeRLgU5inQpyFGkS0GOIl0KchS2UpCjsJWCHEW6FOQo0qUgR5EuBTmKdCnIUaRLQY4iXQpyFOlSkKNIl4IcRboU5CjSpSBHkS4Fgb721lUuBYG+9tZVLgU5inQpCPS1t65yKchRpEtBjsJWCgIjrlIQGHGVgsCIqxQERiwb7GHEVQpyFLZSkKOwlYIcha0U5ChspSBHYSsFOQpfKchR+EpBjsJXCnIUvlKQo/CVghyFrxTkKHylIEfhKwU5Cl8pyFH4SkGOwlcKchS+UpCj8JWCHIWvFOQofKUgR+ErBTkKXynIUfhKQY7CVwpyFL5SkKPwlYIcha8U5Ch8pSBH4SsFOQpfKchR+EpBjsJXCnIUvlKQo/CVghyFrxTkKISlIFuKrRRkS7GVgmwptlKQLcV22f6WYisF2VKEH9fxlYLsECRbKciWYisF2VLOKMVWCrKl6ObUUC0FOc1F7zE/zUWvMT/NVUtBoC56jTnURa8xh7roNeZQd1110WvMoS5aCgJ13V2qWgoCdd1tqloKAnXdbapaCgJ13W2qWgoCdd1tGl0KAsSIRwSXggCxwhHRpSBA1HiExSOCS0GA8HhEi0f0eERwKQgQMx6xwhHRpSBA1HhEcCkIED0eEXxb5YmILgUBIv4bFV0KAsSMR6xwRHQpCBA1HmHxiCMe4fGIFo/o8YjgUhAgZjwiuBQEvwMLLgUBosYjLB4RXAoChMcjWjyixyNGPCK4FASIFY6ILgUBosYjLB5xxCM8HtHiET0eEVwKAsSMRwSXguAsRXApCBA1HmHxiOBSECA8HtHiET0eMeIRMx4R/zFLeCmI94xSkJOiXAoCfeHryaEvfD059IWvJ4e+a+sLX08OfeHryaEvfD059IWvJ4e+cCnIqa9cCgJ97a2rXAoCfe2tq1wKAn3tratcCgJ97a2rXAoCfa5SkNOIrBQERsLXk0Nf+Hpy6AtfTw5919YXvp4c+sLXk0Nf+Hpy6AtfTw594evJT33lUhDoa29d5VIQ6GtvXeVSEOhrb13lUhDoa29d5VIQ6GtvXbJSEBhxlYLAiKsUBEZcpSAwYtlgDyOuUhAYcZWCwIirFARGXKUgMOIqBTmNyEpBYJT89r8sTIATWykInNhuGcQpL7ZSEDixlYLAia0UBE5spSBwYisFgRNbKQic2EpBTie6UhA4sZWCwImtFARObKUgcHJCJ7ZSEDixlYLAia0UBE5spSBwYisFOZ3oSkHgxFYKAie2UhA4sZWCwMkJndhKQeDEVgoCJ7ZSEDixlYLAia0UZGej2EpBthRbKciWYisF2VJspSBbiu2y/S3FVgqypQg/ruMrBdkhSLZSkC3FVgqypZxRiq0UZEuxzal2ZESiT4pyJBr6wuEs6AuHs6AvHM6CvmvrC4ezoC8czoK+cDgL+sLhLOgLR6JPfeVINPS1t65yJBr62ltXORINfe2tqxyJhr721lWOREOfKxJ9GpFFomEkHM6CvnA4C/rC4Szou7a+cDgL+sLhLOgLh7OgLxzOgr5wOOvUV45EQ1976ypHoqGvvXWVI9HQ1966ypFo6GtvXeVINPS1ty5ZJBpGXJFoGHFFomHEFYmGEcsGexhxRaJhxBWJhhFXJBpGXJFoGHFFok8jskg0jJLf/pdxUTixRaLhxHbGEqe82CLRcGKLRMOJLRINJ7ZINJzYItFwYotEw4ktEn060UWi4cQWiYYTWyQaTmyRaDg5oRNbJBpObJFoOLFFouHEFomGE1sk+nSii0TDiS0SDSe2SDSc2CLRcHJCJ7ZINJzYItFwYotEw4ktEg0ntkj0zkaxRaK3FFskekuxRaK3FFskeksRRg35ItFbivDjOr5I9A5BskWitxRbJHpLOaMUWyR6S7HNqd6eRKKbj9uDrY9/p3zzQPwpNNmEFpvQk3z5bxpVOiOjMzrojJzOqNEZdTojuold6UZ2pZvZRjezjW5mG93MNrqZbXQz2+hmtgXO7AdkZEA+n6zfPF0Lo8VmdBQ6o0pnZHRGB52R0xk1OqNOZzTojOhm9kE3s51uZjvdzHa6me10M9vpZrbTzWynm9keOLMfkJkBWQmQVjIgNQNiGZAjA+IZkJYB6RmQjDe+f/4j/DKhAIzlYD7/w//Jr//6SvmvGSUHk/MjMPwLmBdn8oFpOZiegxk5mJmDWSmY+Y335sWpYWBqDsZyMEcOxnMwLQfTczAjBzNzMCsFs74wBV4dgwWm5mAsB3PkYDwH03IwPQczcjAzB/OFKfDqmPM+9lWSODWJ4yn/xKmlJXF6EmfkcL5wzvBnnJrEsSTOkcTJeH/G9QnhcX9ujBcfCXu5nVh2e3Fged6nxir+P//47PidD5rH9VFiCfMla349NDTUq6666aofuuquq9501buuuu4urbrLtOpuU9Pdpqa7TU13m5ruNjXdbWq629TCtukDMeIRH2+ndvutrze/RqxwxFHiETUeYfGIj6fcvL1EPo9rhMcjWjyixyM+fbtbuX1e1cq8Rsx4xApHeIlH1HjEpz+0zW5f2uwJoscjPv3j7sft7EZvdoloJR4R/41qH7/d90+jWxvXiBmPWOGIXuIRNR5h8YgjHuHxiBaP6PGIL77dvV8jZjzi87f7PgbHNWJ8/Hbfh/lTRI1HWDzi07e734/f9rKuER6PaPGIHo8Y8YiP3+7VboharhErHDFLPKLGIyweccQjPB7R4hE9HjG+iLh+u+eMR3z+dt/O53W7RqyP3+77p6hPETUeYfGIj3f3y3+xLo9HtHhEj0eMeMSMR8R/zPLkVOz3GOPJCbj/eG1nuU3C6rVeUmryzdjfvHVpPDs9paNv2vqHtr5r6zdt/a6tP7T1p7b+ktY37a1r2lvXtLeuaW9d0966pr11TXvrmvbWNe2tayxb9250sCzSh1HybvzmNWnj2Tk6Hf1DW9+19Zu2ftfWH9r6U1t/Set70dbX3rquvXVde+u69tZ17a3r2lvXtbeua29d1966jWXrPoxYFunDiGU3PoxY1t3DiGWDPYxYltLDiGXPPIxYVsfDiGUbPIxYBvzdqNPN7J789r+8rXo8i6r8shNbD/l4FsD43e/TMEKng9Apu1n71d3d41n84pedJqHT4nOahdCpEjqlz6cXt2WPZyGVX3ZyQqdG6NQJnQah0yR0WnxOqxA6VUKn7Dn+6lr18SyO9MtOTujUCJ06odMgdJqETovP6Vn3wS9LZU/yV60KW8oYpQ5Gqc73IdSzcodfliL8uK6WRSiVHSP8mdTBKOWMUo1Rim1OTVctBTnNRe8xP81FrzE/zVVLQaAueo051EWvMYe66DXmUHddddFrzKEuWgoCdd1dqloKAnXdbapaCgJ13W2qWgoCdd1tqloKAnXdbRpdCgLEiEcEl4IAscIR0aUgQNR4hMUjgktBgPB4RItH9HhEcCkIEDMescIR0aUgQNR4RHApCBA9HhF8W+WJiC4FASL+GxVdCgLEjEescER0KQgQNR5h8YgjHuHxiBaP6PGI4FIQIGY8IrgUBL8DCy4FAaLGIyweEVwKAoTHI1o8oscjRjwiuBQEiBWOiC4FAaLGIyweccQjPB7R4hE9HhFcCgLEjEcEl4LgLEVwKQgQNR5h8YjgUhAgPB7R4hE9HjHiETMeEf8xS3gpyDoySkFOinIpCPSFryeHvvD15NAXvp4c+q6tL3w9OfSFryeHvvD15NAXvp4c+sKlIKe+cikI9LW3rnIpCPS1t65yKQj0tbeucikI9LW3rnIpCPS5SkFOI7JSEBgJX08OfeHryaEvfD059F1bX/h6cugLX08OfeHryaEvfD059IWvJz/1lUtBoK+9dZVLQaCvvXWVS0Ggr711lUtBoK+9dZVLQaCvvXXJSkFgxFUKAiOuUhAYcZWCwIhlgz2MuEpBYMRVCgIjrlIQGHGVgsCIqxTkNCIrBYFR8tv/sjABTmylIHBiu2UQp7zYSkHgxFYKAie2UhA4sZWCwImtFARObKUgcGIrBTmd6EpB4MRWCgIntlIQOLGVgsDJCZ3YSkHgxFYKAie2UhA4sZWCwImtFOR0oisFgRNbKQic2EpB4MRWCgInJ3RiKwWBE1spCJzYSkHgxFYKAie2UpCdjWIrBdlSbKUgW4qtFGRLsZWCbCm2y/a3FFspyJYi/LiOrxRkhyDZSkG2FFspyJZyRim2UpAtRTanrJSESDQowpHora8bztr6uuGsra8bztr6rq2vG87a+rrhrK2vG87a+rrhrK2vG4mGvnAkeutrb13hSPTW1966wpHora+9dYUj0Vtfe+sKR6K3PlUkGkZckehtpBvO2vq64aytrxvO2vqura8bztr6uuGsra8bztr6uuGsra8bzoK+cCR662tvXeFI9NbX3rrCkeitr711hSPRW1976wpHore+9tblikRvI6pI9DaiikRvI6pI9DZi2WAPI6pI9DaiikRvI6pI9DaiikRvI6pINIy4ItHbKPntfxUX3U5kkejtRHbGcp/yIotEbyeySPR2IotEbyeySPR2IotEbyeySPR2IotEw4ktEr2dyCLR24ksEr2dyCLR28kJncgi0duJLBK9ncgi0duJLBK9ncgi0XBii0RvJ7JI9HYii0RvJ7JI9HZyQieySPR2IotEbyeySPR2IotEbyeySPSfbBRZJPqPFFkk+o8UWST6jxRZJPqPFGHUkC4S/UeK8OM6ukj0nxAkWST6jxRZJPqPlDNKkUWi/0jRzan516eN3V5uPm4vdOZ9lK/ijy+1t37RP/+asuZL1rwWXfWqq2666oeuuuuqN131rquuu0ur7jKtutvUdLep6W5T092mprtNTXebmu42tbBt+kCMeMTH26ndDh5582vECkccJR5R4xEWj/h4ys3bS+TzuEZ4PKLFI3o84tO3u5Xx95e2Mq8RMx6xwhFe4hE1HvHpD22z25c2e4Lo8YhP/7j7cTsw15tdIlqJR8R/o9rHb7fff6LauEbMeMQKR/QSj6jxCItHHPEIj0e0eESPR3zx7e79GjHjEZ+/3fcxOK4R4+O3+z7MnyJqPMLiEZ++3f2eAOllXSM8HtHiET0eMeIRH7/d63ZZdq/lGrHCEbPEI2o8wuIRRzzC4xEtHtHjEeOLiOu3e854xOdv9+1oTLdrxPr47b5/ivoUUeMRFo/4eHe//Bfr8nhEi0f0eMSIR8x4RPzHLE+Oi3+PUWdGKUid0qUgdUqXgtQpXQpSp3QpSJ3SpSB1SpeC1CldClKndClIndKlIHVKl4LUKV0KUqd0KUid0qUgdUqXgtQpXQpSp3QpSJ3SpSB1SpeC1CldClInWylInWylIHVKl4LUKV0KUqd0KUid0qUgdUqXgtQpXQpSp3QpSJ3SpSB1SpeC1CldClKndCkI9LW3rnIpCPS1t65yKUid0qUg0NfeusqlIHVKl4LUyVYKAiOuUhAYcZWCwIirFARGLBvsYcRVClInWylInWylIHWylYLUyVYKUidbKUidfKUgdfKVgtTJVwpSJ18pSJ18pSB18pWC1MlXClInXylInXylIHXylYLUyVcKUidfKUidfKUgdfKVgtTJVwpSJ18pSJ18pSB18pWC1MlXClInXylInXylIHXylYLUyVcKUidfKUidfKUgdfKVgtTJVwpSJ18pSJ18pSB18pWC1ElYCrKl2EpBthRbKciWYisF2VJsl+1vKbZSkC1F+HEdXynIDkGylYJsKbZSkC3ljFJspSBbim1OWVMtBTnNRe8xP81FrzE/zVVLQaAueo051EWvMYe66DXmUHddddFrzKEuWgoCdd1dqloKAnXdbapaCgJ13W2qWgoCdd1tqloKAnXdbRpdCgLEiEcEl4IAscIR0aUgQNR4hMUjgktBgPB4RItH9HhEcCkIEDMescIR0aUgQNR4RHApCBA9HhF8W+WJiC4FASL+GxVdCgLEjEescER0KQgQNR5h8YgjHuHxiBaP6PGI4FIQIGY8IrgUBL8DCy4FAaLGIyweEVwKAoTHI1o8oscjRjwiuBQEiBWOiC4FAaLGIyweccQjPB7R4hE9HhFcCgLEjEcEl4LgLEVwKQgQNR5h8YjgUhAgPB7R4hE9HjHiETMeEf8xS3gpyOEZpSAnRbkUBPrC15NDX/h6cugLX08OfdfWF76eHPrC15NDX/h6cugLX08OfeFSkFNfuRQE+tpbV7kUBPraW1e5FAT62ltXuRQE+tpbV7kUBPpcpSCnEVkpCIyEryeHvvD15NAXvp4c+q6tL3w9OfSFryeHvvD15NAXvp4c+sLXk5/6yqUg0NfeusqlINDX3rrKpSDQ1966yqUg0NfeusqlINDX3rpkpSAw4ioFgRFXKQiMuEpBYMSywR5GXKUgMOIqBYERVykIjLhKQWDEVQpyGpGVgsAo+e1/WZgAJ7ZSEDix3TKIU15spSBwYisFgRNbKQic2EpB4MRWCgIntlIQOLGVgpxOdKUgcGIrBYETWykInNhKQeDkhE5spSBwYisFgRNbKQic2EpB4MRWCnI60ZWCwImtFARObKUgcGIrBYGTEzqxlYLAia0UBE5spSBwYisFgRNbKcjORrGVgmwptlKQLcVWCrKl2EpBthTbZftbiq0UZEsRflzHVwqyQ5BspSBbiq0UZEs5oxRbKciWYptTXjMi0SdFORINfeFwFvSFw1nQFw5nQd+19YXDWdAXDmdBXzicBX3hcBb0hSPRp75yJBr62ltXORINfe2tqxyJhr721lWORENfe+sqR6KhzxWJPo3IItEwEg5nQV84nAV94XAW9F1bXzicBX3hcBb0hcNZ0BcOZ0FfOJx16itHoqGvvXWVI9HQ1966ypFo6GtvXeVINPS1t65yJBr62luXLBINI65INIy4ItEw4opEw4hlgz2MuCLRMOKKRMOIKxINI65INIy4ItGnEVkkGkbJb//LuCic2CLRcGI7Y4lTXmyRaDixRaLhxBaJhhNbJBpObJFoOLFFouHEFok+negi0XBii0TDiS0SDSe2SDScnNCJLRINJ7ZINJzYItFwYotEw4ktEn060UWi4cQWiYYTWyQaTmyRaDg5oRNbJBpObJFoOLFFouHEFomGE1skemej2CLRW4otEr2l2CLRW4otEr2lCKOGfJHoLUX4cR1fJHqHINki0VuKLRK9pZxRii0SvaXI5lR7Gl4Y5aY02qN2vZb2jwfHuw/Odx9cbz54faL9Jw/Wdx+0dx+8fMNnKX8/OMuzB/3dB9u7D/Z3HxzvPjjffXC9+eD1Ec55/zx1jvnkwfrug/bug8e7D/q7D7Z3H+zvPnj9kzPH7cHVnzw4331wvfng9TGknzxY333Q3n3wePfBy5+cVW+v1apPXqvrkyw/ebC/++B498H57oPrzQevD0P85MH64kF78ufY7d0Hj3cfvP7JOW4TYPmTCXB9BuInD/Z3HxzvPjjffXC9+eAo7z54/ZPT7397LO7/68n/91+++IGxHMyRg/EcTMvB9BzMyMHMHMxKwVwfYvg+JmcKzJwpMHOmwMyZAjNnCsycKTBzpsDMmQIzZwqsnCmwcqbAypkCK2cKrJwpsHKmwMqZAitnCqycKbBypsCTX6AGcGoSx5I4RxLHkzgtidOTOCOJM5M4SfOgJs2DmjQPatI8qEnzoCbNg5o0D2rSPKhJ86AmzYOaNA8saR5Y0jywpHlgSfPAkuaBJc0DS5oHljQPLGkeWNI8OJLmwZE0D46keXAkzYMjaR4cSfPgSJoHR9I8OJLmwZE0DzxpHnjSPPCkeeBJ88CT5oEnzQNPmgeeNA88aR540jxoSfOgJc2DljQPWtI8aEnzoCXNg5Y0D1rSPGhJ86AlzYOeNA960jzoSfOgJ82DnjQPetI86EnzoCfNg540D3rSPBhJ8yDpDGJNOoRYk04h1qRjiDXpHGJNOohYk04i1qSjiDXpLGJNOoxYk04j1qTjiDXpPGJNOpBYk04k1qQjiTXpTGJNOpRYk04l1qRjiTXpXGJNOphYk04m1qSjiTXpbGJNOpxYk04n1qTjiTXpfKIlnU+0pPOJlnQ+0ZLOJ1rxJE5L4vQkzkjizCRO0jxIOp9oSecTLel8oiWdT7Sk84mWdD7Rks4nWtL5REs6n2hJ5xMt6XyiJZ1PtKTziZZ0PtGSzida0vlESzqfaEnnEy3pfKIlnU+0pPOJlnQ+0ZLOJ1rS+URLOp9oSecTLel8oiWdT7Sk84mWdD7Rks4nWtL5REs6n2hJ5xMt6XyifeE8Xyu3m29a/cfVsf7P6w+/cJzvJ5gvnH5rdscc7RnGcjBHDsZzMC0H818Xzz8eHW8/+oVjCD/5+f7CKYQfYVoOpudgckbcF04gNL/dwt2aPcOsFMwXzh/8CFNzMJaD+cIUOOYdczzDeA6m5WB6DmbkYGYOZqUs0y+cOvgRJuevbSvnr20r569tXzhx8CNMzl/bvnDe4EeYkYOZOZiUKXCUkoOpORjLwRw5GM/BtBxMz8GMHMzMweRMgZozBWrOFKg5U6DmTIGaMwVqzhSoOVOg5kyBmjMFas4UsJwpYDlTwHKmgOVMAcuZApYzBSxnCljCFBh/XbfUnf/LjdL6/2qa/b+Q2W6fP81Z//1La513e7N/fIRgD6HJJrTYhK7/vvOrRpXOyOiMDjojpzNqdEadzohuYle6kV3pZrbRzWyjm9lGN7ONbmYb3cw2upltgTP7ARkZkM8n6yr1769dR/nC93axGR2FzqjSGRmd0UFn5HRGjc6o0xkNOiO6mX3QzWynm9lON7OdbmY73cx2upntdDPb6Wa2B87sB2RmQFYCpJUMSM2AWAbkyIB4BqRlQHoGJOON75//CNdSjtsXl2rXGMvBfP6HX80fs7hff8LQV8p/zSg5mJwfgeFfwPR1x8x+jWk5mJ6DGTmYmYNZKZj5jfem1wdmXGNqDsZyMEcOxnMwLQfTczAjBzNzMCsFs74wBWr12xdXv/4L1Ko5GMvBHDkYz8G0HEzPwYwczMzBfGEK1GF3zJyXmCfN3wGcmsTxlH/i1NKSOD2JM3I4Xzhn+DNOTeJYEudI4mS8P+v6hPC4PzfGi4+EvdxSw27t37903qfGKo+zzednx+980LyujxJLmC9Z8+uhoaFeddVNV/3QVXdd9aar3nXVdXdp1V2mVXebmu42Nd1tarrb1HS3qeluU9Pdpha2TR+IEY/4eDu12299vfk1YoUjjhKPqPEIi0d8POXm7SXyeVwjPB7R4hE9HvHp293K7fOqVuY1YsYjVjjCSzyixiM+/aFtdvvSZk8QPR7x6R93P25nN3qzS0Qr8Yj4b1T7+O2+fxrd2rhGzHjECkf0Eo+o8QiLRxzxCI9HtHhEj0d88e3u/Rox4xGfv933MTiuEePjt/s+zJ8iajzC4hGfvt39fvy2l3WN8HhEi0f0eMSIR3z8dq92Q9RyjVjhiFniETUeYfGIIx7h8YgWj+jxiPFFxPXbPWc84vO3+3Y+r9s1Yn38dt8/RX2KqPEIi0d8vLtf/ot1eTyixSN6PGLEI2Y8Iv5jlienYr/HaE9OwNV+3E8G9/bilzbVy20SVq/1kvLkuOV/w/i8Y8arXyR98dal9uz0lI6+aesf2vqurd+09bu2/tDWn9r6S1rftLeuaW9d0966pr11TXvrmvbWNe2ta9pb17S3rrFs3bvRwbJIH0bJu/Gb16S1Z+fodPQPbX3X1m/a+l1bf2jrT239Ja3vRVtfe+u69tZ17a3r2lvXtbeua29d1966rr11XXvrNpat+zBiWaQPI5bd+DBiWXcPI5YN9jBiWUoPI5Y98zBiWR0PI5Zt8DBiGfB3o043s3vy2//ytur2LKryy07JP90v7zlrzwIYv/t9GkbodBA69WynF3d3t2fxi192moROi89pFkKnSuiUPp9e3JbdnoVUftnJCZ0aoVMndBqETpPQafE5rULoVAmdsuf4q2vV27M40i87OaFTI3TqhE6D0GkSOi0+p2fdB78slT3JX7UqbCljlDoYpTrfh1DPyh1+WYrw47paFqFUdozwZ1IHo5QzSjVGKbY51btqKchpLnqP+Wkueo35aa5aCgJ10WvMoS56jTnURa8xh7rrqoteYw510VIQqOvuUtVSEKjrblPVUhCo625T1VIQqOtuU9VSEKjrbtPoUhAgRjwiuBQEiBWOiC4FAaLGIyweEVwKAoTHI1o8oscjgktBgJjxiBWOiC4FAaLGI4JLQYDo8Yjg2ypPRHQpCBDx36joUhAgZjxihSOiS0GAqPEIi0cc8QiPR7R4RI9HBJeCADHjEcGlIPgdWHApCBA1HmHxiOBSECA8HtHiET0eMeIRwaUgQKxwRHQpCBA1HmHxiCMe4fGIFo/o8YjgUhAgZjwiuBQEZymCS0GAqPEIi0cEl4IA4fGIFo/o8YgRj5jxiPiPWcJLQUbLKAU5KcqlINAXvp4c+sLXk0Nf+Hpy6Lu2vvD15NAXvp4c+sLXk0Nf+Hpy6AuXgpz6yqUg0NfeusqlINDX3rrKpSDQ1966yqUg0NfeusqlINDnKgU5jchKQWAkfD059IWvJ4e+8PXk0HdtfeHryaEvfD059IWvJ4e+8PXk0Be+nvzUVy4Fgb721lUuBYG+9tZVLgWBvvbWVS4Fgb721lUuBYG+9tYlKwWBEVcpCIy4SkFgxFUKAiOWDfYw4ioFgRFXKQiMuEpBYMRVCgIjrlKQ04isFARGyW//y8IEOLGVgsCJ7ZZBnPJiKwWBE1spCJzYSkHgxFYKAie2UhA4sZWCwImtFOR0oisFgRNbKQic2EpB4MRWCgInJ3RiKwWBE1spCJzYSkHgxFYKAie2UpDTia4UBE5spSBwYisFgRNbKQicnNCJrRQETmylIHBiKwWBE1spCJzYSkF2NoqtFGRLsZWCbCm2UpAtxVYKsqXYLtvfUmylIFuK8OM6vlKQHYJkKwXZUmylIFvKGaXYSkG2FNucmpYRiT4pypFo6AuHs6AvHM6CvnA4C/qurS8czoK+cDgL+sLhLOgLh7OgLxyJPvWVI9HQ1966ypFo6GtvXeVINPS1t65yJBr62ltXORINfa5I9GlEFomGkXA4C/rC4SzoC4ezoO/a+sLhLOgLh7OgLxzOgr5wOAv6wuGsU185Eg197a2rHImGvvbWVY5EQ1976ypHoqGvvXWVI9HQ1966ZJFoGHFFomHEFYmGEVckGkYsG+xhxBWJhhFXJBpGXJFoGHFFomHEFYk+jcgi0TBKfvtfxkXhxBaJhhPbGUuc8mKLRMOJLRINJ7ZINJzYItFwYotEw4ktEg0ntkj06UQXiYYTWyQaTmyRaDixRaLh5IRObJFoOLFFouHEFomGE1skGk5skejTiS4SDSe2SDSc2CLRcGKLRMPJCZ3YItFwYotEw4ktEg0ntkg0nNgi0TsbxRaJ3lJskegtxRaJ3lJskegtRRg15ItEbynCj+v4ItE7BMkWid5SbJHoLeWMUmyR6C3FNqdW+evTxm4vNx+3FzrzPspX8ceX2ju/6D/Np6z5kjWvRVe96qqbrvqhq+666k1Xveuq6+7SqrtMq+42Nd1tarrb1HS3qeluU9Pdpqa7TS1smz4QIx7x8XZqt4NH3vwascIRR4lH1HiExSM+nnLz9hL5PK4RHo9o8Ygej/j07W5l/P2lrcxrxIxHrHCEl3hEjUd8+kPb7PalzZ4gejzi0z/uftwOzPVml4hW4hHx36j28dvt95+oNq4RMx6xwhG9xCNqPMLiEUc8wuMRLR7R4xFffLt7v0bMeMTnb/d9DI5rxPj47b4P86eIGo+weMSnb3e/J0B6WdcIj0e0eESPR4x4xMdv97pdlt1ruUascMQs8Ygaj7B4xBGP8HhEi0f0eMT4IuL67Z4zHvH52307GtPtGrE+frvvn6I+RdR4hMUjPt7dL//Fujwe0eIRPR4x4hEzHhH/McuT4+JfY/RSEkpBQBEuBdn6uteTb33d68m3vu715FvftfV1ryff+rrXk2993evJt77u9eRbX7cUBPrCpSBbX3vrCpeCbH3trStcCrL1tbeucCnI1tfeusKlIFufqhQERlylINtI93ryra97PfnW172efOu7tr7u9eRbX/d68q2vez351te9nnzr615PDn3hUpCtr711hUtBtr721hUuBdn62ltXuBRk62tvXeFSkK2vvXW5SkG2EVUpyDaiKgXZRlSlINuIZYM9jKhKQbYRVSnINqIqBdlGVKUg24iqFARGXKUg2yj57X9VmLCdyEpBthPZLYP7lBdZKch2IisF2U5kpSDbiawUZDuRlYJsJ7JSkO1EVgoCJ7ZSkO1EVgqynchKQbYTWSnIdnJCJ7JSkO1EVgqynchKQbYTWSnIdiIrBYETWynIdiIrBdlOZKUg24msFGQ7OaETWSnIdiIrBdlOZKUg24msFGQ7kZWC/MlGkZWC/JEiKwX5I0VWCvJHiqwU5I8U2WX7f6TISkH+SBF+XEdXCvInBElWCvJHiqwU5I+UM0qRlYL8kaKbU0O0FATmmveYw1zzGnOYi5aCbHXNa8y3uuY15ltd8xrzre666prXmG91zVKQra67S0VLQba67jYVLQXZ6rrbVLQUZKvrblPRUpCtrrtNg0tBNmLEI2JLQTZihSOCS0E2osYjLB4RWwqyER6PaPGIHo+ILQXZiBmPWOGI4FKQjajxiNhSkI3o8YjY2yqBaCUeEf+NCi4F2YgZj1jhiOBSkI2o8QiLRxzxCI9HtHhEj0fEloJsxIxHxJaC7N+BxZaCbESNR1g8IrYUZCM8HtHiET0eMeIRsaUgG7HCEcGlIBtR4xEWjzjiER6PaPGIHo+ILQXZiBmPiC0F2WcpYktBNqLGIyweEVsKshEej2jxiB6PGPGIGY+I/5glvBSk9oxSkJOiXAoCfeHryaEvfD059IWvJ4e+a+sLX08OfeHryaEvfD059IWvJ4e+cCnIqa9cCgJ97a2rXAoCfe2tq1wKAn3tratcCgJ97a2rXAoCfa5SkNOIrBQERsLXk0Nf+Hpy6AtfTw5919YXvp4c+sLXk0Nf+Hpy6AtfTw594evJT33lUhDoa29d5VIQ6GtvXeVSEOhrb13lUhDoa29d5VIQ6GtvXbJSEBhxlYLAiKsUBEZcpSAwYtlgDyOuUhAYcZWCwIirFARGXKUgMOIqBTmNyEpBYJT89r8sTIATWykInNhuGcQpL7ZSEDixlYLAia0UBE5spSBwYisFgRNbKQic2EpBTie6UhA4sZWCwImtFARObKUgcHJCJ7ZSEDixlYLAia0UBE5spSBwYisFOZ3oSkHgxFYKAie2UhA4sZWCwMkJndhKQeDEVgoCJ7ZSEDixlYLAia0UZGej2EpBthRbKciWYisF2VJspSBbiu2y/S3FVgqypQg/ruMrBdkhSLZSkC3FVgqypZxRiq0UZEuxzSk7MiLRJ0U5Eg194XAW9IXDWdAXDmdB37X1hcNZ0BcOZ0FfOJwFfeFwFvSFI9GnvnIkGvraW1c5Eg197a2rHImGvvbWVY5EQ1976ypHoqHPFYk+jcgi0TASDmdBXzicBX3hcBb0XVtfOJwFfeFwFvSFw1nQFw5nQV84nHXqK0eioa+9dZUj0dDX3rrKkWjoa29d5Ug09LW3rnIkGvraW5csEg0jrkg0jLgi0TDiikTDiGWDPYy4ItEw4opEw4grEg0jrkg0jLgi0acRWSQaRslv/8u4KJzYItFwYjtjiVNebJFoOLFFouHEFomGE1skGk5skWg4sUWi4cQWiT6d6CLRcGKLRMOJLRINJ7ZINJyc0IktEg0ntkg0nNgi0XBii0TDiS0SfTrRRaLhxBaJhhNbJBpObJFoODmhE1skGk5skWg4sUWi4cQWiYYTWyR6Z6PYItFbii0SvaXYItFbii0SvaUIo4Z8kegtRfhxHV8keocg2SLRW4otEr2lnFGKLRK9pdjm1NGeRKKbj9uDrY9/p3zzQPwpNNmEFpvQk3z5bxpVOiOjMzrojJzOqNEZdTojuold6UZ2pZvZRjezjW5mG93MNrqZbXQz2+hmtgXO7AdkZEA+n6zfPF0Lo8VmdBQ6o0pnZHRGB52R0xk1OqNOZzTojOhm9kE3s51uZjvdzHa6me10M9vpZrbTzWynm9keOLMfkJkBWQmQVjIgNQNiGZAjA+IZkJYB6RmQjDe+f/4j/DKhAIzlYD7/w//Jr//6SvmvGSUHk/MjMPwLmBdn8oFpOZiegxk5mJmDWSmY+Y335sWpYWBqDsZyMEcOxnMwLQfTczAjBzNzMCsFs74wBV4dgwWm5mAsB3PkYDwH03IwPQczcjAzB/OFKfDqmPM+9lWSODWJ4yn/xKmlJXF6EmfkcL5wzvBnnJrEsSTOkcTJeH/G9QnhcX9ujBcfCXu5nVh2e3Fged6nxir+P//47PidD5rH9VFiCfMla349NDTUq6666aofuuquq9501buuuu4urbrLtOpuU9Pdpqa7TU13m5ruNjXdbWq629TCtukDMeIRH2+ndvutrze/RqxwxFHiETUeYfGIj6fcvL1EPo9rhMcjWjyixyM+fbtbuX1e1cq8Rsx4xApHeIlH1HjEpz+0zW5f2uwJoscjPv3j7sft7EZvdoloJR4R/41qH7/d90+jWxvXiBmPWOGIXuIRNR5h8YgjHuHxiBaP6PGIL77dvV8jZjzi87f7PgbHNWJ8/Hbfh/lTRI1HWDzi07e734/f9rKuER6PaPGIHo8Y8YiP3+7VboharhErHDFLPKLGIyweccQjPB7R4hE9HjG+iLh+u+eMR3z+dt/O53W7RqyP3+77p6hPETUeYfGIj3f3y3+xLo9HtHhEj0eMeMSMR8R/zPLkVOz3GP7kBFz9b9d2ltskrF7rJaUm34z9zVuX/NnpKR1909Y/tPVdW79p63dt/aGtP7X1l7S+aW9d0966pr11TXvrmvbWNe2ta9pb17S3rmlvXWPZunejg2WRPoySd+M3r0nzZ+fodPQPbX3X1m/a+l1bf2jrT239Ja3vRVtfe+u69tZ17a3r2lvXtbeua29d1966rr11XXvrNpat+zBiWaQPI5bd+DBiWXcPI5YN9jBiWUoPI5Y98zBiWR0PI5Zt8DBiGfB3o043s3vy2//ytmp/FlX5ZSe2HnJ/FsD43e/TMEKng9Apu1n71d3d/ix+8ctOk9Bp8TnNQuhUCZ3S59OL27L9WUjll52c0KkROnVCp0HoNAmdFp/TKoROldApe46/ulbdn8WRftnJCZ0aoVMndBqETpPQafE5Pes++GWp7En+qlVhSxmj1MEo1fk+hHpW7vDLUoQf19WyCKWyY4Q/kzoYpZxRqjFKsc2p5qqlIKe56D3mp7noNeanuWopCNRFrzGHuug15lAXvcYc6q6rLnqNOdRFS0GgrrtLVUtBoK67TVVLQaCuu01VS0GgrrtNVUtBoK67TaNLQYAY8YjgUhAgVjgiuhQEiBqPsHhEcCkIEB6PaPGIHo8ILgUBYsYjVjgiuhQEiBqPCC4FAaLHI4JvqzwR0aUgQMR/o6JLQYCY8YgVjoguBQGixiMsHnHEIzwe0eIRPR4RXAoCxIxHBJeC4HdgwaUgQNR4hMUjgktBgPB4RItH9HjEiEcEl4IAscIR0aUgQNR4hMUjjniExyNaPKLHI4JLQYCY8YjgUhCcpQguBQGixiMsHhFcCgKExyNaPKLHI0Y8YsYj4j9mCS8F6UdGKchJUS4Fgb7w9eTQF76eHPrC15ND37X1ha8nh77w9eTQF76eHPrC15NDX7gU5NRXLgWBvvbWVS4Fgb721lUuBYG+9tZVLgWBvvbWVS4FgT5XKchpRFYKAiPh68mhL3w9OfSFryeHvmvrC19PDn3h68mhL3w9OfSFryeHvvD15Ke+cikI9LW3rnIpCPS1t65yKQj0tbeucikI9LW3rnIpCPS1ty5ZKQiMuEpBYMRVCgIjrlIQGLFssIcRVykIjLhKQWDEVQoCI65SEBhxlYKcRmSlIDBKfvtfFibAia0UBE5stwzilBdbKQic2EpB4MRWCgIntlIQOLGVgsCJrRQETmylIKcTXSkInNhKQeDEVgoCJ7ZSEDg5oRNbKQic2EpB4MRWCgIntlIQOLGVgpxOdKUgcGIrBYETWykInNhKQeDkhE5spSBwYisFgRNbKQic2EpB4MRWCrKzUWylIFuKrRRkS7GVgmwptlKQLcV22f6WYisF2VKEH9fxlYLsECRbKciWYisF2VLOKMVWCrKl2ObUKBmR6JOiHImGvnA4C/rC4SzoC4ezoO/a+sLhLOgLh7OgLxzOgr5wOAv6wpHoU185Eg197a2rHImGvvbWVY5EQ1976ypHoqGvvXWVI9HQ54pEn0ZkkWgYCYezoC8czoK+cDgL+q6tLxzOgr5wOAv6wuEs6AuHs6AvHM469ZUj0dDX3rrKkWjoa29d5Ug09LW3rnIkGvraW1c5Eg197a1LFomGEVckGkZckWgYcUWiYcSywR5GXJFoGHFFomHEFYmGEVckGkZckejTiCwSDaPkt/9lXBRObJFoOLGdscQpL7ZINJzYItFwYotEw4ktEg0ntkg0nNgi0XBii0SfTnSRaDixRaLhxBaJhhNbJBpOTujEFomGE1skGk5skWg4sUWi4cQWiT6d6CLRcGKLRMOJLRINJ7ZINJyc0IktEg0ntkg0nNgi0XBii0TDiS0SvbNRbJHoLcUWid5SbJHoLcUWid5ShFFDvkj0liL8uI4vEr1DkGyR6C3FFoneUs4oxRaJ3lJ0c2r+9Wljt5ebj9sLnXkf5av440vtrV/0z7+mrPmSNa9FV73qqpuu+qGr7rrqTVe966rr7tKqu0yr7jY13W1qutvUdLep6W5T092mprtNLWybPhAjHvHxdmq3g0fe/BqxwhFHiUfUeITFIz6ecvP2Evk8rhEej2jxiB6P+PTtbmX8/aWtzGvEjEescISXeESNR3z6Q9vs9qXNniB6POLTP+5+3A7M9WaXiFbiEfHfqPbx2+33n6g2rhEzHrHCEb3EI2o8wuIRRzzC4xEtHtHjEV98u3u/Rsx4xOdv930MjmvE+Pjtvg/zp4gaj7B4xKdvd78nQHpZ1wiPR7R4RI9HjHjEx2/3ul2W3Wu5RqxwxCzxiBqPsHjEEY/weESLR/R4xPgi4vrtnjMe8fnbfTsa0+0asT5+u++foj5F1HiExSM+3t0v/8W6PB7R4hE9HjHiETMeEf8xy5Pj4t9jzJlRCjKndCnInNKlIHNKl4LMKV0KMqd0Kcic0qUgc0qXgswpXQoyp3QpyJzSpSBzSpeCzCldCjKndCnInNKlIHNKl4LMKV0KMqd0Kcic0qUgc0qXgszJVgoyJ1spyJzSpSBzSpeCzCldCjKndCnInNKlIHNKl4LMKV0KMqd0Kcic0qUgc0qXgswpXQoCfe2tq1wKAn3tratcCjKndCkI9LW3rnIpyJzSpSBzspWCwIirFARGXKUgMOIqBYERywZ7GHGVgszJVgoyJ1spyJxspSBzspWCzMlWCjInXynInHylIHPylYLMyVcKMidfKcicfKUgc/KVgszJVwoyJ18pyJx8pSBz8pWCzMlXCjInXynInHylIHPylYLMyVcKMidfKcicfKUgc/KVgszJVwoyJ18pyJx8pSBz8pWCzMlXCjInXynInHylIHPylYLMyVcKMidfKcicfKUgcxKWgmwptlKQLcVWCrKl2EpBthTbZftbiq0UZEsRflzHVwqyQ5BspSBbiq0UZEs5oxRbKciWYptTq6mWgpzmoveYn+ai15if5qqlIFAXvcYc6qLXmENd9BpzqLuuuug15lAXLQWBuu4uVS0FgbruNlUtBYG67jZVLQWBuu42VS0FgbruNo0uBQFixCOCS0GAWOGI6FIQIGo8wuIRwaUgQHg8osUjejwiuBQEiBmPWOGI6FIQIGo8IrgUBIgejwi+rfJERJeCABH/jYouBQFixiNWOCK6FASIGo+weMQRj/B4RItH9HhEcCkIEDMeEVwKgt+BBZeCAFHjERaPCC4FAcLjES0e0eMRIx4RXAoCxApHRJeCAFHjERaPOOIRHo9o8YgejwguBQFixiOCS0FwliK4FASIGo+weERwKQgQHo9o8YgejxjxiBmPiP+YJboUZBRPKAUBRbgUZOvrXk++9XWvJ9/6uteTb33X1te9nnzr615PvvV1ryff+rrXk2993VIQ6AuXgmx97a0rXAqy9bW3rnApyNbX3rrCpSBbX3vrCpeCbH2qUhAYcZWCbCPd68m3vu715Ftf93ryre/a+rrXk2993evJt77u9eRbX/d68q2vez059IVLQba+9tYVLgXZ+tpbV7gUZOtrb13hUpCtr711hUtBtr721uUqBdlGVKUg24iqFGQbUZWCbCOWDfYwoioF2UZUpSDbiKoUZBtRlYJsI6pSEBhxlYJso+S3/1VhwnYiKwXZTmS3DO5TXmSlINuJrBRkO5GVgmwnslKQ7URWCrKdyEpBthNZKQic2EpBthNZKch2IisF2U5kpSDbyQmdyEpBthNZKch2IisF2U5kpSDbiawUBE5spSDbiawUZDuRlYJsJ7JSkO3khE5kpSDbiawUZDuRlYJsJ7JSkO1EVgryJxtFVgryR4qsFOSPFFkpyB8pslKQP1Jkl+3/kSIrBfkjRfhxHV0pyJ8QJFkpyB8pslKQP1LOKEVWCvJHim1O1ZoRiT4pypFo6AuHs6AvHM6CvnA4C/qurS8czoK+cDgL+sLhLOgLh7OgLxyJPvWVI9HQ1966ypFo6GtvXeVINPS1t65yJBr62ltXORINfa5I9GlEFomGkXA4C/rC4SzoC4ezoO/a+sLhLOgLh7OgLxzOgr5wOAv6wuGsU185Eg197a2rHImGvvbWVY5EQ1976ypHoqGvvXWVI9HQ1966ZJFoGHFFomHEFYmGEVckGkYsG+xhxBWJhhFXJBpGXJFoGHFFomHEFYk+jcgi0TBKfvtfxkXhxBaJhhPbGUuc8mKLRMOJLRINJ7ZINJzYItFwYotEw4ktEg0ntkj06UQXiYYTWyQaTmyRaDixRaLh5IRObJFoOLFFouHEFomGE1skGk5skejTiS4SDSe2SDSc2CLRcGKLRMPJCZ3YItFwYotEw4ktEg0ntkg0nNgi0TsbxRaJ3lJskegtxRaJ3lJskegtRRg15ItEbynCj+v4ItE7BMkWid5SbJHoLeWMUmyR6C3FNafMSn8SXhjlpjTao3a9lvaPB8e7D853H1xvPnh9ov0nD9Z3H7R3H7x8w2cpfz84y7MH/d0H27sP9ncfHO8+ON99cL354PURznn/PHWO+eTB+u6D9u6Dx7sP+rsPtncf7O8+eP2TM8ftwdWfPDjffXC9+eD1MaSfPFjffdDeffB498HLn5xVb6/Vqk9eq+uTLD95sL/74Hj3wfnug+vNB68PQ/zkwfriQXvy59jt3QePdx+8/sk5bhNg+ZMJcH0G4icP9ncfHO8+ON99cL354CjvPnj9k9Pvf3ss7v/ryf/3X774gbEczJGD8RxMy8H0HMzIwcwczErBXB9i+D4mZwrMnCkwc6bAzJkCM2cKzJwpMHOmwMyZAjNnCqycKbBypsDKmQIrZwqsnCmwcqbAypkCK2cKrJwpsHKmwJNfoAZwahLHkjhHEseTOC2J05M4I4kzkzhJ86AmzYOaNA9q0jyoSfOgJs2DmjQPatI8qEnzoCbNg5o0DyxpHljSPLCkeWBJ88CS5oElzQNLmgeWNA8saR5Y0jw4kubBkTQPjqR5cCTNgyNpHhxJ8+BImgdH0jw4kubBkTQPPGkeeNI88KR54EnzwJPmgSfNA0+aB540DzxpHnjSPGhJ86AlzYOWNA9a0jxoSfOgJc2DljQPWtI8aEnzoCXNg540D3rSPOhJ86AnzYOeNA960jzoSfOgJ82DnjQPetI8GEnzIOkMYk06hFiTTiHWpGOINekcYk06iFiTTiLWpKOINeksYk06jFiTTiPWpOOINek8Yk06kFiTTiTWpCOJNelMYk06lFiTTiXWpGOJNelcYk06mFiTTibWpKOJNelsYk06nFiTTifWpOOJNel8oiWdT7Sk84mWdD7Rks4nWvEkTkvi9CTOSOLMJE7SPEg6n2hJ5xMt6XyiJZ1PtKTziZZ0PtGSzida0vlESzqfaEnnEy3pfKIlnU+0pPOJlnQ+0ZLOJ1rS+URLOp9oSecTLel8oiWdT7Sk84mWdD7Rks4nWtL5REs6n2hJ5xMt6XyiJZ1PtKTziZZ0PtGSzida0vlESzqfaEnnEy3pfKJ94TxfK7ebb1r9x9Wx/s/rD79wnO8nmC+cfmt2xxztGcZyMEcOxnMwLQfzXxfPPx4dbz/6hWMIP/n5/sIphB9hWg6m52ByRtwXTiA0v93C3Zo9w6wUzBfOH/wIU3MwloP5whQ45h1zPMN4DqblYHoOZuRgZg5mpSzTL5w6+BEm569tK+evbSvnr21fOHHwI0zOX9u+cN7gR5iRg5k5mJQpcJSSg6k5GMvBHDkYz8G0HEzPwYwczMzB5EyBmjMFas4UqDlToOZMgZozBWrOFKg5U6DmTIGaMwVqzhSwnClgOVPAcqaA5UwBy5kCljMFLGcKWPwUqPbXdUtd81v5R239fzXN/l/IbLfPn+as//6ltc67vdk/PkKwh9BkE1psQtd/3/lVo0pnZHRGB52R0xk1OqNOZ0Q3sSvdyK50M9voZrbRzWyjm9lGN7ONbmYb3cy2wJn9gIwMyOeTdZX699euo3zhe7vYjI5CZ1TpjIzO6KAzcjqjRmfU6YwGnRHdzD7oZrbTzWynm9lON7OdbmY73cx2upntdDPbA2f2AzIzICsB0koGpGZALANyZEA8A9IyID0DkvHG989/hGspx+2LS7VrjOVgPv/Dr+aPWdyvP2HoK+W/ZpQcTM6PwPAvYPq6Y2a/xrQcTM/BjBzMzMGsFMz8xnvT6wMzrjE1B2M5mCMH4zmYloPpOZiRg5k5mJWCWV+YArX67YurX/8FatUcjOVgjhyM52BaDqbnYEYOZuZgvjAF6rA7Zs5LzJPm7wBOTeJ4yj9xamlJnJ7EGTmcL5wz/BmnJnEsiXMkcTLeH78+ITzuz43x4iNhL7fUsFv79y+d96mxyuNs8/nZ8TsfNPv1UWIJ8yVrfj00NNSrrrrpqh+66q6r3nTVu6667i6tusu06m5T092mprtNTXebmu42Nd1tarrb1MK26QMx4hEfb6d2+62vN79GrHDEUeIRNR5h8YiPp9y8vUQ+j2uExyNaPKLHIz59u1u5fV7VyrxGzHjECkd4iUfUeMSnP7TNbl/a7AmixyM+/ePux+3sRm92iWglHhH/jWofv933T6NbG9eIGY9Y4Yhe4hE1HmHxiCMe4fGIFo/o8Ygvvt29XyNmPOLzt/s+Bsc1Ynz8dt+H+VNEjUdYPOLTt7vfj9/2sq4RHo9o8YgejxjxiI/f7tVuiFquESscMUs8osYjLB5xxCM8HtHiET0eMb6IuH6754xHfP52387ndbtGrI/f7vunqE8RNR5h8YiPd/fLf7Euj0e0eESPR4x4xIxHxH/M8uRU7PcY9uQEXO3H/WRwby9+aVO93CZh9VovKU+OW/43jM87Zrz6RdIXb12CftXWN239Q1vftfWbtn7X1h/a+lNbf0nrm/bWNe2ta9pb17S3rmlvXdPeuqa9dU1765r21jWWrXs3OlgW6cMoeTd+85o0e3aOTkf/0NZ3bf2mrd+19Ye2/tTWX9L6XrT1tbeua29d1966rr11XXvruvbWde2t69pb17W3bmPZug8jlkX6MGLZjQ8jlnX3MGLZYA8jlqX0MGLZMw8jltXxMGLZBg8jlgF/N+p0M7snv/0vb6u2Z1GVX3ZK/ul+ec+ZPQtg/O73aRih00Ho1LOdXtzdbc/iF7/sNAmdFp/TLIROldApfT69uC3bnoVUftnJCZ0aoVMndBqETpPQafE5rULoVAmdsuf4q2vV7Vkc6ZednNCpETp1QqdB6DQJnRaf07Pug1+Wyp7kr1oVtpQxSh2MUp3vQ6hn5Q6/LEX4cV0ti1AqO0b4M6mDUcoZpRqjFNucOqpqKchpLnqP+Wkueo35aa5aCgJ10WvMoS56jTnURa8xh7rrqoteYw510VIQqOvuUtVSEKjrblPVUhCo625T1VIQqOtuU9VSEKjrbtPoUhAgRjwiuBQEiBWOiC4FAaLGIyweEVwKAoTHI1o8oscjgktBgJjxiBWOiC4FAaLGI4JLQYDo8Yjg2ypPRHQpCBDx36joUhAgZjxihSOiS0GAqPEIi0cc8QiPR7R4RI9HBJeCADHjEcGlIPgdWHApCBA1HmHxiOBSECA8HtHiET0eMeIRwaUgQKxwRHQpCBA1HmHxiCMe4fGIFo/o8YjgUhAgZjwiuBQEZymCS0GAqPEIi0cEl4IA4fGIFo/o8YgRj5jxiPiPWcJLQbxklIKcFOVSEOgLX08OfeHryaEvfD059F1bX/h6cugLX08OfeHryaEvfD059IVLQU595VIQ6GtvXeVSEOhrb13lUhDoa29d5VIQ6GtvXeVSEOhzlYKcRmSlIDASvp4c+sLXk0Nf+Hpy6Lu2vvD15NAXvp4c+sLXk0Nf+Hpy6AtfT37qK5eCQF976yqXgkBfe+sql4JAX3vrKpeCQF976yqXgkBfe+uSlYLAiKsUBEZcpSAw4ioFgRHLBnsYcZWCwIirFARGXKUgMOIqBYERVynIaURWCgKj5Lf/ZWECnNhKQeDEdssgTnmxlYLAia0UBE5spSBwYisFgRNbKQic2EpB4MRWCnI60ZWCwImtFARObKUgcGIrBYGTEzqxlYLAia0UBE5spSBwYisFgRNbKcjpRFcKAie2UhA4sZWCwImtFAROTujEVgoCJ7ZSEDixlYLAia0UBE5spSA7G8VWCrKl2EpBthRbKciWYisF2VJsl+1vKbZSkC1F+HEdXynIDkGylYJsKbZSkC3ljFJspSBbim5OjZRI9NCORA/tSPTQjkQP7Uj00I5ED+1I9NCORA/tSPTQjkQP7Uj00I5ED+1I9NCORA/tSPTQjkQP7Uj00I5ED+1I9NCORA+6SPSgi0QP7Uj00I5ED+1I9NCORA/tSPTQjkQP7Uj00I5ED+1I9NCORA/tSPTQjkQP7Uj00I5ED+1I9NCORA/tSPTQjkQP7Uj0oItED7pI9KCLRA+6SPSgi0QPukj0oItED7pI9KCLRA+6SPSgi0QPwkj0IIxED8JI9CCMRA/CSPQgjEQPwkj0IIxED8JI9CCMRA/CSPQgjEQPwkj0IIxED8JI9CCMRA/CSPQgjEQPwkj0IIxED8JI9CCMRA/CSPQgjEQPwkj0IIxED8JI9CCMRA/CSPQgjEQPxkj0YIxED8ZI9GCMRA/GSPRgjEQPxkj0YIxED8ZI9GCMRA/GSPRgjEQPwkh0a3992tjt5ebj9kJn3kf5Kv74UnvnF/2n+ZQ1X7LmteiqV11101U/dNVdV73pqndddd1dWnWXadXdpqa7TU13m5ruNjXdbWq629R0t6mFbdMHYsQjPt5O7XbwyJtfI1Y44ijxiBqPsHjEx1Nu3l4in8c1wuMRLR7R4xGfvt2tjL+/tJV5jZjxiBWO8BKPqPGIT39om92+tNkTRI9HfPrH3Y/bgbne7BLRSjwi/hvVPn67/f4T1cY1YsYjVjiil3hEjUdYPOKIR3g8osUjejzii29379eIGY/4/O2+j8FxjRgfv933Yf4UUeMRFo/49O3u9wRIL+sa4fGIFo/o8YgRj/j47V63y7J7LdeIFY6YJR5R4xEWjzjiER6PaPGIHo8YX0Rcv91zxiM+f7tvR2O6XSPWx2/3/VPUp4gaj7B4xMe7++W/WJfHI1o8oscjRjxixiPiP2Z5clz8e4zeMkpBepMuBelNuhSkN+lSkN6kS0F6ky4F6U26FKQ36VKQ3qRLQXqTLgXpTboUpDfpUpDepEtBepMuBelNuhSkN+lSkN6kS0F6ky4F6U26FKQ36VKQ3thKQXpjKwXpTboUpDfpUpDepEtBepMuBelNuhSkN+lSkN6kS0F6ky4F6U26FKQ36VKQ3qRLQaCvvXWVS0Ggr711lUtBepMuBYG+9tZVLgXpTboUpDe2UhAYcZWCwIirFARGXKUgMGLZYA8jrlKQ3thKQXpjKwXpja0UpDe2UpDe2EpBeuMrBemNrxSkN75SkN74SkF64ysF6Y2vFKQ3vlKQ3vhKQXrjKwXpja8UpDe+UpDe+EpBeuMrBemNrxSkN75SkN74SkF64ysF6Y2vFKQ3vlKQ3vhKQXrjKwXpja8UpDe+UpDe+EpBeuMrBemNrxSkN75SkN74SkF64ysF6Y2vFKQ3wlKQLcVWCrKl2EpBthRbKciWYrtsf0uxlYJsKcKP6/hKQXYIkq0UZEuxlYJsKWeUYisF2VJsc2qYainIaS56j/lpLnqN+WmuWgoCddFrzKEueo051EWvMYe666qLXmMOddFSEKjr7lLVUhCo625T1VIQqOtuU9VSEKjrblPVUhCo627T6FIQIEY8IrgUBIgVjoguBQGixiMsHhFcCgKExyNaPKLHI4JLQYCY8YgVjoguBQGixiOCS0GA6PGI4NsqT0R0KQgQ8d+o6FIQIGY8YoUjoktBgKjxCItHHPEIj0e0eESPRwSXggAx4xHBpSD4HVhwKQgQNR5h8YjgUhAgPB7R4hE9HjHiEcGlIECscER0KQgQNR5h8YgjHuHxiBaP6PGI4FIQIGY8IrgUBGcpgktBgKjxCItHBJeCAOHxiBaP6PGIEY+Y8Yj4j1nCS0FmzSgFOSnKpSDQF76eHPrC15NDX/h6cui7tr7w9eTQF76eHPrC15NDX/h6cugLl4Kc+sqlINDX3rrKpSDQ1966yqUg0NfeusqlINDX3rrKpSDQ5yoFOY3ISkFgJHw9OfSFryeHvvD15NB3bX3h68mhL3w9OfSFryeHvvD15NAXvp781FcuBYG+9tZVLgWBvvbWVS4Fgb721lUuBYG+9tZVLgWBvvbWJSsFgRFXKQiMuEpBYMRVCgIjlg32MOIqBYERVykIjLhKQWDEVQoCI65SkNOIrBQERslv/8vCBDixlYLAie2WQZzyYisFgRNbKQic2EpB4MRWCgIntlIQOLGVgsCJrRTkdKIrBYETWykInNhKQeDEVgoCJyd0YisFgRNbKQic2EpB4MRWCgIntlKQ04muFARObKUgcGIrBYETWykInJzQia0UBE5spSBwYisFgRNbKQic2EpBdjaKrRRkS7GVgmwptlKQLcVWCrKl2C7b31JspSBbivDjOr5SkB2CZCsF2VJspSBbyhml2EpBthTdnJopkeipHYme2pHoqR2JntqR6KkdiZ7akeipHYme2pHoqR2JntqR6KkdiZ7akeipHYme2pHoqR2JntqR6KkdiZ7akeipHYmedJHoSReJntqR6KkdiZ7akeipHYme2pHoqR2JntqR6KkdiZ7akeipHYme2pHoqR2JntqR6KkdiZ7akeipHYme2pHoqR2JntqR6EkXiZ50kehJF4medJHoSReJnnSR6EkXiZ50kehJF4medJHoSReJnoSR6EkYiZ6EkehJGImehJHoSRiJnoSR6EkYiZ6EkehJGImehJHoSRiJnoSR6EkYiZ6EkehJGImehJHoSRiJnoSR6EkYiZ6EkehJGImehJHoSRiJnoSR6EkYiZ6EkehJGImehJHoSRiJnoyR6MkYiZ6MkejJGImejJHoyRiJnoyR6MkYiZ6MkejJGImejJHoyRiJnnyR6KOUJ5Ho5uP2YOvj3ylfPBAPockmtNiEnuTLf9Oo0hkZndFBZ+R0Ro3OqNMZ0U3sSjeyK93MNrqZbXQz2+hmttHNbKOb2UY3sy1wZj8gIwPy+WT94unabbTYjI5CZ1TpjIzO6KAzcjqjRmfU6YwGnRHdzD7oZrbTzWynm9lON7OdbmY73cx2upntdDPbA2f2AzIzICsB0koGpGZALANyZEA8A9IyID0DkvHG989/hF8lFDbGcjCf/+H/5Nd/faX814ySg8n5ERj+Bcy/n8nfmJaD6TmYkYOZOZiVgpnfeG/+/dTwxtQcjOVgjhyM52BaDqbnYEYOZuZgVgpmfWEKvDgGuzE1B2M5mCMH4zmYloPpOZiRg5k5mC9MgRfHnP8c+ypJnJrE8ZR/4tTSkjg9iTNyOF84Z/gzTk3iWBLnSOJkvD92fUJ43J8b48VHwl5uJ5bdXhxYnvepsYr/zz8+O37ng2a7PkosYb5kza+HhoZ61VU3XfVDV9111ZuuetdV192lVXeZVt1tarrb1HS3qeluU9Pdpqa7TU13m1rYNn0gRjzi4+3Ubr/19ebXiBWOOEo8osYjLB7x8ZSbt5fI53GN8HhEi0f0eMSnb3crt8+rWpnXiBmPWOEIL/GIGo/49Ie22e1Lmz1B9HjEp3/c/bid3ejNLhGtxCPiv1Ht47f7/ml0a+MaMeMRKxzRSzyixiMsHnHEIzwe0eIRPR7xxbe792vEjEd8/nbfx+C4RoyP3+77MH+KqPEIi0d8+nb3+/HbXtY1wuMRLR7R4xEjHvHx273aDVHLNWKFI2aJR9R4hMUjjniExyNaPKLHI8YXEddv95zxiM/f7tv5vG7XiPXx233/FPUposYjLB7x8e5++S/W5fGIFo/o8YgRj5jxiPiPWZ6civ0eoz45Afcfr+0st0lYvdZLSk2+Gfubty7VZ6endPRNW//Q1ndt/aat37X1h7b+1NZf0vqmvXVNe+ua9tY17a1r2lvXtLeuaW9d0966pr11jWXr3o0OlkX6MErejd+8Jq0+O0eno39o67u2ftPW79r6Q1t/ausvaX0v2vraW9e1t65rb13X3rquvXVde+u69tZ17a3r2lu3sWzdhxHLIn0YsezGhxHLunsYsWywhxHLUnoYseyZhxHL6ngYsWyDhxHLgL8bdbqZ3ZPf/pe3VddnUZVfdiLrId+nvCrf92kYodNB6JTdrP3q7u76LH7xy06T0GnxOc1C6FQJndLn04vbsuuzkMovOzmhUyN06oROg9BpEjotPqdVCJ0qoVP2HH91rXp9Fkf6ZScndGqETp3QaRA6TUKnxef0rPvgl6WyJ/mrVoUtZYxSB6NU5/sQ6lm5wy9LEX5cV8silMqOEf5M6mCUckapxihFN6eWainIaS56j/lpLnqN+WmuWgoCddFrzKEueo051EWvMYe666qLXmMOddFSEKjr7lLVUhCo625T1VIQqOtuU9VSEKjrblPVUhCo627T6FIQIEY8IrgUBIgVjoguBQGixiMsHhFcCgKExyNaPKLHI4JLQYCY8YgVjoguBQGixiOCS0GA6PGI4NsqT0R0KQgQ8d+o6FIQIGY8YoUjoktBgKjxCItHHPEIj0e0eESPRwSXggAx4xHBpSD4HVhwKQgQNR5h8YjgUhAgPB7R4hE9HjHiEcGlIECscER0KQgQNR5h8YgjHuHxiBaP6PGI4FIQIGY8IrgUBGcpgktBgKjxCItHBJeCAOHxiBaP6PGIEY+Y8Yj4j1nCS0FsZpSCnBTlUhDoC19PDn3h68mhL3w9OfRdW1/4enLoC19PDn3h68mhL3w9OfSFS0FOfeVSEOhrb13lUhDoa29d5VIQ6GtvXeVSEOhrb13lUhDoc5WCnEZkpSAwEr6eHPrC15NDX/h6cui7tr7w9eTQF76eHPrC15NDX/h6cugLX09+6iuXgkBfe+sql4JAX3vrKpeCQF976yqXgkBfe+sql4JAX3vrkpWCwIirFARGXKUgMOIqBYERywZ7GHGVgsCIqxQERlylIDDiKgWBEVcpyGlEVgoCo+S3/2Vhwv+v7u12HFmWJb0XOtjI8AiPn8cZCboYQBgJ0kiALs67ix69SPbGSS7WYtK8zS43diW+b1VXunezwsLCia0UJJzYbhmMU15spSDhxFYKEk5spSDhxFYKEk5spSDhxFYKEk5spSA3J7pSkHBiKwUJJ7ZSkHBiKwUJp0boxFYKEk5spSDhxFYKEk5spSDhxFYKcnOiKwUJJ7ZSkHBiKwUJJ7ZSkHBqhE5spSDhxFYKEk5spSDhxFYKEk5spSA7G8VWCrKl2EpBthRbKciWYisF2VJsl+1vKbZSkC1F+HEdXynIDkGylYJsKbZSkC3VGKXYSkG2FNucqp4Rib5RlCPRoS8czgp94XBW6AuHs0K/aesLh7NCXzicFfrC4azQFw5nhb5wJPqmrxyJDn3trasciQ597a2rHIkOfe2tqxyJDn3trasciQ59rkj0zYgsEh1GwuGs0BcOZ4W+cDgr9Ju2vnA4K/SFw1mhLxzOCn3hcFboC4ezbvrKkejQ1966ypHo0NfeusqR6NDX3rrKkejQ1966ypHo0NfeumSR6DDiikSHEVckOoy4ItFhxLLBnkZckegw4opEhxFXJDqMuCLRYcQVib4ZkUWiwyj57X8bFw0ntkh0OLGdsYxTXmyR6HBii0SHE1skOpzYItHhxBaJDie2SHQ4sUWib050kehwYotEhxNbJDqc2CLR4dQIndgi0eHEFokOJ7ZIdDixRaLDiS0SfXOii0SHE1skOpzYItHhxBaJDqdG6MQWiQ4ntkh0OLFFosOJLRIdTmyR6J2NYotEbym2SPSWYotEbym2SPSWIowa8kWitxThx3V8kegdgmSLRG8ptkj0lmqMUmyR6C3FNqda/dfVxu523H2avdGZj1G+jvb8UvvkF/038ylrvmTNy6GrXnTVTVe96qo3XXXXVe+66rq7tOgu06K7TU13m5ruNjXdbWq629R0t6npblODbdMnYuARl7eT3w8eNW/niAVH1AOPKHiE4RGXp9y8v0Rt1nNEwyMcj+h4xNW324/x15f6Mc8RE49YcEQ78IiCR1z9oXW7f6nbC0THI67+cfd6PzDX3U4RfuAR+G+UX3672+Mnysc5YuIRC47oBx5R8AjDIyoe0fAIxyM6HvHFt7v3c8TEI66/3Y8xOM4R4/Lb/RjmLxEFjzA84urb3R8JkH6sc0TDIxyP6HjEwCMuv93rfll2L8c5YsER88AjCh5heETFIxoe4XhExyPGFxHnb/eceMT1t/t+NKbbOWJdfrsfn6K+RBQ8wvCIy7v77b9YV8MjHI/oeMTAIyYegf+Y5cVx8e8xvGaUgniVLgXxKl0K4lW6FMSrdCmIV+lSEK/SpSBepUtBvEqXgniVLgXxKl0K4lW6FMSrdCmIV+lSEK/SpSBepUtBvEqXgniVLgXxKl0K4lW6FMQrWymIV7ZSEK/SpSBepUtBvEqXgniVLgXxKl0K4lW6FMSrdCmIV+lSEK/SpSBepUtBvEqXgoS+9tZVLgUJfe2tq1wK4lW6FCT0tbeucimIV+lSEK9spSBhxFUKEkZcpSBhxFUKEkYsG+xpxFUK4pWtFMQrWymIV7ZSEK9spSBe2UpBvPKVgnjlKwXxylcK4pWvFMQrXymIV75SEK98pSBe+UpBvPKVgnjlKwXxylcK4pWvFMQrXymIV75SEK98pSBe+UpBvPKVgnjlKwXxylcK4pWvFMQrXymIV75SEK98pSBe+UpBvPKVgnjlKwXxylcK4pWvFMQrXymIV75SEK+EpSBbiq0UZEuxlYJsKbZSkC3Fdtn+lmIrBdlShB/X8ZWC7BAkWynIlmIrBdlSjVGKrRRkS7HNqX6oloLczEXvMb+Zi15jfjNXLQUJddFrzENd9BrzUBe9xjzUm6666DXmoS5aChLqurtUtRQk1HW3qWopSKjrblPVUpBQ192mqqUgoa67TdGlIIEYeAS4FCQQC45Al4IEouARhkeAS0EC0fAIxyM6HgEuBQnExCMWHIEuBQlEwSPApSCB6HgE+LbKGwJdChII/DcKXQoSiIlHLDgCXQoSiIJHGB5R8YiGRzge0fEIcClIICYeAS4Fid+BgUtBAlHwCMMjwKUggWh4hOMRHY8YeAS4FCQQC45Al4IEouARhkdUPKLhEY5HdDwCXAoSiIlHgEtB4iwFuBQkEAWPMDwCXAoSiIZHOB7R8YiBR0w8Av8xC7wUpK+MUpAbRbkUJPSFrycPfeHryUNf+Hry0G/a+sLXk4e+8PXkoS98PXnoC19PHvrCpSA3feVSkNDX3rrKpSChr711lUtBQl976yqXgoS+9tZVLgUJfa5SkJsRWSlIGAlfTx76wteTh77w9eSh37T1ha8nD33h68lDX/h68tAXvp489IWvJ7/pK5eChL721lUuBQl97a2rXAoS+tpbV7kUJPS1t65yKUjoa29dslKQMOIqBQkjrlKQMOIqBQkjlg32NOIqBQkjrlKQMOIqBQkjrlKQMOIqBbkZkZWChFHy2/+2MCGc2EpBwontlsE45cVWChJObKUg4cRWChJObKUg4cRWChJObKUg4cRWCnJzoisFCSe2UpBwYisFCSe2UpBwaoRObKUg4cRWChJObKUg4cRWChJObKUgNye6UpBwYisFCSe2UpBwYisFCadG6MRWChJObKUg4cRWChJObKUg4cRWCrKzUWylIFuKrRRkS7GVgmwptlKQLUV32f4iLAXZUoQf1/GVguwQJFspyJZiKwXZUo1Riq0UZEuxzanRMyLRN4pyJDr0hcNZoS8czgp94XBW6DdtfeFwVugLh7NCXzicFfrC4azQF45E3/SVI9Ghr711lSPRoa+9dZUj0aGvvXWVI9Ghr711lSPRoc8Vib4ZkUWiw0g4nBX6wuGs0BcOZ4V+09YXDmeFvnA4K/SFw1mhLxzOCn3hcNZNXzkSHfraW1c5Eh362ltXORId+tpbVzkSHfraW1c5Eh362luXLBIdRlyR6DDiikSHEVckOoxYNtjTiCsSHUZckegw4opEhxFXJDqMuCLRNyOySHQYJb/9b+Oi4cQWiQ4ntjOWccqLLRIdTmyR6HBii0SHE1skOpzYItHhxBaJDie2SPTNiS4SHU5skehwYotEhxNbJDqcGqETWyQ6nNgi0eHEFokOJ7ZIdDixRaJvTnSR6HBii0SHE1skOpzYItHh1Aid2CLR4cQWiQ4ntkh0OLFFosOJLRK9s1FskegtxRaJ3lJskegtxRaJ3lKEUUO+SPSWIvy4ji8SvUOQbJHoLcUWid5SjVGKLRK9pcjmVH8ZXhjHXWn4s3a9HP7bg+PTB+enD64PHzw/0f6TB8unD9qnD56+4fM4/npwHq8ebJ8+6J8+2D99cHz64Pz0wfXhg+dHOOfj89Q55osHy6cP2qcP1k8fbJ8+6J8+2D998PwnZ477g6u/eHB++uD68MHzY0g/ebB8+qB9+mD99MHTn5xV7q/VKi9eq/OTLD95sH/64Pj0wfnpg+vDB88PQ/zkwfLmQXvx59jt0wfrpw+e/+TU+wRY7cUEOD8D8ZMH+6cPjk8fnJ8+uD58cByfPnj+k9Mff3s8Wvu3J//jn3zxE2M5mJqDaTkYz8H0HMzIwcwczErBnB9i+D4mZwrMnCkwc6bAzJkCM2cKzJwpMHOmwMyZAjNnCqycKbBypsDKmQIrZwqsnCmwcqbAypkCK2cKrJwpsHKmwItfoAI4JYljSZyaxGlJHE/i9CTOSOLMJE7SPChJ86AkzYOSNA9K0jwoSfOgJM2DkjQPStI8KEnzoCTNA0uaB5Y0DyxpHljSPLCkeWBJ88CS5oElzQNLmgeWNA9q0jyoSfOgJs2DmjQPatI8qEnzoCbNg5o0D2rSPKhJ86AlzYOWNA9a0jxoSfOgJc2DljQPWtI8aEnzoCXNg5Y0DzxpHnjSPPCkeeBJ88CT5oEnzQNPmgeeNA88aR540jzoSfOgJ82DnjQPetI86EnzoCfNg540D3rSPOhJ86AnzYORNA+SziCWpEOIJekUYkk6hliSziGWpIOIJekkYkk6iliSziKWpMOIJek0Ykk6jliSziOWpAOJJelEYkk6kliSziSWpEOJJelUYkk6lliSziWWpIOJJelkYkk6mliSziaWpMOJJel0Ykk6nliSzida0vlESzqfaEnnEy3pfKIdLYnjSZyexBlJnJnESZoHSecTLel8oiWdT7Sk84mWdD7Rks4nWtL5REs6n2hJ5xMt6XyiJZ1PtKTziZZ0PtGSzida0vlESzqfaEnnEy3pfKIlnU+0pPOJlnQ+0ZLOJ1rS+URLOp9oSecTLel8oiWdT7Sk84mWdD7Rks4nWtL5REs6n2hJ5xMt6XyiJZ1PtC+c5/PjfvONl9+ujm2/X3/4heN8P8F84fSb2wNT/RXGcjA1B9NyMJ6D+aeL57dHx8ePfuEYwk9+vr9wCuFHGM/B9BxMzoj7wgkEb/dbuN3tFWalYL5w/uBHmJKDsRzMF6ZAnQ9MfYVpORjPwfQczMjBzBzMSlmmXzh18CNMzl/bVs5f21bOX9u+cOLgR5icv7Z94bzBjzAjBzNzMClToB5HDqbkYCwHU3MwLQfjOZiegxk5mJmDyZkCJWcKlJwpUHKmQMmZAiVnCpScKVBypkDJmQIlZwqUnClgOVPAcqaA5UwBy5kCljMFLGcKWM4UMPwUmPav85Y6b/fyj+L935pm/ytk+v3zpznL339pKfNhb/bbRwj2FJpsQotN6PzvO3/UqNAZGZ1RpTNqdEZOZ9TpjOgmdqEb2YVuZhvdzDa6mW10M9voZrbRzWyjm9kGnNlPyMiAXJ+s6yh/fe2qxxe+t4vNqB50RoXOyOiMKp1RozNyOqNOZzTojOhmdqWb2Y1uZje6md3oZnajm9mNbmY3upnd6GZ2A87sJ2RmQFYCxI8MSMmAWAakZkBaBsQzID0DkvHG9+s/wuU46v2Lj2LnGMvBXP/DL9aes7iff8LQV8p/zThyMDk/AqN9AdPXAzP7OcZzMD0HM3IwMwezUjDzG+9NL0/MOMeUHIzlYGoOpuVgPAfTczAjBzNzMCsFs74wBUpp9y8u7fwvUKvkYCwHU3MwLQfjOZiegxk5mJmD+cIUKMMemDlPMS+avwGcksRpKf/EKYcncXoSZ+RwvnDO8GecksSxJE5N4mS8P+38hPB4PDfGm4+E23FPDTfzv//S+Zga63iebb59dvzJB83t/CixhPmSNT8fGhrqRVfddNWrrnrTVXdd9a6rrrtLi+4yLbrb1HS3qeluU9Pdpqa7TU13m5ruNjXYNn0iBh5xeTv5/be+zds5YsER9cAjCh5heMTlKTfvL1Gb9RzR8AjHIzoecfXt9uP+eZUf8xwx8YgFR7QDjyh4xNUfWrf7l7q9QHQ84uofd6/3sxvd7RThBx6B/0b55bf78Wm0+zhHTDxiwRH9wCMKHmF4RMUjGh7heETHI774dvd+jph4xPW3+zEGxzliXH67H8P8JaLgEYZHXH27++P4bT/WOaLhEY5HdDxi4BGX3+7ld0Q5zhELjpgHHlHwCMMjKh7R8AjHIzoeMb6IOH+758Qjrr/d9/N53c4R6/Lb/fgU9SWi4BGGR1ze3W//xboaHuF4RMcjBh4x8Qj8xywvTsV+j7FenIArvT5OBnd/80ub0o77JCytlFPKi+OW/wzT5gMz3v0i6Yu3Lq1Xp6d09E1bv2rrN21919bv2vpDW39q6y9pfdPeuqa9dU1765r21jXtrWvaW9e0t65pb13T3rrGsnUfRpVlkT6NknfjN69JW6/O0enoV239pq3v2vpdW39o609t/SWt3w5tfe2t27S3btPeuk176zbtrdu0t27T3rpNe+s27a3rLFv3acSySJ9GLLvxacSy7p5GLBvsacSylJ5GLHvmacSyOp5GLNvgacQy4B9GnW5m9+S3/+1t1etVVOUPOyX/dL+952y9CmD82e/TMEKnSujUs53e3N29XsUv/rDTJHRafE7zIHQqhE7p8+nNbdnrVUjlDzs1QicndOqEToPQaRI6LT6ndRA6FUKn7Dn+7lr19SqO9IedGqGTEzp1QqdB6DQJnRaf06vugz8slT3J37UqbCljlKqMUp3vQ6hX5Q5/WIrw47pyLEKp7Bjhz6Qqo1RjlHJGKbI5NY4iWgoS5pr3mIe55jXmYS5aCrLVNa8x3+qa15hvdc1rzLd601XXvMZ8q2uWgmx13V0qWgqy1XW3qWgpyFbX3aaipSBbXXebipaCbHXdbQouBdmIgUdgS0E2YsER4FKQjSh4hOER2FKQjWh4hOMRHY/AloJsxMQjFhwBLgXZiIJHYEtBNqLjEdjbKgMBLgXZCPw3ClwKshETj1hwBLgUZCMKHmF4RMUjGh7heETHI7ClIBsx8QhsKcj+HRi2FGQjCh5heAS2FGQjGh7heETHIwYegS0F2YgFR4BLQTai4BGGR1Q8ouERjkd0PAJbCrIRE4/AloLssxTYUpCNKHiE4RHYUpCNaHiE4xEdjxh4xMQj8B+zoEtBRjkSSkGCIlwKsvV1ryff+rrXk2993evJt37T1te9nnzr615PvvV1ryff+rrXk2993VKQ0BcuBdn62ltXuBRk62tvXeFSkK2vvXWFS0G2vvbWFS4F2fpUpSBhxFUKso10ryff+rrXk2993evJt37T1te9nnzr615PvvV1ryff+rrXk2993evJQ1+4FGTra29d4VKQra+9dYVLQba+9tYVLgXZ+tpbV7gUZOtrb12uUpBtRFUKso2oSkG2EVUpyDZi2WBPI6pSkG1EVQqyjahKQbYRVSnINqIqBQkjrlKQbZT89r8rTNhOZKUg24nslsF9yousFGQ7kZWCbCeyUpDtRFYKsp3ISkG2E1kpyHYiKwUJJ7ZSkO1EVgqynchKQbYTWSnIdmqETmSlINuJrBRkO5GVgmwnslKQ7URWChJObKUg24msFGQ7kZWCbCeyUpDt1AidyEpBthNZKch2IisF2U5kpSDbiawU5Fc2iqwU5JcUWSnILymyUpBfUmSlIL+k2C7b31JkpSC/pAg/rqMrBfkVgiQrBfklRVYK8kuqMUqRlYL8kqKbUyMlEj20I9FDOxI9tCPRQzsSPbQj0UM7Ej20I9FDOxI9tCPRQzsSPbQj0UM7Ej20I9FDOxI9tCPRQzsSPbQj0UM7Ej20I9GDLhI96CLRQzsSPbQj0UM7Ej20I9FDOxI9tCPRQzsSPbQj0UM7Ej20I9FDOxI9tCPRQzsSPbQj0UM7Ej20I9FDOxI9tCPRQzsSPegi0YMuEj3oItGDLhI96CLRgy4SPegi0YMuEj3oItGDLhI96CLRgzASPQgj0YMwEj0II9GDMBI9CCPRgzASPQgj0YMwEj0II9GDMBI9CCPRgzASPQgj0YMwEj0II9GDMBI9CCPRgzASPQgj0YMwEj0II9GDMBI9CCPRgzASPQgj0YMwEj0II9GDMBI9CCPRgzESPRgj0YMxEj0YI9GDMRI9GCPRgzESPRgj0YMxEj0YI9GDMRI9GCPRgzASbf6vq43d7bj7NHujMx+jfB3t+aX2yS/6b+ZT1nzJmpdDV73oqpuuetVVb7rqrqveddV1d2nRXaZFd5ua7jY13W1qutvUdLep6W5T092mBtumT8TAIy5vJ78fPGrezhELjqgHHlHwCMMjLk+5eX+J2qzniIZHOB7R8Yirb7cf468v9WOeIyYeseCIduARBY+4+kPrdv9StxeIjkdc/ePu9X5grrudIvzAI/DfKL/8drfHT5SPc8TEIxYc0Q88ouARhkdUPKLhEY5HdDzii2937+eIiUdcf7sfY3CcI8blt/sxzF8iCh5heMTVt7s/EiD9WOeIhkc4HtHxiIFHXH671/2y7F6Oc8SCI+aBRxQ8wvCIikc0PMLxiI5HjC8izt/uOfGI62/3/WhMt3PEuvx2Pz5FfYkoeIThEZd399t/sa6GRzge0fGIgUdMPAL/McuL4+LfY1TPKAWpLl0KUl26FKS6dClIdelSkOrSpSDVpUtBqkuXglSXLgWpLl0KUl26FKS6dClIdelSkOrSpSDVpUtBqkuXglSXLgWpLl0KUl26FKS6dClIdbZSkOpspSDVpUtBqkuXglSXLgWpLl0KUl26FKS6dClIdelSkOrSpSDVpUtBqkuXglSXLgUJfe2tq1wKEvraW1e5FKS6dClI6GtvXeVSkOrSpSDV2UpBwoirFCSMuEpBwoirFCSMWDbY04irFKQ6WylIdbZSkOpspSDV2UpBqrOVglTnKwWpzlcKUp2vFKQ6XylIdb5SkOp8pSDV+UpBqvOVglTnKwWpzlcKUp2vFKQ6XylIdb5SkOp8pSDV+UpBqvOVglTnKwWpzlcKUp2vFKQ6XylIdb5SkOp8pSDV+UpBqvOVglTnKwWpzlcKUp2vFKQ6XylIdb5SkOp8pSDVCUtBthRbKciWYisF2VJspSBbiu2y/S3FVgqypQg/ruMrBdkhSLZSkC3FVgqypRqjFFspyJZim1PNVEtBbuai95jfzEWvMb+Zq5aChLroNeahLnqNeaiLXmMe6k1XXfQa81AXLQUJdd1dqloKEuq621S1FCTUdbepailIqOtuU9VSkFDX3aboUpBADDwCXAoSiAVHoEtBAlHwCMMjwKUggWh4hOMRHY8Al4IEYuIRC45Al4IEouAR4FKQQHQ8Anxb5Q2BLgUJBP4bhS4FCcTEIxYcgS4FCUTBIwyPqHhEwyMcj+h4BLgUJBATjwCXgsTvwMClIIEoeIThEeBSkEA0PMLxiI5HDDwCXAoSiAVHoEtBAlHwCMMjKh7R8AjHIzoeAS4FCcTEI8ClIHGWAlwKEoiCRxgeAS4FCUTDIxyP6HjEwCMmHoH/mAVeCuIloxTkRlEuBQl94evJQ1/4evLQF76ePPSbtr7w9eShL3w9eegLX08e+sLXk4e+cCnITV+5FCT0tbeucilI6GtvXeVSkNDX3rrKpSChr711lUtBQp+rFORmRFYKEkbC15OHvvD15KEvfD156DdtfeHryUNf+Hry0Be+njz0ha8nD33h68lv+sqlIKGvvXWVS0FCX3vrKpeChL721lUuBQl97a2rXAoS+tpbl6wUJIy4SkHCiKsUJIy4SkHCiGWDPY24SkHCiKsUJIy4SkHCiKsUJIy4SkFuRmSlIGGU/Pa/LUwIJ7ZSkHBiu2UwTnmxlYKEE1spSDixlYKEE1spSDixlYKEE1spSDixlYLcnOhKQcKJrRQknNhKQcKJrRQknBqhE1spSDixlYKEE1spSDixlYKEE1spyM2JrhQknNhKQcKJrRQknNhKQcKpETqxlYKEE1spSDixlYKEE1spSDixlYLsbBRbKciWYisF2VJspSBbiq0UZEuxXba/pdhKQbYU4cd1fKUgOwTJVgqypdhKQbZUY5RiKwXZUnRzaqZEoqd2JHpqR6KndiR6akeip3YkempHoqd2JHpqR6KndiR6akeip3YkempHoqd2JHpqR6KndiR6akeip3YkempHoqd2JHrSRaInXSR6akeip3YkempHoqd2JHpqR6KndiR6akeip3YkempHoqd2JHpqR6KndiR6akeip3YkempHoqd2JHpqR6KndiR6akeiJ10ketJFoiddJHrSRaInXSR60kWiJ10ketJFoiddJHrSRaInXSR6EkaiJ2EkehJGoidhJHoSRqInYSR6EkaiJ2EkehJGoidhJHoSRqInYSR6EkaiJ2EkehJGoidhJHoSRqInYSR6EkaiJ2EkehJGoidhJHoSRqInYSR6EkaiJ2EkehJGoidhJHoSRqInYSR6MkaiJ2MkejJGoidjJHoyRqInYyR6MkaiJ2MkejJGoidjJHoyRqInYyR6Ekaix/EiEu1t3B/0Pv6e8s0D8TehySa02IRe5Mv/pFGhMzI6o0pn1OiMnM6o0xnRTexCN7IL3cw2upltdDPb6Ga20c1so5vZRjezDTizn5CRAbk+Wb95ujaMFptRPeiMCp2R0RlVOqNGZ+R0Rp3OaNAZ0c3sSjezG93MbnQzu9HN7EY3sxvdzG50M7vRzewGnNlPyMyArASIHxmQkgGxDEjNgLQMiGdAegYk443v13+E3yYUAmM5mOt/+D/59V9fKf8148jB5PwIjPYFzJsz+YHxHEzPwYwczMzBrBTM/MZ78+bUcGBKDsZyMDUH03IwnoPpOZiRg5k5mJWCWV+YAu+OwQam5GAsB1NzMC0H4zmYnoMZOZiZg/nCFHh3zHkf+zqSOCWJ01L+iVMOT+L0JM7I4XzhnOHPOCWJY0mcmsTJeH/s/ITweDx3U/l7RjvuJ5abvTmwPB9TYx3tP3/77PiTD5rt/CixhPmSNT8fGhrqRVfddNWrrnrTVXdd9a6rrrtLi+4yLbrb1HS3qeluU9Pdpqa7TU13m5ruNjXYNn0iBh5xeTv5/be+zds5YsER9cAjCh5heMTlKTfvL1Gb9RzR8AjHIzoecfXt9uP+eZUf8xwx8YgFR7QDjyh4xNUfWrf7l7q9QHQ84uofd6/3sxvd7RThBx6B/0b55bf78Wm0+zhHTDxiwRH9wCMKHmF4RMUjGh7heETHI774dvd+jph4xPW3+zEGxzliXH67H8P8JaLgEYZHXH27++P4bT/WOaLhEY5HdDxi4BGX3+7ld0Q5zhELjpgHHlHwCMMjKh7R8AjHIzoeMb6IOH+758Qjrr/d9/N53c4R6/Lb/fgU9SWi4BGGR1ze3W//xboaHuF4RMcjBh4x8Qj8xywvTsV+jzFfnID7h9d2HvdJWFopp5SSfDP2N29dmq9OT+nom7Z+1dZv2vqurd+19Ye2/tTWX9L6pr11TXvrmvbWNe2ta9pb17S3rmlvXdPeuqa9dY1l6z6MKssifRol78ZvXpM2X52j09Gv2vpNW9+19bu2/tDWn9r6S1q/Hdr62lu3aW/dpr11m/bWbdpbt2lv3aa9dZv21m3aW9dZtu7TiGWRPo1YduPTiGXdPY1YNtjTiGUpPY1Y9szTiGV1PI1YtsHTiGXAP4w63czuyW//29uq56uoyh92Yushn68CGH/2+zSM0KkSOmU3a7+7u3u+il/8YadJ6LT4nOZB6FQIndLn05vbsuerkMofdmqETk7o1AmdBqHTJHRafE7rIHQqhE7Zc/zdterzVRzpDzs1QicndOqEToPQaRI6LT6nV90Hf1gqe5K/a1XYUsYoVRmlOt+HUK/KHf6wFOHHdeVYhFLZMcKfSVVGqcYo5YxSdHNqqZaC3MxF7zG/mYteY34zVy0FCXXRa8xDXfQa81AXvcY81Juuuug15qEuWgoS6rq7VLUUJNR1t6lqKUio625T1VKQUNfdpqqlIKGuu03RpSCBGHgEuBQkEAuOQJeCBKLgEYZHgEtBAtHwCMcjOh4BLgUJxMQjFhyBLgUJRMEjwKUggeh4BPi2yhsCXQoSCPw3Cl0KEoiJRyw4Al0KEoiCRxgeUfGIhkc4HtHxCHApSCAmHgEuBYnfgYFLQQJR8AjDI8ClIIFoeITjER2PGHgEuBQkEAuOQJeCBKLgEYZHVDyi4RGOR3Q8AlwKEoiJR4BLQeIsBbgUJBAFjzA8AlwKEoiGRzge0fGIgUdMPAL/MQu8FGTNjFKQG0W5FCT0ha8nD33h68lDX/h68tBv2vrC15OHvvD15KEvfD156AtfTx76wqUgN33lUpDQ1966yqUgoa+9dZVLQUJfe+sql4KEvvbWVS4FCX2uUpCbEVkpSBgJX08e+sLXk4e+8PXkod+09YWvJw994evJQ1/4evLQF76ePPSFrye/6SuXgoS+9tZVLgUJfe2tq1wKEvraW1e5FCT0tbeucilI6GtvXbJSkDDiKgUJI65SkDDiKgUJI5YN9jTiKgUJI65SkDDiKgUJI65SkDDiKgW5GZGVgoRR8tv/tjAhnNhKQcKJ7ZbBOOXFVgoSTmylIOHEVgoSTmylIOHEVgoSTmylIOHEVgpyc6IrBQkntlKQcGIrBQkntlKQcGqETmylIOHEVgoSTmylIOHEVgoSTmylIDcnulKQcGIrBQkntlKQcGIrBQmnRujEVgoSTmylIOHEVgoSTmylIOHEVgqys1FspSBbiq0UZEuxlYJsKbZSkC3Fdtn+lmIrBdlShB/X8ZWC7BAkWynIlmIrBdlSjVGKrRRkS5HNqXl4QiQ6KMKR6K2vG87a+rrhrK2vG87a+k1bXzectfV1w1lbXzectfV1w1lbXzcSHfrCkeitr711hSPRW1976wpHore+9tYVjkRvfe2tKxyJ3vpUkegw4opEbyPdcNbW1w1nbX3dcNbWb9r6uuGsra8bztr6uuGsra8bztr6uuGs0BeORG997a0rHIne+tpbVzgSvfW1t65wJHrra29d4Uj01tfeulyR6G1EFYneRlSR6G1EFYneRiwb7GlEFYneRlSR6G1EFYneRlSR6G1EFYkOI65I9DZKfvvfxUW3E1kkejuRnbHcp7zIItHbiSwSvZ3IItHbiSwSvZ3IItHbiSwSvZ3IItHhxBaJ3k5kkejtRBaJ3k5kkejt1AidyCLR24ksEr2dyCLR24ksEr2dyCLR4cQWid5OZJHo7UQWid5OZJHo7dQIncgi0duJLBK9ncgi0duJLBK9ncgi0XNno8gi0b+kyCLRv6TIItG/pMgi0b+kCKOGdJHoX1KEH9fRRaK3FFsk+pcUWST6l1RjlCKLRP+SYptTpf7ramN3O+4+zd7ozMcoX0d7fql98ov+m/mUNV+y5uXQVS+66qarXnXVm66666p3XXXdXVp0l2nR3aamu01Nd5ua7jY13W1qutvUdLepwbbpEzHwiMvbye8Hj5q3c8SCI+qBRxQ8wvCIy1Nu3l+iNus5ouERjkd0POLq2+3H+OtL/ZjniIlHLDiiHXhEwSOu/tC63b/U7QWi4xFX/7h7vR+Y626nCD/wCPw3yi+/3e3xE+XjHDHxiAVH9AOPKHiE4REVj2h4hOMRHY/44tvd+zli4hHX3+7HGBzniHH57X4M85eIgkcYHnH17e6PBEg/1jmi4RGOR3Q8YuARl9/udb8su5fjHLHgiHngEQWPMDyi4hENj3A8ouMR44uI87d7Tjzi+tt9PxrT7RyxLr/dj09RXyIKHmF4xOXd/fZfrKvhEY5HdDxi4BETj8B/zPLiuPj3GFYzSkGsSpeCWJUuBbEqXQpiVboUxKp0KYhV6VIQq9KlIFalS0GsSpeCWJUuBbEqXQpiVboUxKp0KYhV6VIQq9KlIFalS0GsSpeCWJUuBbEqXQpila0UxCpbKYhV6VIQq9KlIFalS0GsSpeCWJUuBbEqXQpiVboUxKp0KYhV6VIQq9KlIFalS0FCX3vrKpeChL721lUuBbEqXQoS+tpbV7kUxKp0KYhVtlKQMOIqBQkjrlKQMOIqBQkjlg32NOIqBbHKVgpila0UxCpbKYhVtlIQq2ylIFb5SkGs8pWCWOUrBbHKVwpila8UxCpfKYhVvlIQq3ylIFb5SkGs8pWCWOUrBbHKVwpila8UxCpfKYhVvlIQq3ylIFb5SkGs8pWCWOUrBbHKVwpila8UxCpfKYhVvlIQq3ylIFb5SkGs8pWCWOUrBbHKVwpila8UxCpfKYhVwlKQLcVWCrKl2EpBthRbKciWYrtsf0uxlYJsKcKP6/hKQXYIkq0UZEuxlYJsqcYoxVYKsqXY5lQ9VEtBbuai95jfzEWvMb+Zq5aChLroNeahLnqNeaiLXmMe6k1XXfQa81AXLQUJdd1dqloKEuq621S1FCTUdbepailIqOtuU9VSkFDX3aboUpBADDwCXAoSiAVHoEtBAlHwCMMjwKUggWh4hOMRHY8Al4IEYuIRC45Al4IEouAR4FKQQHQ8Anxb5Q2BLgUJBP4bhS4FCcTEIxYcgS4FCUTBIwyPqHhEwyMcj+h4BLgUJBATjwCXgsTvwMClIIEoeIThEeBSkEA0PMLxiI5HDDwCXAoSiAVHoEtBAlHwCMMjKh7R8AjHIzoeAS4FCcTEI8ClIHGWAlwKEoiCRxgeAS4FCUTDIxyP6HjEwCMmHoH/mAVeClJXRinIjaJcChL6wteTh77w9eShL3w9eeg3bX3h68lDX/h68tAXvp489IWvJw994VKQm75yKUjoa29d5VKQ0NfeusqlIKGvvXWVS0FCX3vrKpeChD5XKcjNiKwUJIyErycPfeHryUNf+Hry0G/a+sLXk4e+8PXkoS98PXnoC19PHvrC15Pf9JVLQUJfe+sql4KEvvbWVS4FCX3tratcChL62ltXuRQk9LW3LlkpSBhxlYKEEVcpSBhxlYKEEcsGexpxlYKEEVcpSBhxlYKEEVcpSBhxlYLcjMhKQcIo+e1/W5gQTmylIOHEdstgnPJiKwUJJ7ZSkHBiKwUJJ7ZSkHBiKwUJJ7ZSkHBiKwW5OdGVgoQTWylIOLGVgoQTWylIODVCJ7ZSkHBiKwUJJ7ZSkHBiKwUJJ7ZSkJsTXSlIOLGVgoQTWylIOLGVgoRTI3RiKwUJJ7ZSkHBiKwUJJ7ZSkHBiKwXZ2Si2UpAtxVYKsqXYSkG2FFspyJaiu2x/EZaCbCnCj+v4SkF2CJKtFGRLsZWCbKnGKMVWCrKl2OZU6xmR6BtFORId+sLhrNAXDmeFvnA4K/Sbtr5wOCv0hcNZoS8czgp94XBW6AtHom/6ypHo0NfeusqR6NDX3rrKkejQ1966ypHo0NfeusqR6NDnikTfjMgi0WEkHM4KfeFwVugLh7NCv2nrC4ezQl84nBX6wuGs0BcOZ4W+cDjrpq8ciQ597a2rHIkOfe2tqxyJDn3trasciQ597a2rHIkOfe2tSxaJDiOuSHQYcUWiw4grEh1GLBvsacQViQ4jrkh0GHFFosOIKxIdRlyR6JsRWSQ6jJLf/rdx0XBii0SHE9sZyzjlxRaJDie2SHQ4sUWiw4ktEh1ObJHocGKLRIcTWyT65kQXiQ4ntkh0OLFFosOJLRIdTo3QiS0SHU5skehwYotEhxNbJDqc2CLRNye6SHQ4sUWiw4ktEh1ObJHocGqETmyR6HBii0SHE1skOpzYItHhxBaJ3tkotkj0lmKLRG8ptkj0lmKLRG8pwqghXyR6SxF+XMcXid4hSLZI9JZii0RvqcYoxRaJ3lJcc6qWl+GFcdyVhj9r18vhvz04Pn1wfvrg+vDB8xPtP3mwfPqgffrg6Rs+j+OvB+fx6sH26YP+6YP90wfHpw/OTx9cHz54foRzPj5PnWO+eLB8+qB9+mD99MH26YP+6YP90wfPf3LmuD+4+osH56cPrg8fPD+G9JMHy6cP2qcP1k8fPP3JWeX+Wq3y4rU6P8nykwf7pw+OTx+cnz64Pnzw/DDETx4sbx60F3+O3T59sH764PlPTr1PgNVeTIDzMxA/ebB/+uD49MH56YPrwwfH8emD5z85/fG3x6O1f3vyP/7JFz8xloOpOZiWg/EcTM/BjBzMzMGsFMz5IYbvY3KmwMyZAjNnCsycKTBzpsDMmQIzZwrMnCkwc6bAypkCK2cKrJwpsHKmwMqZAitnCqycKbBypsDKmQIrZwq8+AUqgFOSOJbEqUmclsTxJE5P4owkzkziJM2DkjQPStI8KEnzoCTNg5I0D0rSPChJ86AkzYOSNA9K0jywpHlgSfPAkuaBJc0DS5oHljQPLGkeWNI8sKR5YEnzoCbNg5o0D2rSPKhJ86AmzYOaNA9q0jyoSfOgJs2DmjQPWtI8aEnzoCXNg5Y0D1rSPGhJ86AlzYOWNA9a0jxoSfPAk+aBJ80DT5oHnjQPPGkeeNI88KR54EnzwJPmgSfNg540D3rSPOhJ86AnzYOeNA960jzoSfOgJ82DnjQPetI8GEnzIOkMYkk6hFiSTiGWpGOIJekcYkk6iFiSTiKWpKOIJeksYkk6jFiSTiOWpOOIJek8Ykk6kFiSTiSWpCOJJelMYkk6lFiSTiWWpGOJJelcYkk6mFiSTiaWpKOJJelsYkk6nFiSTieWpOOJJel8oiWdT7Sk84mWdD7Rks4n2tGSOJ7E6UmckcSZSZykeZB0PtGSzida0vlESzqfaEnnEy3pfKIlnU+0pPOJlnQ+0ZLOJ1rS+URLOp9oSecTLel8oiWdT7Sk84mWdD7Rks4nWtL5REs6n2hJ5xMt6XyiJZ1PtKTziZZ0PtGSzida0vlESzqfaEnnEy3pfKIlnU+0pPOJlnQ+0ZLOJ1rS+UT7wnk+P+4333j57erY9vv1h184zvcTzBdOv7k9MNVfYSwHU3MwLQfjOZh/unh+e3R8/OgXjiH85Of7C6cQfoTxHEzPweSMuC+cQPB2v4Xb3V5hVgrmC+cPfoQpORjLwXxhCtT5wNRXmJaD8RxMz8GMHMzMwayUZfqFUwc/wuT8tW3l/LVt5fy17QsnDn6Eyflr2xfOG/wIM3IwMweTMgXqceRgSg7GcjA1B9NyMJ6D6TmYkYOZOZicKVBypkDJmQIlZwqUnClQcqZAyZkCJWcKlJwpUHKmQMmZApYzBSxnCljOFLCcKWA5U8BypoDlTAHDTwG3f5231Hm7l38U7//WNPtfIdPvnz/NWf7+S0uZD3uz3z5CsKfQZBNabELnf9/5o0aFzsjojCqdUaMzcjqjTmdEN7EL3cgudDPb6Ga20c1so5vZRjezjW5mG93MNuDMfkJGBuT6ZF1H+etrVz2+8L1dbEb1oDMqdEZGZ1TpjBqdkdMZdTqjQWdEN7Mr3cxudDO70c3sRjezG93MbnQzu9HN7EY3sxtwZj8hMwOyEiB+ZEBKBsQyIDUD0jIgngHpGZCMN75f/xEux1HvX3wUO8dYDub6H36x9pzF/fwThr5S/mvGkYPJ+REY7QuYvh6Y2c8xnoPpOZiRg5k5mJWCmd94b3p5YsY5puRgLAdTczAtB+M5mJ6DGTmYmYNZKZj1hSlQSrt/cWnnf4FaJQdjOZiag2k5GM/B9BzMyMHMHMwXpkAZ9sDMeYp50fwN4JQkTkv5J045PInTkzgjh/OFc4Y/45QkjiVxahIn4/1p5yeEx+O5Md58JNyOe2q4mf/9l87H1FjH82zz7bPjTz5obudHiSXMl6z5+dDQUC+66qarXnXVm66666p3XXXdXVp0l2nR3aamu01Nd5ua7jY13W1qutvUdLepwbbpEzHwiMvbye+/9W3ezhELjqgHHlHwCMMjLk+5eX+J2qzniIZHOB7R8Yirb7cf98+r/JjniIlHLDiiHXhEwSOu/tC63b/U7QWi4xFX/7h7vZ/d6G6nCD/wCPw3yi+/3Y9Po93HOWLiEQuO6AceUfAIwyMqHtHwCMcjOh7xxbe793PExCOuv92PMTjOEePy2/0Y5i8RBY8wPOLq290fx2/7sc4RDY9wPKLjEQOPuPx2L78jynGOWHDEPPCIgkcYHlHxiIZHOB7R8YjxRcT52z0nHnH97b6fz+t2jliX3+7Hp6gvEQWPMDzi8u5++y/W1fAIxyM6HjHwiIlH4D9meXEq9nuM/uIEXOn1cTK4+5tf2pR23CdhaaWcUl4ct/xnmDYfmPHuF0lfvHWpvzo9paNv2vpVW79p67u2ftfWH9r6U1t/Seub9tY17a1r2lvXtLeuaW9d0966pr11TXvrmvbWNZat+zCqLIv0aZS8G795TVp/dY5OR79q6zdtfdfW79r6Q1t/ausvaf12aOtrb92mvXWb9tZt2lu3aW/dpr11m/bWbdpbt2lvXWfZuk8jlkX6NGLZjU8jlnX3NGLZYE8jlqX0NGLZM08jltXxNGLZBk8jlgH/MOp0M7snv/1vb6vur6Iqf9gp+af77T1n/VUA489+n4YROlVCp57t9Obu7v4qfvGHnSah0+JzmgehUyF0Sp9Pb27L7q9CKn/YqRE6OaFTJ3QahE6T0GnxOa2D0KkQOmXP8XfXqvdXcaQ/7NQInZzQqRM6DUKnSei0+JxedR/8YansSf6uVWFLGaNUZZTqfB9CvSp3+MNShB/XlWMRSmXHCH8mVRmlGqOUM0qxzalRVEtBbuai95jfzEWvMb+Zq5aChLroNeahLnqNeaiLXmMe6k1XXfQa81AXLQUJdd1dqloKEuq621S1FCTUdbepailIqOtuU9VSkFDX3aboUpBADDwCXAoSiAVHoEtBAlHwCMMjwKUggWh4hOMRHY8Al4IEYuIRC45Al4IEouAR4FKQQHQ8Anxb5Q2BLgUJBP4bhS4FCcTEIxYcgS4FCUTBIwyPqHhEwyMcj+h4BLgUJBATjwCXgsTvwMClIIEoeIThEeBSkEA0PMLxiI5HDDwCXAoSiAVHoEtBAlHwCMMjKh7R8AjHIzoeAS4FCcTEI8ClIHGWAlwKEoiCRxgeAS4FCUTDIxyP6HjEwCMmHoH/mAVeCjKPjFKQG0W5FCT0ha8nD33h68lDX/h68tBv2vrC15OHvvD15KEvfD156AtfTx76wqUgN33lUpDQ1966yqUgoa+9dZVLQUJfe+sql4KEvvbWVS4FCX2uUpCbEVkpSBgJX08e+sLXk4e+8PXkod+09YWvJw994evJQ1/4evLQF76ePPSFrye/6SuXgoS+9tZVLgUJfe2tq1wKEvraW1e5FCT0tbeucilI6GtvXbJSkDDiKgUJI65SkDDiKgUJI5YN9jTiKgUJI65SkDDiKgUJI65SkDDiKgW5GZGVgoRR8tv/tjAhnNhKQcKJ7ZbBOOXFVgoSTmylIOHEVgoSTmylIOHEVgoSTmylIOHEVgpyc6IrBQkntlKQcGIrBQkntlKQcGqETmylIOHEVgoSTmylIOHEVgoSTmylIDcnulKQcGIrBQkntlKQcGIrBQmnRujEVgoSTmylIOHEVgoSTmylIOHEVgqys1FspSBbiq0UZEuxlYJsKbZSkC3Fdtn+lmIrBdlShB/X8ZWC7BAkWynIlmIrBdlSjVGKrRRkS9HNqZESiR7akeihHYke2pHooR2JHtqR6KEdiR7akeihHYke2pHooR2JHtqR6KEdiR7akeihHYke2pHooR2JHtqR6KEdiR7akehBF4kedJHooR2JHtqR6KEdiR7akeihHYke2pHooR2JHtqR6KEdiR7akeihHYke2pHooR2JHtqR6KEdiR7akeihHYke2pHooR2JHnSR6EEXiR50kehBF4kedJHoQReJHnSR6EEXiR50kehBF4kedJHoQRiJHoSR6EEYiR6EkehBGIkehJHoQRiJHoSR6EEYiR6EkehBGIkehJHoQRiJHoSR6EEYiR6EkehBGIkehJHoQRiJHoSR6EEYiR6EkehBGIkehJHoQRiJHoSR6EEYiR6EkehBGIkehJHowRiJHoyR6MEYiR6MkejBGIkejJHowRiJHoyR6MEYiR6MkejBGIkejJHoQRiJXv6vq43d7bj7NHujMx+jfB3t+aX2yS/6b+ZT1nzJmpdDV73oqpuuetVVb7rqrqveddV1d2nRXaZFd5ua7jY13W1qutvUdLep6W5T092mBtumT8TAIy5vJ78fPGrezhELjqgHHlHwCMMjLk+5eX+J2qzniIZHOB7R8Yirb7cf468v9WOeIyYeseCIduARBY+4+kPrdv9StxeIjkdc/ePu9X5grrudIvzAI/DfKL/8drfHT5SPc8TEIxYc0Q88ouARhkdUPKLhEY5HdDzii2937+eIiUdcf7sfY3CcI8blt/sxzF8iCh5heMTVt7s/EiD9WOeIhkc4HtHxiIFHXH671/2y7F6Oc8SCI+aBRxQ8wvCIikc0PMLxiI5HjC8izt/uOfGI62/3/WhMt3PEuvx2Pz5FfYkoeIThEZd399t/sa6GRzge0fGIgUdMPAL/McuL4+JfY9jhCaUgQREuBdn6uteTb33d68m3vu715Fu/aevrXk++9XWvJ9/6uteTb33d68m3vm4pSOgLl4Jsfe2tK1wKsvW1t65wKcjW1966wqUgW1976wqXgmx9qlKQMOIqBdlGuteTb33d68m3vu715Fu/aevrXk++9XWvJ9/6uteTb33d68m3vu715KEvXAqy9bW3rnApyNbX3rrCpSBbX3vrCpeCbH3trStcCrL1tbcuVynINqIqBdlGVKUg24iqFGQbsWywpxFVKcg2oioF2UZUpSDbiKoUZBtRlYKEEVcpyDZKfvvfFSZsJ7JSkO1EdsvgPuVF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"},{"name":"cancel_authwit","is_unconstrained":false,"custom_attributes":["aztec(private)","aztec(internal)"],"abi":{"error_types":{},"param_witnesses":{"inputs":[{"end":39,"start":0}],"outer_hash":[{"end":40,"start":39}]},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"outer_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":32,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"},"return_witnesses":[167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623]},"bytecode":"","debug_symbols":"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"},{"name":"compute_note_hash_and_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"param_witnesses":{"contract_address":[{"end":1,"start":0}],"nonce":[{"end":2,"start":1}],"note_type_id":[{"end":4,"start":3}],"serialized_note":[{"end":9,"start":4}],"storage_slot":[{"end":3,"start":2}]},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":5,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"return_witnesses":[9,10,11,12]},"bytecode":"","debug_symbols":""},{"name":"spend_public_authwit","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"param_witnesses":{"inner_hash":[{"end":4,"start":3}],"inputs":[{"end":3,"start":0}]},"parameters":[{"name":"inputs","type":{"fields":[{"name":"selector","type":{"kind":"field"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"inner_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[4]},"bytecode":"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","debug_symbols":"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mhnJaWYkp5mRnGZGcpoZKWhmpKCZkYJmRgqaGam6k/k7npRmRgqaGSloZqSgmZGCZUbSxjIjaWOZkbSxzEjaWGYkbZPmpCwzkjaWGUlp2qe1scxIStOzrTQ920rTs600PdtK07OtND3bStOzrTQ920rTs600PdtK07OtND3bStOzrTQ920rTs600PdtK07OtND3bStOzrTQ920rTs600PdtK07OtND3bStOzrTQ920rTs600PdtK07OtND3bStOzrTQ920rTs600PdtK07OtND3bStOzrTQ920rTs600PdtK07OtND3bStOzrTQ920rTs600PdtK07OtND3bStOzrTQ920rTs600PdtK07OtND3bStOzrTQ920rTs600PdtK07OtND3bStOzrTQ920rTs600PdtK07OtND3bStOzrTQ920rTs600PdtK07OtND3bStOzrTQ920rTs600PdtK07OtND3bStOzrTQ920rTs600PdtK07OtND3bStOzrTQ920rTs600PdtK07OtND3bStOzbTQ920bTs200PdtG07NtbdKclGVGMpqebaPp2Taanm2j6dk2mp5to+nZNpqebaPp2Taanm2j6dk2mp5to+nZNpqebaPp2Taanm2j6dk2mp5to+nZNpqebaPp2Taanm2j6dk2mp5to+nZNpqebaPp2Taanm2j6dk2mp5to+nZNpqebaPp2Taanm2j6dk2mp5to+nZNpqebaPp2Taanm2j6dk2mp5to+nZNpqebaPp2Taanm2j6dk2mp5to+nZNpqebaPp2Taanm2j6dk2mp5to+nZNpqebaPp2Taanm2j6dk2mp5to+nZNpqebaPp2Taanm2j6dk2mp5to+nZNpqebaPp2Taanm2j6dk2mp5to+nZNpqebaPp2Taanm2j6dk2mp5to+nZNpqebaPp2Taanm2j6dk2mp5to+nZNpqebaPp2Taanm2j6dk2mp5to+nZNpqebaPp2Taanm2j6dleND3b6+yebRnPnLTL40ltfqHo6Wq5nnT2RxW99UP92Fq9bK1+bq1et1ZvW6tfW6v3rdXHzurP7nYuVr/1Xdu3vmv71nft2V3Jxeq3vmv71ndt3/qu7VvftX3ru3ZsfdeOre/asfVdO7a+a8/u3C1Wv/VdO7a+a8fWd+3Y+q4dW9+1svVdK1vftbL1XStb37Vnd7cWq9/6rpWt71rZ+q6Vre9a2fqunVvftXPru3ZufdfOre/asztAi9VvfddOoLv2QRHQ/fmgqPxOXPOqKOyZv2GVeFis8zFHM0QP9bGzem1bq+9bqx9bq5et1c+t1esm6tVuqd+F97fV78L7m+pP6GaTNuOq3r5IoT7sIQV7zII9tGAPK9hjFezhBXtE/h4ndC09v0cv2KPA56vA56vA56vA56vA56vA56vA56vA517gcy/wuRf43At87gU+9wKfe4HPvcDnXuBzL/B5FPg8CnweBT6PAp9Hgc+jwOdR4PMo8HkU+Dzyfe6tFezRC/YYBXtIwR6zYA8t2MMK9lgFe3jBHgU+7wU+7wU+7wU+7wU+7wU+7wU+7wU+7wU+7wU+7wU+HwU+HwU+HwU+HwU+HwU+HwU+HwU+HwU+HwU+HwU+lwKfS4HPpcDnUuBzKfC5FPhcCnwuBT6XAp9Lgc9ngc9ngc9ngc9ngc9ngc9ngc9ngc9ngc9ngc9ngc+1wOda4HMt8LkW+FwLfK4FPtcCn2uBz7XA51rgcyvwuRX4vCAP5wV5OC/Iw3lBHs4L8nBekIfzgjycF+ThvCAP5wV5OC/Iw3lBHs4L8nBekIfzgjycF+ThvCAP5wV5OC/Iw3lBHs4L8nBekIfzgjycF+ThvCAP5wV5OC/Iw3lBHs4L8nBekIfzgjycF+ThvCAP5wV5OC/Iw3lBHs4L8nBekIeLgjxcFOThoiAPFwV5uGizYA8t2MMK9lgFe3jBHgU+L8jDRUEeLgrycFGQh4uCPFwU5OGiIA8XBXm4KMjDRUEeLgrycFGQh4uCPFwU5OGiIA8XBXm4KMjDRUEeLgrycFGQh4uCPFwU5OGiIA8XBXm4KMjDRUEeLgrycFGQh4uCPFwU5OGiIA8XBXm4KMjDRUEeLs7Iw/V+LJZu/fM9ni7W3o4fz6h9PDb1LD0EKZogQxO00AQ5mqAAE3RGOvBcQR1N0EATJGiC0EitaKRWNFIrGqkVjdSKRmpDI7WhkdrQSG1opDY0UhsaqQ2N1IZGakMjtaGReqGReqGReqGReqGReqGReqGReqGReqGReqGR+naE1vo4uretz3njsZvnWMPXw2NLpD197HYg0cY6vu9oI27sdjs3ZybH2cw+fan+77Hebue7zOL4Atpqceu52063df3u6Gc/oeP4KSaXx+zrHltf95h/3WPxVY/9SYTm2cdufkmW+PEXvuboX/wNXH7x71e/vnn1w9vX7y+PfPqz3+5//PDm3f3DLz/855c//uSy9r8="},{"name":"approve_public_authwit","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"error_types":{},"param_witnesses":{"inputs":[{"end":3,"start":0}],"outer_hash":[{"end":4,"start":3}]},"parameters":[{"name":"inputs","type":{"fields":[{"name":"selector","type":{"kind":"field"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"outer_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"return_witnesses":[]},"bytecode":"H4sIAAAAAAAC/9WbS28jRRDHZzweJxsvJu/3Zv0aO44TJ7Y3yebhvJzskgsXJK5ogQVWWnYRLCC4ckfiO3FAiAPfgTsS34Cu6ke5ZuxMqyUsdqSJZ2r+v6ru6p4ed3tS9bIebpP4+cBTmzib9ApeTnxkYD/19JE4gN0veL42RXARKHkk7F4QKcDL4lEg/oRl8Se/b4JF2pdX1aUAnxBUn+aMLmupCyx1oaXOt9DppPmigsGveAroBB5NgCzS7AR3JXKVVZpJJHx15lvqQktdYKnLWuoyoxpvkpIzaZKYs9RlLXWBpS601PkWuhGNfA+P7oHMNPI97mpKJhE0U0j46sy31IWWusBSl7XU5Sx1IzvDFCVx6q7OMFSXtdRNWuoCS11oqfMtdKbTRHq0mIp0l8pHWofDppeHMkLn+s10rikjyZvONcVD3peNApr7SKhyxDvXSF1oqQssdZOWuqylLmepy1Q9H2/cEHV5leUB/F2xF0yT3Ke2KiRb8h06RYVw/r50kVWRAZrGjgB+pzk+LXUFeYj4azJrfAZxEMxwfIbwGYW/IbPGZxEHwSzHZwmfVXiRzBqfQxwEcxyfI3xO4S/IrPF5xEEwz/F5wucV/orMGl9AHAQLHF8gfEF+JrE5N2zmP4sm6viMzBpfRBwEixxfJHxR4S/JrPElxEGwxPElwpeShV4yhU7BRNQfyazxZcRBsMzxZcKXFf6czBpfQRwEKxxfIXxF4Z+SWeOriINgleOrhK/CZwku/MNv8Gl04NFdrS+smsG4wD3DtoYh15Ih16WDVXk4eBXu+HXuZSOHpxtK/FCNRkUfXcHt9xB2LPbf8kzXG5hipGUPKKq8kJFGr8hLV/RMQMA24M9fsSLGKnDgs3FryAM7TznL3/UgHqoLLHWhpc630HmD38r+MA/OnHne0oMz9iBZkw+SnGr7XKS+2scfnCN1oaUusNRlLXUjv22tUXLW7mq8obq8pS6w1IWWOt9CxxqZvnrLW30Vb2EzTHBXBd/cAXJ0UUNJvJFH6kJLXWCpy1vqspa6TCh7ucpVgbAeDAomdeuU041kxh/ExjIxeD2hMWqdDUUP04cigX9LZo2XEAdBieMlwksKf0VmjZcRB0GZ42XCywr/hMwaryAOggrHK4RXFP6GzBqvIg6CKserhFcV/oLMGo8QB0HE8YjwSOGvyazxGuIgqHG8RnhNfiaxUjqmviDWOF5HHAR1jtcJryv8GZk1vok4CDY5vkn4psK/IrPGG4iDoMHxBuGNZJ2tMRH1azJrfAtxEGxxfIvwrWTULdNAKZiI+h2ZNd5EHARNjjcJbyr8OZk1vo04CLY5vk34tsI/IrPGdxAHwQ7HdwjfSdZ5x2TaASumY6KwH5NZ4y3EQdDieIvwlsJfklnju4iDYJfju4TvJgu9a+5fB6zshm27YXU3rOiGVdIx0RBfkFnje4iDYI/je4TvKfx7Mmu8jTgI2hxvE95OFrpt2tEBq7hhNTes7IbV3bDSWOsWjbWQrXRMdLIfyKzxDuIg6HC8Q3gnGbVjUuOA7bhhzbEWsuyG1d2w1lgxi0yqpYsOx7uIg6DL8S7h3WTUrmkIB6zqhpXcsIob1nTDGmOtW90Na40Va6djUP0M9M6BqeAZOlAn2rOnCDm93uCeYXuEIR8lQ+5LB115OHgV5pz73MuhXBc7VOLHal3sSK6LHYEJdiz2M3mm6w3MUaRlBxRVXshIo3fES3fkmYCAHRaF4w9jRYxVANfFIANnpAPv9GNB/s4fC9YSPxaEHt8wk/hzOib0kXSXV+66ozLdpUXPrmdWNDkWpmNVuWrDOwWwGyeDurwc2+Jlh21flh2ytS9XHHTyxAIJLuEcyp9dQpX6AwoErw4cm0w+pkweJzN5xDN5LJx/ID5PJPRYQadY8RM44vip1B3rqMOwihsWuWENN6yejonUfE5mjfcQB0GP4z3Ce8moPTNQO2C1dEwU9hsya/wM8R6/8Xw5YGn8LBn1zAyhDljkhlXcsFo6JlKzR2aNnyMOgnOOnxN+nox6bqI6YCU3LHLDKmOtW90Na40Vc8zknhvWdMM66Zjo0i0ya/wCcRBccPyC8Itk1AvT7A7YiRtWccMiN6zhhtXdsFM3rDnWduu5Ya2xtltlrHWzyKS4774ks8YvEQfBJccvCb9MRr00y4IOWM8Nq7hhtbehkHU3rPF/y6ToZJ+RWeNXiIPgiuNXhF8lo16ZOjpgkRt24YbV0jGRmjaZNd5HHAR9jvcJ7yej9s3jMgWDr23BLx6bc/XQgTrRnj1FyBn/MfcM2zWGvE6GvJEO+vJw8Co8TW64l6dyxv9Uid9TM/5bOeO/BRPsWOyf5ZmuNzC3kZY9oajyQkYavVteulvPBATsaVE4/ilWxFgFcMaPsxPu6trkLKScQUJi89SDWOKSs2ZsKTlr7lOjhcrdMdalLzvNoGPVVNeqeNej3vW4jhVv1LseQ3VdS11gqfMtdCYveNQ1uQ49vToAazk3kSYyppPivxJgs2Xh/Y8/zbseN7HUyXckbhR2E6meG3/XY6QusNR1LXVZS12mAi9rqRpnTI0DvNQ0Rk/9LwV6GZTMjKZ5CSaG9e6JZOPlNn3lwUcvgC3/Dvu/z1gqxi8yAAA=","debug_symbols":"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KdOznTI92ynTs50yPdsp07OdMj3bKdOznTI92ynTs50yPdsp07OdMj3bKdOznTI92ynTs50yPdsp07OdMj3bKdOznTI92ynTs50yPdsp07OdMj3bKdOznTI92ynTs50yPdsp07OdMj3bKdOznTI92ynTs50yPdsp07OdMj3bKdOznTI92ynTs50yPdsp07OdMj3bKdOznTI92ynTs50yPdsp07OdMj3bKdOznTI92ynTs50yPdsp07OdMj3bKdOznTI92ynTs50yPdsp07OdMj3bKdOznTI92ynTs50yPdsp07OdMj3bKdOznTI92ynTs50yPdsp07OdMj3bKdOznTI92ynTs50yPdsp07OdMj3bKdOznTI92ynTs50yPdsp07OdMj3bKdOznTI92ynTs50yPdsp07OdMj3bKdOznTI921umZ3vL9GxvmZ7tLdOzvQ+TeVOVjLRlera3TM/2lunZ3jI921umZ3vL9GxvmZ7t/bV7trc986a2Ht/UYl27kbW7EdrdyNvdKNrdKLvd6Gu3DX+FG412N5rtbtTOIWc7h5ztHHK2c8jZziFnP4fc3W602nn2aufZq51nr3aevdp59mrn2audZ692nr3aefZq59nWzrOtnWdbO8+2dp5t7Tzb2nm2tfNsa+fZ1s6zrZ1no51no51no51no51no51no51no51no51no51no51nezvP9nae7e08+3p3kY+Z53M+7OmLBC7HrgoiZsb5WKx1fH7serODz9iXrzb3la92/QfNffrl1KffzDzG5VR80an8olP7S05d/8Hcvzh1+tP/b3++u/3u7Zv3pxMf//GX++8f7t7dn//48OtPf/7L6dnfAQ=="}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"6999100115978011798108105997510112178111116101"},{"kind":"string","value":"EcdsaPublicKeyNote"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"public_key","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"1"}},{"name":"typ","value":{"kind":"string","value":"PrivateImmutable<EcdsaPublicKeyNote, Context>"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"outer_hash","type":{"kind":"field"}}],"kind":"struct","path":"EcdsaP256Account::cancel_authwit_parameters"}}],"kind":"struct","path":"EcdsaP256Account::cancel_authwit_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"signing_pub_key_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"signing_pub_key_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}}],"kind":"struct","path":"EcdsaP256Account::constructor_parameters"}}],"kind":"struct","path":"EcdsaP256Account::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"outer_hash","type":{"kind":"field"}}],"kind":"struct","path":"EcdsaP256Account::approve_public_authwit_parameters"}}],"kind":"struct","path":"EcdsaP256Account::approve_public_authwit_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"inner_hash","type":{"kind":"field"}}],"kind":"struct","path":"EcdsaP256Account::spend_public_authwit_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"EcdsaP256Account::spend_public_authwit_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"app_payload","type":{"fields":[{"name":"function_calls","type":{"kind":"array","length":4,"type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall"}}},{"name":"nonce","type":{"kind":"field"}}],"kind":"struct","path":"authwit::entrypoint::app::AppPayload"}},{"name":"fee_payload","type":{"fields":[{"name":"function_calls","type":{"kind":"array","length":2,"type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall"}}},{"name":"nonce","type":{"kind":"field"}},{"name":"is_fee_payer","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::fee::FeePayload"}}],"kind":"struct","path":"EcdsaP256Account::entrypoint_parameters"}}],"kind":"struct","path":"EcdsaP256Account::entrypoint_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"inner_hash","type":{"kind":"field"}}],"kind":"struct","path":"EcdsaP256Account::spend_private_authwit_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"EcdsaP256Account::spend_private_authwit_abi"}]}},"file_map":{"101":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr","source":"use dep::protocol_types::traits::{Deserialize, Serialize};\n\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_oracle_wrapper(storage_slot)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n"},"102":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr","source":"use dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint};\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nfn emit_encrypted_note_log_oracle<M>(\n    _note_hash_counter: u32,\n    _encrypted_note: [u8; M],\n    _counter: u32\n) {}\n\nunconstrained pub fn emit_encrypted_note_log<M>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<M>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _encrypted_note: [u8; M],\n    _counter: u32\n) {}\n\nunconstrained pub fn emit_encrypted_log<M>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_note: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_log_oracle(contract_address, randomness, encrypted_note, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(computeEncryptedLog)]\nfn compute_encrypted_log_oracle<N, M>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _ovsk_app: Field,\n    _ovpk_m: GrumpkinPoint,\n    _ivpk_m: GrumpkinPoint,\n    _preimage: [Field; N]\n) -> [u8; M] {}\n\nunconstrained pub fn compute_encrypted_log<N, M>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    ovsk_app: Field,\n    ovpk_m: GrumpkinPoint,\n    ivpk_m: GrumpkinPoint,\n    preimage: [Field; N]\n) -> [u8; M] {\n    compute_encrypted_log_oracle(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        ovsk_app,\n        ovpk_m,\n        ivpk_m,\n        preimage\n    )\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle_private<T>(\n    _contract_address: AztecAddress,\n    _event_selector: Field,\n    _message: T,\n    _counter: u32\n) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log_private_internal<T>(\n    contract_address: AztecAddress,\n    event_selector: Field,\n    message: T,\n    counter: u32\n) -> Field {\n    emit_unencrypted_log_oracle_private(contract_address, event_selector, message, counter)\n}\n\n#[oracle(emitContractClassUnencryptedLog)]\nfn emit_contract_class_unencrypted_log_private<N>(\n    contract_address: AztecAddress,\n    event_selector: Field,\n    message: [Field; N],\n    counter: u32\n) -> Field {}\n\nunconstrained pub fn emit_contract_class_unencrypted_log_private_internal<N>(\n    contract_address: AztecAddress,\n    event_selector: Field,\n    message: [Field; N],\n    counter: u32\n) -> Field {\n    emit_contract_class_unencrypted_log_private(contract_address, event_selector, message, counter)\n}\n"},"105":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{\n    constants::PUBLIC_DATA_TREE_HEIGHT, hash::pedersen_hash,\n    public_data_tree_leaf_preimage::PublicDataTreeLeafPreimage, traits::{Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nglobal LEAF_PREIMAGE_LENGTH: u64 = 4;\nglobal PUBLIC_DATA_WITNESS: Field = 45;\n\nstruct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nfn get_public_data_witness_oracle(\n    _block_number: u32,\n    _leaf_slot: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(block_number: u32, leaf_slot: Field) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, leaf_slot);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u64, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"106":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, utils::arr_copy_slice,\n    constants::CONTRACT_INSTANCE_LENGTH, utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nfn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nfn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = ContractInstance::deserialize(get_contract_instance_internal(address));\n    assert(instance.to_address().eq(address));\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"107":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr","source":"use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, hash::pedersen_hash, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: Field = 24;\n\nstruct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nfn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nfn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n"},"115":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::pedersen_hash, address::AztecAddress,\n    header::Header, utils::field::full_field_less_than\n};\nuse dep::std::merkle::compute_merkle_root;\n\nuse crate::{context::PrivateContext, oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header { \n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf slot by siloing the storage slot with the contract address\n        let public_value_leaf_slot = pedersen_hash(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness of the slot\n        let witness = get_public_data_witness(\n            self.global_variables.block_number as u32,\n            public_value_leaf_slot\n        );\n\n        // 3) Extract the value from the witness leaf and check that the storage slot is correct\n        let preimage = witness.leaf_preimage;\n\n        // Here we have two cases. Code based on same checks in `validate_public_data_reads` in `base_rollup_inputs`\n        // 1. The value is the same as the one in the witness\n        // 2. The value was never initialized and is zero\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_value_leaf_slot);\n        let is_next_greater_than = full_field_less_than(public_value_leaf_slot, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_value_leaf_slot, \"Public data slot doesn't match witness\");\n            preimage.value\n        };\n\n        // 4) Prove that the leaf exists in the public data tree. Note that `hash` returns not just the hash of the value\n        // but also the metadata (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == compute_merkle_root(preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        value\n    }\n}\n"},"118":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/aztec/src/history/nullifier_inclusion.nr","source":"use dep::std::merkle::compute_merkle_root;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    context::PrivateContext, oracle::get_nullifier_membership_witness::get_nullifier_membership_witness,\n    note::{utils::compute_siloed_nullifier, note_interface::NoteInterface}\n};\n\ntrait ProveNullifierInclusion {\n    fn prove_nullifier_inclusion(header: Header, nullifier: Field);\n}\n\nimpl ProveNullifierInclusion for Header {\n    fn prove_nullifier_inclusion(self, nullifier: Field) {\n        // 1) Get the membership witness of the nullifier\n        let witness = get_nullifier_membership_witness(self.global_variables.block_number as u32, nullifier);\n\n        // 2) Check that the witness we obtained matches the nullifier\n        assert(witness.leaf_preimage.nullifier == nullifier, \"Nullifier does not match value in witness\");\n\n        // 3) Compute the nullifier tree leaf\n        let nullifier_leaf = witness.leaf_preimage.hash();\n\n        // 4) Prove that the nullifier is in the nullifier tree\n        assert(\n            self.state.partial.nullifier_tree.root\n            == compute_merkle_root(nullifier_leaf, witness.index, witness.path), \"Proving nullifier inclusion failed\"\n        );\n        // --> Now we have traversed the trees all the way up to archive root and verified that the nullifier\n        //     was included in the nullifier tree.\n    }\n}\n\ntrait ProveNoteIsNullified {\n    fn prove_note_is_nullified<Note, N, M>(header: Header, note: Note, context: &mut PrivateContext) where Note: NoteInterface<N, M>;\n}\n\nimpl ProveNoteIsNullified for Header {\n    fn prove_note_is_nullified<Note, N, M>(self, note: Note, context: &mut PrivateContext) where Note: NoteInterface<N, M> {\n        let nullifier = compute_siloed_nullifier(note, context);\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n}\n"},"119":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::{silo_nullifier, pedersen_hash},\n    constants::GENERATOR_INDEX__CONSTRUCTOR, abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_new_nullifier(init_nullifier, 0);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_new_nullifier(init_nullifier, 0);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_contract_initialization_nullifier(context.this_address());\n    let header = context.get_header();\n    header.prove_nullifier_inclusion(init_nullifier);\n}\n\nfn compute_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    silo_nullifier(\n        address,\n        compute_unsiloed_contract_initialization_nullifier(address)\n    )\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    pedersen_hash(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"120":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n    GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, ARGS_HASH_CHUNK_COUNT,\n    GENERATOR_INDEX__FUNCTION_ARGS, ARGS_HASH_CHUNK_LENGTH\n},\n    traits::Hash, hash::{pedersen_hash, silo_nullifier, sha256_to_field}\n};\nuse crate::oracle::logs_traits::{LensForEncryptedLog, ToBytesForUnencryptedLog};\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    pedersen_hash([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<T, N, M>(\n    contract_address: AztecAddress,\n    event_selector: Field,\n    log: T\n) -> Field where T: ToBytesForUnencryptedLog<N, M> {\n    let message_bytes: [u8; N] = log.to_be_bytes_arr();\n    // can't use N - not in scope error\n    let n = message_bytes.len();\n    let mut hash_bytes = [0; M];\n    // Address is converted to 32 bytes in ts\n    let address_bytes = contract_address.to_be_bytes_arr();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let event_bytes = event_selector.to_be_bytes(4);\n    for i in 0..4 {\n        hash_bytes[32 + i] = event_bytes[i];\n    }\n    let len_bytes = (n as Field).to_be_bytes(4);\n    for i in 0..4 {\n        hash_bytes[36 + i] = len_bytes[i];\n    }\n    for i in 0..n {\n        hash_bytes[40 + i] = message_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes = sender.to_field().to_be_bytes(32);\n    let chain_id_bytes = chain_id.to_be_bytes(32);\n    let recipient_bytes = recipient.to_field().to_be_bytes(32);\n    let version_bytes = version.to_be_bytes(32);\n    let content_bytes = content.to_be_bytes(32);\n    let secret_hash_bytes = secret_hash.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    pedersen_hash(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub fn compute_siloed_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    silo_nullifier(address, nullifier)\n}\n\nstruct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<N>(args: [Field; N]) -> Field {\n    hash_args(args.as_slice())\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        assert(args.len() < ARGS_HASH_CHUNK_COUNT * ARGS_HASH_CHUNK_LENGTH);\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        let mut current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n\n        let mut current_chunk_index = 0;\n        let mut index_inside_current_chunk = 0;\n        for i in 0..args.len() {\n            current_chunk_values[index_inside_current_chunk] = args[i];\n            index_inside_current_chunk+=1;\n            if index_inside_current_chunk == ARGS_HASH_CHUNK_LENGTH {\n                chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n                current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n                current_chunk_index+=1;\n                index_inside_current_chunk = 0;\n            }\n        }\n        if index_inside_current_chunk > 0 {\n            chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..800 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    assert(hash == 0x05a1023fef839ac88731f49ae983e172c1b600a3c8f3393ad0ac25d819ac0f0f);\n}\n\n#[test]\nfn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let event_selector = 5;\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let hash = compute_unencrypted_log_hash(contract_address, event_selector, log);\n    assert(hash == 0x00846d6969c8c2f61d39cd2762efcb0abb14f88d59c2675910251ef2bcffe9a7);\n}\n\n#[test]\nfn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let event_selector = 5;\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let hash = compute_unencrypted_log_hash(contract_address, event_selector, log);\n    assert(hash == 0x00880a801230ea08c98a802a11b4786cba474513875f0fc69a615e81c5f9f21c);\n}\n\n#[test]\nfn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let event_selector = 5;\n    let log = \"dummy\";\n    let hash = compute_unencrypted_log_hash(contract_address, event_selector, log);\n    assert(hash == 0x00a78b5347813624ecfd26e5b8bc6146f418b0cfcc8296b5112d09b8ebba9496);\n}\n\n#[test]\nfn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let event_selector = 5;\n    let log = \"Hello this is a string\";\n    let hash = compute_unencrypted_log_hash(contract_address, event_selector, log);\n    assert(hash == 0x001f3390ea242afee7ce46dafdbdc4bd4f1cf20cd63850d12d60ff9956712c4f);\n}\n"},"121":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/aztec/src/keys/getters.nr","source":"use dep::protocol_types::{\n    header::Header, abis::validation_requests::KeyValidationRequest, address::AztecAddress,\n    constants::CANONICAL_KEY_REGISTRY_ADDRESS, grumpkin_point::GrumpkinPoint,\n    storage::map::derive_storage_slot_in_map\n};\nuse crate::{\n    context::PrivateContext,\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, INCOMING_INDEX, OUTGOING_INDEX, TAGGING_INDEX}},\n    state_vars::{shared_mutable::shared_mutable_private_getter::SharedMutablePrivateGetter}\n};\n\nglobal DELAY = 5;\n\n// docs:start:key-getters\ntrait KeyGetters {\n  fn get_npk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> GrumpkinPoint;\n  fn get_ivpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> GrumpkinPoint;\n  fn get_ovpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> GrumpkinPoint;\n  fn get_tpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> GrumpkinPoint;\n  fn get_npk_m_hash(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Field;\n}\n\nimpl KeyGetters for Header {\n    fn get_npk_m(self, context: &mut PrivateContext, address: AztecAddress) -> GrumpkinPoint {\n        get_master_key(context, address, NULLIFIER_INDEX, self)\n    }\n\n    fn get_ivpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> GrumpkinPoint {\n        get_master_key(context, address, INCOMING_INDEX, self)\n    }\n\n    fn get_ovpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> GrumpkinPoint {\n        get_master_key(context, address, OUTGOING_INDEX, self)\n    }\n\n    fn get_tpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> GrumpkinPoint {\n        get_master_key(context, address, TAGGING_INDEX, self)\n    }\n\n    fn get_npk_m_hash(self, context: &mut PrivateContext, address: AztecAddress) -> Field {\n        get_master_key(context, address, NULLIFIER_INDEX, self).hash()\n    }\n}\n// docs:end:key-getters\n\nfn get_master_key(\n    context: &mut PrivateContext,\n    address: AztecAddress,\n    key_index: Field,\n    header: Header\n) -> GrumpkinPoint {\n    let key = fetch_key_from_registry(context, key_index, address, header);\n    if key.is_zero() {\n        // Keys were not registered in registry yet --> fetch key from PXE\n        let keys = fetch_and_constrain_keys(address);\n        // Return the corresponding to index\n        keys.get_key_by_index(key_index)\n    } else {\n        // Keys were registered --> return the key\n        key\n    }\n}\n\nfn fetch_key_from_registry(\n    context: &mut PrivateContext,\n    key_index: Field,\n    address: AztecAddress,\n    header: Header\n) -> GrumpkinPoint {\n    let x_coordinate_map_slot = key_index * 2 + 1;\n    let y_coordinate_map_slot = x_coordinate_map_slot + 1;\n    let x_coordinate_derived_slot = derive_storage_slot_in_map(x_coordinate_map_slot, address);\n    let y_coordinate_derived_slot = derive_storage_slot_in_map(y_coordinate_map_slot, address);\n\n    let x_coordinate_registry: SharedMutablePrivateGetter<Field, DELAY> = SharedMutablePrivateGetter::new(\n        context,\n        AztecAddress::from_field(CANONICAL_KEY_REGISTRY_ADDRESS),\n        x_coordinate_derived_slot\n    );\n    let y_coordinate_registry: SharedMutablePrivateGetter<Field, DELAY> = SharedMutablePrivateGetter::new(\n        context,\n        AztecAddress::from_field(CANONICAL_KEY_REGISTRY_ADDRESS),\n        y_coordinate_derived_slot\n    );\n    let x_coordinate = x_coordinate_registry.get_value_in_private(header);\n    let y_coordinate = y_coordinate_registry.get_value_in_private(header);\n\n    GrumpkinPoint::new(x_coordinate, y_coordinate)\n}\n\n// Passes only when keys were not rotated - is expected to be called only when keys were not registered yet\nfn fetch_and_constrain_keys(address: AztecAddress) -> PublicKeys {\n    let (public_keys, partial_address) = get_public_keys_and_partial_address(address);\n\n    let computed_address = AztecAddress::compute(public_keys.hash(), partial_address);\n\n    assert(computed_address.eq(address));\n\n    public_keys\n}\n\n// A helper function since requesting nsk_app is very common\n// TODO(#6543)\npub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n"},"124":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr","source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH, hash::poseidon2_hash,\n    grumpkin_point::GrumpkinPoint, traits::{Deserialize, Serialize}\n};\nuse crate::keys::constants::{NUM_KEY_TYPES, NULLIFIER_INDEX, INCOMING_INDEX, OUTGOING_INDEX};\n\nglobal PUBLIC_KEYS_LENGTH = 8;\n\nstruct PublicKeys {\n    npk_m: GrumpkinPoint,\n    ivpk_m: GrumpkinPoint,\n    ovpk_m: GrumpkinPoint,\n    tpk_m: GrumpkinPoint,\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            poseidon2_hash(\n                [\n            self.npk_m.x,\n            self.npk_m.y,\n            self.ivpk_m.x,\n            self.ivpk_m.y,\n            self.ovpk_m.x,\n            self.ovpk_m.y,\n            self.tpk_m.x,\n            self.tpk_m.y,\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH\n        ]\n            )\n        )\n    }\n\n    pub fn get_key_by_index(self, index: Field) -> GrumpkinPoint {\n        assert(index as u8 < NUM_KEY_TYPES, \"Invalid key index\");\n        if index == NULLIFIER_INDEX {\n            self.npk_m\n        } else if index == INCOMING_INDEX {\n            self.ivpk_m\n        } else if index == OUTGOING_INDEX {\n            self.ovpk_m\n        } else {\n            self.tpk_m\n        }\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.x,\n            self.npk_m.y,\n            self.ivpk_m.x,\n            self.ivpk_m.y,\n            self.ovpk_m.x,\n            self.ovpk_m.y,\n            self.tpk_m.x,\n            self.tpk_m.y,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: GrumpkinPoint { x: serialized[0], y: serialized[1] },\n            ivpk_m: GrumpkinPoint { x: serialized[2], y: serialized[3] },\n            ovpk_m: GrumpkinPoint { x: serialized[4], y: serialized[5] },\n            tpk_m: GrumpkinPoint { x: serialized[6], y: serialized[7] },\n        }\n    }\n}\n\n#[test]\nfn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: GrumpkinPoint { x: 1, y: 2 },\n        ivpk_m: GrumpkinPoint { x: 3, y: 4 },\n        ovpk_m: GrumpkinPoint { x: 5, y: 6 },\n        tpk_m: GrumpkinPoint { x: 7, y: 8 }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x1936abe4f6a920d16a9f6917f10a679507687e2cd935dd1f1cdcb1e908c027f3;\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nfn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: GrumpkinPoint { x: 1, y: 2 },\n        ivpk_m: GrumpkinPoint { x: 3, y: 4 },\n        ovpk_m: GrumpkinPoint { x: 5, y: 6 },\n        tpk_m: GrumpkinPoint { x: 7, y: 8 }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.x, deserialized.npk_m.x);\n    assert_eq(keys.npk_m.y, deserialized.npk_m.y);\n    assert_eq(keys.ivpk_m.x, deserialized.ivpk_m.x);\n    assert_eq(keys.ivpk_m.y, deserialized.ivpk_m.y);\n    assert_eq(keys.ovpk_m.x, deserialized.ovpk_m.x);\n    assert_eq(keys.ovpk_m.y, deserialized.ovpk_m.y);\n    assert_eq(keys.tpk_m.x, deserialized.tpk_m.x);\n    assert_eq(keys.tpk_m.y, deserialized.tpk_m.y);\n}\n"},"131":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{hash::pedersen_hash, storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"132":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/scheduled_value_change.nr","source":"use dep::protocol_types::traits::{Serialize, Deserialize, FromField, ToField};\nuse dep::std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to represent a value that changes from `pre` to `post` at some block\n// called the `block_of_change`. The value can only be made to change by scheduling a change event at some future block\n// of change after some minimum delay measured in blocks has elapsed. This means that at any given block number we know\n// both the current value and the smallest block number at which the value might change - this is called the\n// 'block horizon'.\nstruct ScheduledValueChange<T> {\n    pre: T,\n    post: T,\n    // Block at which `post` value is used instead of `pre`\n    block_of_change: u32,\n}\n\nimpl<T> ScheduledValueChange<T> {\n    pub fn new(pre: T, post: T, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change }\n    }\n\n    /// Returns the value stored in the data structure at a given block. This function can be called both in public\n    /// (where `block_number` is simply the current block number, i.e. the number of the block in which the current\n    /// transaction will be included) and in private (where `block_number` is the historical block number that is used\n    /// to construct the proof).\n    /// Reading in private is only safe if the transaction's `max_block_number` property is set to a value lower or\n    /// equal to the block horizon (see `get_block_horizon()`).\n    pub fn get_current_at(self, block_number: u32) -> T {\n        // The post value becomes the current one at the block of change. This means different things in each realm:\n        // - in public, any transaction that is included in the block of change will use the post value\n        // - in private, any transaction that includes the block of change as part of the historical state will use the\n        //   post value (barring any follow-up changes)\n\n        if block_number < self.block_of_change {\n            self.pre\n        } else {\n            self.post\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change value and the block at which it will become the current\n    /// value. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub fn get_scheduled(self) -> (T, u32) {\n        (self.post, self.block_of_change)\n    }\n\n    /// Returns the largest block number at which the value returned by `get_current_at` is known to remain the current\n    /// value. This value is only meaningful in private when constructing a proof at some `historical_block_number`,\n    /// since due to its asynchronous nature private execution cannot know about any later scheduled changes.\n    /// The caller of this function must know how quickly the value can change due to a scheduled change in the form of\n    /// `minimum_delay`. If the delay itself is immutable, then this is just its duration. If the delay is mutable\n    /// however, then this value is the 'effective minimum delay' (obtained by calling\n    /// `ScheduledDelayChange.get_effective_minimum_delay_at`), which equals the minimum number of blocks that need to\n    /// elapse from the next block until the value changes, regardless of further delay changes.\n    /// The value returned by `get_current_at` in private when called with a historical block number is only safe to use\n    /// if the transaction's `max_block_number` property is set to a value lower or equal to the block horizon computed\n    /// using the same historical block number.\n    pub fn get_block_horizon(self, historical_block_number: u32, minimum_delay: u32) -> u32 {\n        // The block horizon is the very last block in which the current value is known. Any block past the horizon\n        // (i.e. with a block number larger than the block horizon) may have a different current value. Reading the\n        // current value in private typically requires constraining the maximum valid block number to be equal to the\n        // block horizon.\n\n        if historical_block_number >= self.block_of_change {\n            // Once the block of change has been mined, the current value (post) will not change unless a new value\n            // change is scheduled. This did not happen at the historical block number (or else it would not be\n            // greater or equal to the block of change), and therefore could only happen after the historical block\n            // number. The earliest would be the immediate next block, and so the smallest possible next block of change\n            // equals `historical_block_number + 1 + minimum_delay`. Our block horizon is simply the previous block to\n            // that one.\n            //\n            //      block of      historical\n            //       change         block            block horizon\n            //   =======|=============N===================H===========>\n            //                         ^                   ^\n            //                         ---------------------\n            //                             minimum delay\n\n            historical_block_number + minimum_delay\n        } else {\n            // If the block of change has not yet been mined however, then there are two possible scenarios.\n            //   a) It could be so far into the future that the block horizon is actually determined by the minimum\n            //      delay, because a new change could be scheduled and take place _before_ the currently scheduled one.\n            //      This is similar to the scenario where the block of change is in the past: the time horizon is the\n            //      block prior to the earliest one in which a new block of change might land.\n            //\n            //         historical\n            //           block                        block horizon      block of change\n            //        =====N=================================H=================|=========>\n            //              ^                                 ^\n            //              |                                 |\n            //              -----------------------------------\n            //                        minimum delay\n            //\n            //   b) It could be fewer than `minimum_delay` blocks away from the historical block number, in which case\n            //      the block of change would become the limiting factor for the time horizon, which would equal the\n            //      block right before the block of change (since by definition the value changes at the block of\n            //      change).\n            //\n            //           historical                         block horizon\n            //             block     block of change       if not scheduled\n            //        =======N=============|===================H=================>\n            //                ^           ^                     ^\n            //                |     actual horizon              |\n            //                -----------------------------------\n            //                          minimum delay\n            //\n            // Note that the current implementation does not allow the caller to set the block of change to an arbitrary\n            // value, and therefore scenario a) is not currently possible. However implementing #5501 would allow for\n            // this to happen.\n\n            // Because historical_block_number < self.block_of_change, then block_of_change > 0 and we can safely\n            // subtract 1.\n            min(\n                self.block_of_change - 1,\n                historical_block_number + minimum_delay\n            )\n        }\n    }\n\n    /// Mutates the value by scheduling a change at the current block number. This function is only meaningful when\n    /// called in public with the current block number.\n    pub fn schedule_change(\n        &mut self,\n        new_value: T,\n        current_block_number: u32,\n        minimum_delay: u32,\n        block_of_change: u32\n    ) {\n        assert(block_of_change >= current_block_number + minimum_delay);\n\n        self.pre = self.get_current_at(current_block_number);\n        self.post = new_value;\n        self.block_of_change = block_of_change;\n    }\n}\n\nimpl<T> Serialize<3> for ScheduledValueChange<T> {\n    fn serialize(self) -> [Field; 3] where T: ToField {\n        [self.pre.to_field(), self.post.to_field(), self.block_of_change.to_field()]\n    }\n}\n\nimpl<T> Deserialize<3> for ScheduledValueChange<T> {\n  fn deserialize(input: [Field; 3]) -> Self  where T: FromField {\n    Self {\n        pre: FromField::from_field(input[0]),\n        post: FromField::from_field(input[1]),\n        block_of_change: FromField::from_field(input[2]),\n    }\n  }\n}\n"},"133":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/scheduled_delay_change.nr","source":"use dep::protocol_types::traits::{Serialize, Deserialize, FromField, ToField};\nuse dep::std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to store the minimum delay with which a ScheduledValueChange object can\n// schedule a change.\n// This delay is initally equal to INITIAL_DELAY, and can be safely mutated to any other value over time. This mutation \n// is performed via `schedule_change` in order to satisfy ScheduleValueChange constraints: if e.g. we allowed for the \n// delay to be decreased immediately then it'd be possible for the state variable to schedule a value change with a \n// reduced delay, invalidating prior private reads.\nstruct ScheduledDelayChange<INITIAL_DELAY> {\n    // Both pre and post are stored in public storage, so by default they are zeroed. By wrapping them in an Option, \n    // they default to Option::none(), which we detect and replace with INITIAL_DELAY. The end result is that a\n    // ScheduledDelayChange that has not been initialized has a delay equal to INITIAL_DELAY, which is the desired\n    // effect. Once initialized, the Option will never be none again.\n    pre: Option<u32>,\n    post: Option<u32>,\n    // Block at which `post` value is used instead of `pre`\n    block_of_change: u32,\n    // The _dummy variable forces INITIAL_DELAY to be interpreted as a numeric value. This is a workaround to\n    // https://github.com/noir-lang/noir/issues/4633. Remove once resolved.\n    _dummy: [Field; INITIAL_DELAY],\n}\n\nimpl<INITIAL_DELAY> ScheduledDelayChange<INITIAL_DELAY> {\n    pub fn new(pre: Option<u32>, post: Option<u32>, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change, _dummy: [0; INITIAL_DELAY] }\n    }\n\n    /// Returns the current value of the delay stored in the data structure.\n    /// This function only returns a meaningful value when called in public with the current block number - for\n    /// historical private reads use `get_effective_minimum_delay_at` instead.\n    pub fn get_current(self, current_block_number: u32) -> u32 {\n        // The post value becomes the current one at the block of change, so any transaction that is included in the\n        // block of change will use the post value.\n\n        if current_block_number < self.block_of_change {\n            self.pre.unwrap_or(INITIAL_DELAY)\n        } else {\n            self.post.unwrap_or(INITIAL_DELAY)\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change delay and the block at which it will become the current\n    /// delay. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub fn get_scheduled(self) -> (u32, u32) {\n        (self.post.unwrap_or(INITIAL_DELAY), self.block_of_change)\n    }\n\n    /// Mutates the delay change by scheduling a change at the current block number. This function is only meaningful\n    /// when called in public with the current block number.\n    /// The block at which the new delay will become effective is determined automatically:\n    ///  - when increasing the delay, the change is effective immediately\n    ///  - when reducing the delay, the change will take effect after a delay equal to the difference between old and\n    ///    new delay. For example, if reducing from 3 days to 1 day, the reduction will be scheduled to happen after 2\n    ///    days.\n    pub fn schedule_change(&mut self, new: u32, current_block_number: u32) {\n        let current = self.get_current(current_block_number);\n\n        // When changing the delay value we must ensure that it is not possible to produce a value change with a delay\n        // shorter than the current one.\n        let blocks_until_change = if new > current {\n            // Increasing the delay value can therefore be done immediately: this does not invalidate prior contraints\n            // about how quickly a value might be changed (indeed it strengthens them).\n            0\n        } else {\n            // Decreasing the delay requires waiting for the difference between current and new delay in order to ensure\n            // that overall the current delay is respected.\n            //\n            //      current                    delay              earliest value block of change\n            //       block                 block of change         if delay remained unchanged\n            //  =======N=========================|================================X=================>\n            //         ^                         ^                                ^\n            //         |-------------------------|--------------------------------|\n            //         |   blocks until change               new delay            |\n            //         ------------------------------------------------------------\n            //                            current delay\n            current - new\n        };\n\n        self.pre = Option::some(current);\n        self.post = Option::some(new);\n        self.block_of_change = current_block_number + blocks_until_change;\n    }\n\n    /// Returns the minimum delay before a value might mutate due to a scheduled change, from the perspective of some\n    /// historical block number. It only returns a meaningful value when called in private with historical blocks. This \n    /// function can be used alongside `ScheduledValueChange.get_block_horizon` to properly constrain the\n    /// `max_block_number` transaction property when reading mutable shared state.\n    /// This value typically equals the current delay at the block following the historical one (the earliest one in\n    /// which a value change could be scheduled), but it also considers scenarios in which a delay reduction is \n    /// scheduled to happen in the near future, resulting in a way to schedule a change with an overall delay lower than\n    /// the current one.\n    pub fn get_effective_minimum_delay_at(self, historical_block_number: u32) -> u32 {\n        if self.block_of_change <= historical_block_number {\n            // If no delay changes were scheduled, then the delay value at the historical block (post) is guaranteed to\n            // hold due to how further delay changes would be scheduled by `schedule_change`.\n            self.post.unwrap_or(INITIAL_DELAY)\n        } else {\n            // If a change is scheduled, then the effective delay might be lower than the current one (pre). At the\n            // block of change the current delay will be the scheduled one, with an overall delay from the historical\n            // block number equal to the number of blocks until the change plus the new delay. If this value is lower\n            // than the current delay, then that is the effective minimum delay.\n            //\n            //       historical\n            //         block                  delay                  actual earliest value\n            //           v                block of change              block of change\n            //  =========NS=====================|=============================X===========Y=====>\n            //            ^                     ^                             ^           ^\n            //     earliest block in            |                             |           |\n            //   which to schedule change       |                             |           |\n            //           |                      |                             |           |\n            //           |----------------------|------------------------------           |\n            //           |         blocks                  new delay                      |\n            //           |      until change                                              |\n            //           |                                                                |\n            //           |----------------------------------------------------------------|\n            //                        current delay at the earliest block in \n            //                             which to scheduled value change\n\n            let blocks_until_change = self.block_of_change - (historical_block_number + 1);\n\n            min(\n                self.pre.unwrap_or(INITIAL_DELAY),\n                blocks_until_change + self.post.unwrap_or(INITIAL_DELAY)\n            )\n        }\n    }\n}\n\nimpl<INITIAL_DELAY> Serialize<1> for ScheduledDelayChange<INITIAL_DELAY> {\n    fn serialize(self) -> [Field; 1] {\n        // We pack all three u32 values into a single U128, which is made up of two u64 limbs.\n        // Low limb: [ pre_inner: u32 | post_inner: u32 ]\n        // High limb: [ empty | pre_is_some: u8 |  post_is_some: u8 | block_of_change: u32 ]\n\n        let lo = ((self.pre.unwrap_unchecked() as u64) * (1 << 32))\n            + (self.post.unwrap_unchecked() as u64);\n\n        let hi = (self.pre.is_some() as u64) * (1 << 33) \n            + (self.post.is_some() as u64 * (1 << 32)) \n            + self.block_of_change as u64;\n\n        let packed = U128::from_u64s_le(lo, hi);\n\n        [packed.to_integer()]\n    }\n}\n\nimpl<INITIAL_DELAY> Deserialize<1> for ScheduledDelayChange<INITIAL_DELAY> {\n    fn deserialize(input: [Field; 1]) -> Self {\n        let packed = U128::from_integer(input[0]);\n\n        // We use division and modulo to clear the bits that correspond to other values when unpacking.\n\n        let pre_is_some = ((packed.hi as u64) / (1 << 33)) as bool;\n        let pre_inner = ((packed.lo as u64) / (1 << 32)) as u32;\n\n        let post_is_some = (((packed.hi as u64) / (1 << 32)) % (1 << 1)) as bool;\n        let post_inner = ((packed.lo as u64) % (1 << 32)) as u32;\n\n        let block_of_change = ((packed.hi as u64) % (1 << 32)) as u32;\n\n        Self {\n            pre: if pre_is_some { Option::some(pre_inner) } else { Option::none() },\n            post: if post_is_some { Option::some(post_inner) } else { Option::none() },\n            block_of_change,\n            _dummy: [0; INITIAL_DELAY],\n        }\n    }\n}\n"},"136":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/shared_mutable_private_getter.nr","source":"use dep::protocol_types::{hash::pedersen_hash, traits::FromField, address::AztecAddress, header::Header};\n\nuse crate::context::PrivateContext;\nuse crate::public_storage;\nuse crate::state_vars::{\n    storage::Storage,\n    shared_mutable::{scheduled_delay_change::ScheduledDelayChange, scheduled_value_change::ScheduledValueChange}\n};\n\nstruct SharedMutablePrivateGetter<T, INITIAL_DELAY> {\n    context: &mut PrivateContext,\n    // The contract address of the contract we want to read from\n    other_contract_address: AztecAddress,\n    // The storage slot where the SharedMutable is stored on the other contract\n    storage_slot: Field,\n    // The _dummy variable forces INITIAL_DELAY to be interpreted as a numberic value. This is a workaround to\n    // https://github.com/noir-lang/noir/issues/4633. Remove once resolved.\n    _dummy: [Field; INITIAL_DELAY],\n}\n\n// We have this as a view-only interface to reading Shared Mutables in other contracts.\n// Currently the Shared Mutable does not support this. We can adapt SharedMutable at a later date\nimpl<T, INITIAL_DELAY> SharedMutablePrivateGetter<T, INITIAL_DELAY> {\n    pub fn new(\n        context: &mut PrivateContext,\n        other_contract_address: AztecAddress,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        assert(other_contract_address.to_field() != 0, \"Other contract address cannot be 0\");\n        Self { context, other_contract_address, storage_slot, _dummy: [0; INITIAL_DELAY] }\n    }\n\n    pub fn get_value_in_private(self, header: Header) -> T where T: FromField {\n        let (value_change, delay_change, historical_block_number) = self.historical_read_from_public_storage(header);\n        let effective_minimum_delay = delay_change.get_effective_minimum_delay_at(historical_block_number);\n        let block_horizon = value_change.get_block_horizon(historical_block_number, effective_minimum_delay);\n\n        // If our context has the same header as the one we pass in via the parameter, we are trying to read the \"current\" value\n        // and thus need to set the tx max block number below. If the context header is not the same as the one we pass in, this means\n        // we are trying to read a historical value and thus have no constraint on the max block number that this transaction can be included in.\n        if (self.context.historical_header.global_variables.block_number.eq(header.global_variables.block_number)) {\n            self.context.set_tx_max_block_number(block_horizon);\n        }\n\n        value_change.get_current_at(historical_block_number)\n    }\n\n    fn historical_read_from_public_storage(\n        self,\n        header: Header\n    ) -> (ScheduledValueChange<T>, ScheduledDelayChange<INITIAL_DELAY>, u32) where T: FromField {\n        let value_change_slot = self.get_value_change_storage_slot();\n        let mut raw_value_change_fields = [0; 3];\n        for i in 0..3 {\n            raw_value_change_fields[i] = header.public_storage_historical_read(\n                value_change_slot + i as Field,\n                self.other_contract_address\n            );\n        }\n\n        let delay_change_slot = self.get_delay_change_storage_slot();\n        let raw_delay_change_fields = [header.public_storage_historical_read(delay_change_slot, self.other_contract_address)];\n\n        let value_change = ScheduledValueChange::deserialize(raw_value_change_fields);\n        let delay_change = ScheduledDelayChange::deserialize(raw_delay_change_fields);\n\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        (value_change, delay_change, historical_block_number)\n    }\n\n    fn get_value_change_storage_slot(self) -> Field {\n        pedersen_hash([self.storage_slot, 0], 0)\n    }\n\n    fn get_delay_change_storage_slot(self) -> Field {\n        pedersen_hash([self.storage_slot, 1], 0)\n    }\n}\n"},"139":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/aztec/src/state_vars/private_immutable.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, grumpkin_point::GrumpkinPoint,\n    constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER, hash::pedersen_hash\n};\n\nuse crate::context::{PrivateContext, UnconstrainedContext};\nuse crate::note::{\n    lifecycle::create_note, note_getter::{get_note, view_notes}, note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct PrivateImmutable<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateImmutable<T, Context> {}\n\nimpl<Note, Context> PrivateImmutable<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateImmutable>` type (for example), because the storage slot often also identifies an actor. \n    // e.g. the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        pedersen_hash(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER\n        )\n    }\n}\n\nimpl<Note> PrivateImmutable<Note, &mut PrivateContext> {\n    // docs:start:initialize\n    pub fn initialize<N, M>(\n        self,\n        note: &mut Note,\n        ovpk_m: GrumpkinPoint,\n        ivpk_m: GrumpkinPoint\n    ) where Note: NoteInterface<N, M> {\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        self.context.push_new_nullifier(nullifier, 0);\n\n        create_note(self.context, self.storage_slot, note, ovpk_m, ivpk_m);\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note<N, M>(self) -> Note where Note: NoteInterface<N, M> {\n        let storage_slot = self.storage_slot;\n        get_note(self.context, storage_slot)\n    }\n    // docs:end:get_note\n}\n\nimpl<Note> PrivateImmutable<Note, UnconstrainedContext> {\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // view_note does not actually use the context, but it calls oracles that are only available in private\n    // docs:start:view_note\n    unconstrained pub fn view_note<N, M>(self) -> Note  where Note: NoteInterface<N, M> {\n        let mut options = NoteViewerOptions::new();\n        view_notes(self.storage_slot, options.set_limit(1))[0].unwrap()\n    }\n    // docs:end:view_note\n}\n"},"140":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr","source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\nstruct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context> Storage<T> for PublicMutable<T, Context> {}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        let fields = T::serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UnconstrainedContext> {\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        // This looks the same as the &mut PublicContext impl, but is actually very different. In public execution the\n        // storage read oracle gets transpiled to SLOAD opcodes, whereas in unconstrained execution the PXE returns\n        // historical data.\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n}\n"},"148":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/caller_context.nr","source":"use crate::address::AztecAddress;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Empty, Serialize, Deserialize};\nuse crate::constants::CALLER_CONTEXT_LENGTH;\nuse crate::utils::reader::Reader;\n\nstruct CallerContext {\n    msg_sender: AztecAddress,\n    storage_contract_address: AztecAddress,\n    is_static_call: bool,\n}\n\nimpl Eq for CallerContext {\n    fn eq(self, other: CallerContext) -> bool {\n        other.msg_sender.eq(self.msg_sender)\n            & other.storage_contract_address.eq(self.storage_contract_address)\n            & other.is_static_call == self.is_static_call\n    }\n}\n\nimpl Empty for CallerContext {\n    fn empty() -> Self {\n        CallerContext {\n            msg_sender: AztecAddress::zero(),\n            storage_contract_address: AztecAddress::zero(),\n            is_static_call: false,\n        }\n    }\n}\n\nimpl CallerContext {\n    pub fn is_empty(self) -> bool {\n        self.msg_sender.is_zero() & self.storage_contract_address.is_zero() & !self.is_static_call\n    }\n\n    // Different to an empty context, a hidden context won't reveal the caller's msg_sender and storage_contract_address,\n    // but will still propagate the is_static_call flag.\n    pub fn is_hidden(self) -> bool {\n        self.msg_sender.is_zero() & self.storage_contract_address.is_zero()\n    }\n}\n\nimpl Serialize<CALLER_CONTEXT_LENGTH> for CallerContext {\n  fn serialize(self) -> [Field; CALLER_CONTEXT_LENGTH] {\n    let mut fields: BoundedVec<Field, CALLER_CONTEXT_LENGTH> = BoundedVec::new();\n\n    fields.extend_from_array(self.msg_sender.serialize());\n    fields.extend_from_array(self.storage_contract_address.serialize());\n    fields.push(self.is_static_call as Field);\n\n    assert_eq(fields.len(), CALLER_CONTEXT_LENGTH);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CALLER_CONTEXT_LENGTH> for CallerContext {\n  fn deserialize(fields: [Field; CALLER_CONTEXT_LENGTH]) -> CallerContext {\n    let mut reader = Reader::new(fields);\n\n    let item = CallerContext {\n      msg_sender: reader.read_struct(AztecAddress::deserialize),\n      storage_contract_address: reader.read_struct(AztecAddress::deserialize),\n      is_static_call: reader.read_bool(),\n    };\n    reader.finish();\n    item\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = CallerContext::empty();\n    let serialized = item.serialize();\n    let deserialized = CallerContext::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"151":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/global_variables.nr","source":"use dep::std::cmp::Eq;\nuse crate::{\n    address::{AztecAddress, EthAddress}, abis::gas_fees::GasFees,\n    constants::{GENERATOR_INDEX__GLOBAL_VARIABLES, GLOBAL_VARIABLES_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}, utils::reader::Reader\n};\n\n// docs:start:global-variables\nstruct GlobalVariables {\n    chain_id : Field,\n    version : Field,\n    block_number : Field,\n    timestamp : u64,\n    coinbase : EthAddress,\n    fee_recipient : AztecAddress,\n    gas_fees : GasFees\n}\n// docs:end:global-variables\n\nimpl GlobalVariables {\n    fn is_empty(self) -> bool {\n        (self.chain_id == 0)\n            & (self.version == 0)\n            & (self.block_number == 0)\n            & (self.timestamp == 0)\n            & (self.coinbase.is_zero())\n            & (self.fee_recipient.is_zero())\n            & (self.gas_fees.is_empty())\n    }\n}\n\nimpl Serialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn serialize(self) -> [Field; GLOBAL_VARIABLES_LENGTH] {\n        let mut serialized: BoundedVec<Field, GLOBAL_VARIABLES_LENGTH> = BoundedVec::new();\n\n        serialized.push(self.chain_id);\n        serialized.push(self.version);\n        serialized.push(self.block_number);\n        serialized.push(self.timestamp as Field);\n        serialized.push(self.coinbase.to_field());\n        serialized.push(self.fee_recipient.to_field());\n        serialized.extend_from_array(self.gas_fees.serialize());\n\n        serialized.storage\n    }\n}\n\nimpl Deserialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn deserialize(serialized: [Field; GLOBAL_VARIABLES_LENGTH]) -> GlobalVariables {\n        let mut reader = Reader::new(serialized);\n        GlobalVariables {\n            chain_id: reader.read(),\n            version: reader.read(),\n            block_number: reader.read(),\n            timestamp: reader.read() as u64,\n            coinbase: EthAddress::from_field(reader.read()),\n            fee_recipient: AztecAddress::from_field(reader.read()),\n            gas_fees: reader.read_struct(GasFees::deserialize)\n        }\n    }\n}\n\nimpl Eq for GlobalVariables {\n    fn eq(self, other : GlobalVariables) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.block_number == other.block_number) &\n        (self.timestamp == other.timestamp) &\n        (self.coinbase == other.coinbase) &\n        (self.fee_recipient == other.fee_recipient) &\n        (self.gas_fees == other.gas_fees) \n    }\n}\n\nimpl Empty for GlobalVariables {\n    fn empty() -> Self {\n        Self {\n            chain_id: 0,\n            version: 0,\n            block_number: 0,\n            timestamp: 0,\n            coinbase: EthAddress::empty(),\n            fee_recipient: AztecAddress::empty(),\n            gas_fees: GasFees::empty()\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let vars = GlobalVariables::empty();\n    let _serialized = vars.serialize();\n    let _deserialized = GlobalVariables::deserialize(_serialized);\n}\n"},"152":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_call_stack_item.nr","source":"use crate::{\n    abis::{function_data::FunctionData, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PRIVATE_CALL_STACK_ITEM_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader\n};\n\nstruct PrivateCallStackItem {\n    // This is the _actual_ contract address relating to where this function's code resides in the\n    // contract tree. Regardless of whether this is a call or delegatecall, this\n    // `contract_address` _does not change_. Amongst other things, it's used as a lookup for\n    // getting the correct code from the tree. There is a separate `storage_contract_address`\n    // within a CallStackItem which varies depending on whether this is a call or delegatecall.\n    contract_address: AztecAddress,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n}\n\nimpl Eq for PrivateCallStackItem {\n    fn eq(self, other: Self) -> bool {\n        self.contract_address.eq(other.contract_address) &\n        self.function_data.eq(other.function_data) &\n        self.public_inputs.eq(other.public_inputs)\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn serialize(self) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_STACK_ITEM_LENGTH> = BoundedVec::new();\n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.extend_from_array(self.public_inputs.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CALL_STACK_ITEM_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn deserialize(serialized: [Field; PRIVATE_CALL_STACK_ITEM_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let item = Self {\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: reader.read_struct(PrivateCircuitPublicInputs::deserialize),\n        };\n\n        reader.finish();\n        item\n    }\n}\n\nimpl Hash for PrivateCallStackItem {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl Empty for PrivateCallStackItem {\n    fn empty() -> Self {\n        PrivateCallStackItem {\n            contract_address: AztecAddress::empty(),\n            function_data: FunctionData::empty(),\n            public_inputs: PrivateCircuitPublicInputs::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = PrivateCallStackItem::empty();\n    let serialized = item.serialize();\n    let deserialized = PrivateCallStackItem::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let mut item = PrivateCallStackItem::empty();\n    item.function_data.is_private = true;\n    let hash = item.hash();\n\n    // Value from private_call_stack_item.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x22786e4f971661d2e49095e6b038e5170bc47b795253916d5657c4bdd1df50bf;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"154":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{GAS_LENGTH, FIXED_DA_GAS}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, abis::side_effect::Ordered, utils::reader::Reader,\n    abis::gas_fees::GasFees\n};\nuse dep::std::ops::{Add, Sub};\n\nstruct Gas {\n    da_gas: u32,\n    l2_gas: u32,\n}\n\nimpl Gas {\n    pub fn new(da_gas: u32, l2_gas: u32) -> Self {\n        Self { da_gas, l2_gas }\n    }\n\n    pub fn tx_overhead() -> Self {\n        Self { da_gas: FIXED_DA_GAS, l2_gas: 0 }\n    }\n\n    pub fn compute_fee(self, fees: GasFees) -> Field {\n        (self.da_gas as Field) * fees.fee_per_da_gas + (self.l2_gas as Field) * fees.fee_per_l2_gas\n    }\n\n    pub fn is_empty(self) -> bool {\n        (self.da_gas == 0) & (self.l2_gas == 0)\n    }\n\n    pub fn within(self, limits: Gas) -> bool {\n        (self.da_gas <= limits.da_gas) & (self.l2_gas <= limits.l2_gas)\n    }\n}\n\nimpl Add for Gas {\n    fn add(self, other: Gas) -> Self {\n        Gas::new(self.da_gas + other.da_gas, self.l2_gas + other.l2_gas)\n    }\n}\n\nimpl Sub for Gas {\n    fn sub(self, other: Gas) -> Self {\n        Gas::new(self.da_gas - other.da_gas, self.l2_gas - other.l2_gas)\n    }\n}\n\nimpl Serialize<GAS_LENGTH> for Gas {\n    fn serialize(self) -> [Field; GAS_LENGTH] {\n        [self.da_gas as Field, self.l2_gas as Field]\n    }\n}\n\nimpl Deserialize<GAS_LENGTH> for Gas {\n    fn deserialize(serialized: [Field; GAS_LENGTH]) -> Gas {\n        Gas::new(serialized[0] as u32, serialized[1] as u32)\n    }\n}\n\nimpl Eq for Gas {\n    fn eq(self, other : Gas) -> bool {\n        (self.da_gas == other.da_gas) & (self.l2_gas == other.l2_gas)\n    }\n}\n\nimpl Empty for Gas {\n    fn empty() -> Self {\n        Gas::new(0, 0)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = Gas::empty();\n    let serialized = item.serialize();\n    let deserialized = Gas::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n"},"156":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas_settings.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress}, abis::gas::Gas,\n    abis::gas_fees::GasFees,\n    constants::{\n    GAS_SETTINGS_LENGTH, DEFAULT_GAS_LIMIT, DEFAULT_TEARDOWN_GAS_LIMIT, DEFAULT_MAX_FEE_PER_GAS,\n    DEFAULT_INCLUSION_FEE\n},\n    hash::pedersen_hash, traits::{Deserialize, Hash, Serialize, Empty}, abis::side_effect::Ordered,\n    utils::reader::Reader\n};\n\nstruct GasSettings {\n    gas_limits: Gas,\n    teardown_gas_limits: Gas,\n    max_fees_per_gas: GasFees,\n    inclusion_fee: Field,\n}\n\nimpl GasSettings {\n    pub fn new(\n        gas_limits: Gas,\n        teardown_gas_limits: Gas,\n        max_fees_per_gas: GasFees,\n        inclusion_fee: Field\n    ) -> Self {\n        Self { gas_limits, teardown_gas_limits, max_fees_per_gas, inclusion_fee }\n    }\n\n    pub fn default() -> Self {\n        GasSettings::new(\n            Gas::new(DEFAULT_GAS_LIMIT, DEFAULT_GAS_LIMIT),\n            Gas::new(DEFAULT_TEARDOWN_GAS_LIMIT, DEFAULT_TEARDOWN_GAS_LIMIT),\n            GasFees::new(DEFAULT_MAX_FEE_PER_GAS, DEFAULT_MAX_FEE_PER_GAS),\n            DEFAULT_INCLUSION_FEE\n        )\n    }\n}\n\nimpl Eq for GasSettings {\n    fn eq(self, other: Self) -> bool {\n        (self.gas_limits == other.gas_limits) & (self.teardown_gas_limits == other.teardown_gas_limits) & (self.max_fees_per_gas == other.max_fees_per_gas) & (self.inclusion_fee == other.inclusion_fee)\n    }\n}\n\nimpl Empty for GasSettings {\n    fn empty() -> Self {\n        GasSettings::new(\n            Gas::empty(), Gas::empty(), GasFees::empty(), 0\n        )\n    }\n}\n\nimpl Serialize<GAS_SETTINGS_LENGTH> for GasSettings {\n    fn serialize(self) -> [Field; GAS_SETTINGS_LENGTH] {\n        let mut serialized: BoundedVec<Field, GAS_SETTINGS_LENGTH> = BoundedVec::new();\n\n        serialized.extend_from_array(self.gas_limits.serialize());\n        serialized.extend_from_array(self.teardown_gas_limits.serialize());\n        serialized.extend_from_array(self.max_fees_per_gas.serialize());\n        serialized.push(self.inclusion_fee);\n    \n        serialized.storage\n    }\n}\n\nimpl Deserialize<GAS_SETTINGS_LENGTH> for GasSettings {\n    fn deserialize(serialized: [Field; GAS_SETTINGS_LENGTH]) -> GasSettings {\n        let mut reader = Reader::new(serialized);\n        GasSettings::new(reader.read_struct(Gas::deserialize), reader.read_struct(Gas::deserialize), reader.read_struct(GasFees::deserialize), reader.read())\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = GasSettings::empty();\n    let serialized = item.serialize();\n    let deserialized = GasSettings::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"157":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_circuit_public_inputs.nr","source":"use crate::{\n    abis::{\n    call_context::CallContext, max_block_number::MaxBlockNumber, gas_settings::GasSettings,\n    validation_requests::KeyValidationRequestAndGenerator, note_hash::NoteHash, nullifier::Nullifier,\n    private_call_request::PrivateCallRequest, read_request::ReadRequest,\n    log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS, MAX_ENCRYPTED_LOGS_PER_CALL,\n    MAX_UNENCRYPTED_LOGS_PER_CALL, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, hash::pedersen_hash, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader,\n    transaction::tx_context::TxContext, utils::arrays::validate_array\n};\n\nstruct PrivateCircuitPublicInputsArrayLengths {\n    note_hash_read_requests: u64,\n    nullifier_read_requests: u64,\n    key_validation_requests_and_generators: u64,\n    new_note_hashes: u64,\n    new_nullifiers: u64,\n    new_l2_to_l1_msgs: u64,\n    private_call_requests: u64,\n    public_call_stack_hashes: u64,\n    note_encrypted_logs_hashes: u64,\n    encrypted_logs_hashes: u64,\n    unencrypted_logs_hashes: u64,\n}\n\nimpl PrivateCircuitPublicInputsArrayLengths {\n    pub fn new(public_inputs: PrivateCircuitPublicInputs) -> Self {\n        PrivateCircuitPublicInputsArrayLengths {\n            note_hash_read_requests: validate_array(public_inputs.note_hash_read_requests),\n            nullifier_read_requests: validate_array(public_inputs.nullifier_read_requests),\n            key_validation_requests_and_generators: validate_array(public_inputs.key_validation_requests_and_generators),\n            new_note_hashes: validate_array(public_inputs.new_note_hashes),\n            new_nullifiers: validate_array(public_inputs.new_nullifiers),\n            new_l2_to_l1_msgs: validate_array(public_inputs.new_l2_to_l1_msgs),\n            private_call_requests: validate_array(public_inputs.private_call_requests),\n            public_call_stack_hashes: validate_array(public_inputs.public_call_stack_hashes),\n            note_encrypted_logs_hashes: validate_array(public_inputs.note_encrypted_logs_hashes),\n            encrypted_logs_hashes: validate_array(public_inputs.encrypted_logs_hashes),\n            unencrypted_logs_hashes: validate_array(public_inputs.unencrypted_logs_hashes)\n        }\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n\n    args_hash: Field,\n    returns_hash: Field,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: [ReadRequest; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    key_validation_requests_and_generators: [KeyValidationRequestAndGenerator; MAX_KEY_VALIDATION_REQUESTS_PER_CALL],\n\n    new_note_hashes: [NoteHash; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [Nullifier; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_requests: [PrivateCallRequest; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    public_teardown_function_hash: Field,\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter : u32,\n    end_side_effect_counter : u32,\n    note_encrypted_logs_hashes: [NoteLogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_CALL],\n    encrypted_logs_hashes: [EncryptedLogHash; MAX_ENCRYPTED_LOGS_PER_CALL],\n    unencrypted_logs_hashes: [LogHash; MAX_UNENCRYPTED_LOGS_PER_CALL],\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // Note: The chain_id and version here are not redundant to the values in self.historical_header.global_variables because\n    // they can be different in case of a protocol upgrade. In such a situation we could be using header from a block\n    // before the upgrade took place but be using the updated protocol to execute and prove the transaction.\n    tx_context: TxContext,\n}\n\nimpl Eq for PrivateCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.call_context.eq(other.call_context) &\n        self.args_hash.eq(other.args_hash) &\n        (self.returns_hash == other.returns_hash) &\n        (self.min_revertible_side_effect_counter == other.min_revertible_side_effect_counter) &\n        (self.is_fee_payer == other.is_fee_payer) &\n        (self.max_block_number == other.max_block_number) &\n        (self.note_hash_read_requests == other.note_hash_read_requests) &\n        (self.nullifier_read_requests == other.nullifier_read_requests) &\n        (self.key_validation_requests_and_generators == other.key_validation_requests_and_generators) &\n        (self.new_note_hashes == other.new_note_hashes) &\n        (self.new_nullifiers == other.new_nullifiers) &\n        (self.private_call_requests == other.private_call_requests) &\n        (self.public_call_stack_hashes == other.public_call_stack_hashes) &\n        (self.new_l2_to_l1_msgs == other.new_l2_to_l1_msgs) &\n        (self.start_side_effect_counter == other.start_side_effect_counter) &\n        (self.end_side_effect_counter == other.end_side_effect_counter) &\n        (self.note_encrypted_logs_hashes == other.note_encrypted_logs_hashes) &\n        (self.encrypted_logs_hashes == other.encrypted_logs_hashes) &\n        (self.unencrypted_logs_hashes == other.unencrypted_logs_hashes) &\n        self.historical_header.eq(other.historical_header) &\n        self.tx_context.eq(other.tx_context)\n    }\n}\n\nimpl Serialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n\n        fields.push(self.min_revertible_side_effect_counter as Field);\n        fields.push(if self.is_fee_payer { 1 } else { 0 } as Field);\n\n        fields.extend_from_array(self.max_block_number.serialize());\n\n        for i in 0..self.note_hash_read_requests.len() {\n            fields.extend_from_array(self.note_hash_read_requests[i].serialize());\n        }\n        for i in 0..self.nullifier_read_requests.len() {\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..self.key_validation_requests_and_generators.len() {\n            fields.extend_from_array(self.key_validation_requests_and_generators[i].serialize());\n        }\n        for i in 0..self.new_note_hashes.len() {\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..self.new_nullifiers.len() {\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        for i in 0..self.private_call_requests.len() {\n            fields.extend_from_array(self.private_call_requests[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n        fields.push(self.public_teardown_function_hash);\n        for i in 0..self.new_l2_to_l1_msgs.len() {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n        for i in 0..self.note_encrypted_logs_hashes.len() {\n            fields.extend_from_array(self.note_encrypted_logs_hashes[i].serialize());\n        }\n        for i in 0..self.encrypted_logs_hashes.len() {\n            fields.extend_from_array(self.encrypted_logs_hashes[i].serialize());\n        }\n        for i in 0..self.unencrypted_logs_hashes.len() {\n            fields.extend_from_array(self.unencrypted_logs_hashes[i].serialize());\n        }\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.extend_from_array(self.tx_context.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = Self {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            returns_hash: reader.read(),\n            min_revertible_side_effect_counter: reader.read() as u32,\n            is_fee_payer: reader.read() == 1,\n            max_block_number: reader.read_struct(MaxBlockNumber::deserialize),\n            note_hash_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            key_validation_requests_and_generators: reader.read_struct_array(KeyValidationRequestAndGenerator::deserialize, [KeyValidationRequestAndGenerator::empty(); MAX_KEY_VALIDATION_REQUESTS_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(NoteHash::deserialize, [NoteHash::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(Nullifier::deserialize, [Nullifier::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            private_call_requests: reader.read_struct_array(PrivateCallRequest::deserialize, [PrivateCallRequest::empty(); MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            public_teardown_function_hash: reader.read(),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            note_encrypted_logs_hashes: reader.read_struct_array(NoteLogHash::deserialize, [NoteLogHash::empty(); MAX_NOTE_ENCRYPTED_LOGS_PER_CALL]),\n            encrypted_logs_hashes: reader.read_struct_array(EncryptedLogHash::deserialize, [EncryptedLogHash::empty(); MAX_ENCRYPTED_LOGS_PER_CALL]),\n            unencrypted_logs_hashes: reader.read_struct_array(LogHash::deserialize, [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL]),\n            historical_header: reader.read_struct(Header::deserialize),\n            tx_context: reader.read_struct(TxContext::deserialize),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\nimpl Empty for PrivateCircuitPublicInputs {\n    fn empty() -> Self {\n        PrivateCircuitPublicInputs {\n            call_context: CallContext::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n            nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n            key_validation_requests_and_generators: [KeyValidationRequestAndGenerator::empty(); MAX_KEY_VALIDATION_REQUESTS_PER_CALL],\n            new_note_hashes: [NoteHash::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n            new_nullifiers: [Nullifier::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n            private_call_requests: [PrivateCallRequest::empty(); MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n            public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n            public_teardown_function_hash: 0,\n            new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n            start_side_effect_counter : 0 as u32,\n            end_side_effect_counter : 0 as u32,\n            note_encrypted_logs_hashes: [NoteLogHash::empty(); MAX_NOTE_ENCRYPTED_LOGS_PER_CALL],\n            encrypted_logs_hashes: [EncryptedLogHash::empty(); MAX_ENCRYPTED_LOGS_PER_CALL],\n            unencrypted_logs_hashes: [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL],\n            historical_header: Header::empty(),\n            tx_context: TxContext::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi = PrivateCircuitPublicInputs::empty();\n    let serialized = pcpi.serialize();\n    let deserialized = PrivateCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs = PrivateCircuitPublicInputs::empty();\n    let hash = inputs.hash();\n    // Value from private_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x1970bf189adc837d1769f9f44a8b55c97d45690e7744859b71b647e808ee8622;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"158":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_call_request.nr","source":"use dep::std::cmp::Eq;\nuse crate::{\n    abis::{caller_context::CallerContext, side_effect::{Ordered, RangeOrdered, Scoped}},\n    address::AztecAddress, constants::{PRIVATE_CALL_REQUEST_LENGTH, SCOPED_PRIVATE_CALL_REQUEST_LENGTH},\n    traits::{Empty, Serialize, Deserialize}, utils::reader::Reader\n};\n\nstruct PrivateCallRequest {\n    hash: Field,\n    caller_context: CallerContext,\n    start_side_effect_counter: u32,\n    end_side_effect_counter: u32,\n}\n\nimpl Ordered for PrivateCallRequest {\n    fn counter(self) -> u32 {\n        self.start_side_effect_counter\n    }\n}\n\nimpl RangeOrdered for PrivateCallRequest {\n    fn counter_start(self) -> u32 {\n        self.start_side_effect_counter\n    }\n    fn counter_end(self) -> u32 {\n        self.end_side_effect_counter\n    }\n}\n\nimpl Eq for PrivateCallRequest {\n    fn eq(self, other: PrivateCallRequest) -> bool {\n        (self.hash == other.hash)\n            & (self.caller_context == other.caller_context)\n            & (self.start_side_effect_counter == other.start_side_effect_counter)\n            & (self.end_side_effect_counter == other.end_side_effect_counter)\n    }\n}\n\nimpl Empty for PrivateCallRequest {\n    fn empty() -> Self {\n        PrivateCallRequest {\n            hash: 0,\n            caller_context: CallerContext::empty(),\n            start_side_effect_counter: 0,\n            end_side_effect_counter: 0,\n        }\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_REQUEST_LENGTH> for PrivateCallRequest {\n    fn serialize(self) -> [Field; PRIVATE_CALL_REQUEST_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_REQUEST_LENGTH> = BoundedVec::new();\n\n        fields.push(self.hash);\n        fields.extend_from_array(self.caller_context.serialize());\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n\n        assert_eq(fields.len(), PRIVATE_CALL_REQUEST_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_REQUEST_LENGTH> for PrivateCallRequest {\n    fn deserialize(fields: [Field; PRIVATE_CALL_REQUEST_LENGTH]) -> PrivateCallRequest {\n        let mut reader = Reader::new(fields);\n        let item = PrivateCallRequest {\n            hash: reader.read(),\n            caller_context: reader.read_struct(CallerContext::deserialize),\n            start_side_effect_counter: reader.read_u32(),\n            end_side_effect_counter: reader.read_u32(),\n        };\n        reader.finish();\n        item\n    }\n}\n\nimpl PrivateCallRequest {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedPrivateCallRequest {\n        ScopedPrivateCallRequest { call_request: self, contract_address }\n    }\n}\n\nstruct ScopedPrivateCallRequest {\n    call_request: PrivateCallRequest,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<PrivateCallRequest> for ScopedPrivateCallRequest {\n    fn inner(self) -> PrivateCallRequest {\n        self.call_request\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedPrivateCallRequest {\n    fn counter(self) -> u32 {\n        self.call_request.counter_start()\n    }\n}\n\nimpl RangeOrdered for ScopedPrivateCallRequest {\n    fn counter_start(self) -> u32 {\n        self.call_request.counter_start()\n    }\n    fn counter_end(self) -> u32 {\n        self.call_request.counter_end()\n    }\n}\n\nimpl Eq for ScopedPrivateCallRequest {\n    fn eq(self, other: ScopedPrivateCallRequest) -> bool {\n        (self.call_request == other.call_request)\n            & (self.contract_address == other.contract_address)\n    }\n}\n\nimpl Empty for ScopedPrivateCallRequest {\n    fn empty() -> Self {\n        ScopedPrivateCallRequest {\n            call_request: PrivateCallRequest::empty(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_PRIVATE_CALL_REQUEST_LENGTH> for ScopedPrivateCallRequest {\n    fn serialize(self) -> [Field; SCOPED_PRIVATE_CALL_REQUEST_LENGTH] {\n        let mut fields: BoundedVec<Field, SCOPED_PRIVATE_CALL_REQUEST_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.call_request.serialize());\n        fields.extend_from_array(self.contract_address.serialize());\n\n        assert_eq(fields.len(), SCOPED_PRIVATE_CALL_REQUEST_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<SCOPED_PRIVATE_CALL_REQUEST_LENGTH> for ScopedPrivateCallRequest {\n    fn deserialize(fields: [Field; SCOPED_PRIVATE_CALL_REQUEST_LENGTH]) -> ScopedPrivateCallRequest {\n        let mut reader = Reader::new(fields);\n        let item = ScopedPrivateCallRequest {\n            call_request: reader.read_struct(PrivateCallRequest::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        item\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = ScopedPrivateCallRequest::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedPrivateCallRequest::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"160":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/call_context.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, abis::side_effect::Ordered,\n    abis::{gas_settings::GasSettings, gas::Gas}, utils::reader::Reader\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n\n    side_effect_counter : u32,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        let serialized: [Field; CALL_CONTEXT_LENGTH] = self.serialize();\n\n        for i in 0..CALL_CONTEXT_LENGTH {\n            assert(serialized[i] == 0);\n        }\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, other: CallContext) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        let mut serialized: BoundedVec<Field, CALL_CONTEXT_LENGTH> = BoundedVec::new();\n\n        serialized.push(self.msg_sender.to_field());\n        serialized.push(self.storage_contract_address.to_field());\n        serialized.push(self.function_selector.to_field());\n        serialized.push(self.is_delegate_call as Field);\n        serialized.push(self.is_static_call as Field);\n        serialized.push(self.side_effect_counter as Field);\n    \n        serialized.storage\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        let mut reader = Reader::new(serialized);\n        CallContext {\n            msg_sender: AztecAddress::from_field(reader.read()),\n            storage_contract_address: AztecAddress::from_field(reader.read()),\n            function_selector: FunctionSelector::from_field(reader.read()),\n            is_delegate_call: reader.read() as bool,\n            is_static_call: reader.read() as bool,\n            side_effect_counter: reader.read() as u32,\n        }\n    }\n}\n\nimpl Empty for CallContext {\n    fn empty() -> Self {\n        CallContext {\n            msg_sender: AztecAddress::empty(),\n            storage_contract_address: AztecAddress::empty(),\n            function_selector: FunctionSelector::empty(),\n            is_delegate_call: false,\n            is_static_call: false,\n            side_effect_counter: 0,\n        }\n    }\n}\n\n#[test]\nfn serialize_deserialize_of_empty() {\n    let context = CallContext::empty();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn assert_is_zero() {\n    let context = CallContext::empty();\n    context.assert_is_zero();\n}\n\n#[test(should_fail)]\nfn not_zero_assert_is_zero() {\n    let mut context = CallContext::empty();\n    context.is_delegate_call = true;\n    context.assert_is_zero();\n}\n\n#[test]\nfn test_eq() {\n    let mut context1 = CallContext::empty();\n    let mut context2 = CallContext::empty();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = true;\n\n    let address: AztecAddress = AztecAddress::from_field(69420);\n    context1.msg_sender = address;\n    context2.msg_sender = address;\n\n    assert(context1.eq(context2));\n}\n\n#[test(should_fail)]\nfn not_eq_test_eq() {\n    let mut context1 = CallContext::empty();\n    let mut context2 = CallContext::empty();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = false;\n\n    let address1: AztecAddress = AztecAddress::from_field(69420);\n    let address2: AztecAddress = AztecAddress::from_field(42069);\n\n    context1.msg_sender = address1;\n    context2.msg_sender = address2;\n\n    assert(context1.eq(context2));\n}\n\n#[test]\nfn hash_smoke() {\n    let context = CallContext::empty();\n    let _hashed = context.hash();\n}\n"},"161":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_circuit_public_inputs.nr","source":"use crate::{\n    abis::{\n    call_context::CallContext, note_hash::NoteHash, nullifier::Nullifier, read_request::ReadRequest,\n    gas::Gas, global_variables::GlobalVariables, log_hash::LogHash\n},\n    address::AztecAddress,\n    constants::{\n    MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH, MAX_UNENCRYPTED_LOGS_PER_CALL\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::pedersen_hash, header::Header, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Hash, Serialize, Deserialize, Empty}, utils::reader::Reader\n};\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n\n    args_hash: Field,\n    returns_hash: Field,\n\n    note_hash_read_requests: [ReadRequest; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    nullifier_non_existent_read_requests: [ReadRequest; MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n    l1_to_l2_msg_read_requests: [ReadRequest; MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_CALL],\n    contract_storage_update_requests: [StorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_reads: [StorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n\n    // todo: add sideeffect ranges for the input to these hashes\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_note_hashes: [NoteHash; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [Nullifier; MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter: u32,\n    end_side_effect_counter: u32,\n\n    unencrypted_logs_hashes: [LogHash; MAX_UNENCRYPTED_LOGS_PER_CALL],\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n\n    // Global variables injected into this circuit\n    global_variables: GlobalVariables,\n\n    prover_address: AztecAddress,\n\n    revert_code: u8,\n    \n    start_gas_left: Gas,\n    end_gas_left: Gas,\n    transaction_fee: Field,\n}\n\nimpl Eq for PublicCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Serialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n        for i in 0..MAX_NOTE_HASH_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.note_hash_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_non_existent_read_requests[i].serialize());\n        }\n        for i in 0..MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.l1_to_l2_msg_read_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_reads[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL {\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL {\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n\n        for i in 0..MAX_UNENCRYPTED_LOGS_PER_CALL{\n            fields.extend_from_array(self.unencrypted_logs_hashes[i].serialize());\n        }\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n        fields.push(self.prover_address.to_field());\n        fields.push(self.revert_code as Field);\n        fields.extend_from_array(self.start_gas_left.serialize());\n        fields.extend_from_array(self.end_gas_left.serialize());\n        fields.push(self.transaction_fee);\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            returns_hash: reader.read(),\n            note_hash_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            nullifier_non_existent_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL]),\n            l1_to_l2_msg_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_CALL]),\n            contract_storage_update_requests: reader.read_struct_array(StorageUpdateRequest::deserialize, [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL]),\n            contract_storage_reads: reader.read_struct_array(StorageRead::deserialize, [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(NoteHash::deserialize, [NoteHash::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(Nullifier::deserialize, [Nullifier::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            unencrypted_logs_hashes: reader.read_struct_array(LogHash::deserialize, [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL]),\n            historical_header: reader.read_struct(Header::deserialize),\n            global_variables: reader.read_struct(GlobalVariables::deserialize),\n            prover_address: reader.read_struct(AztecAddress::deserialize),\n            revert_code: reader.read() as u8,\n            start_gas_left: reader.read_struct(Gas::deserialize),\n            end_gas_left: reader.read_struct(Gas::deserialize),\n            transaction_fee: reader.read(),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PublicCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\nimpl Empty for PublicCircuitPublicInputs {\n    fn empty() -> Self {\n        PublicCircuitPublicInputs {\n            call_context: CallContext::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            note_hash_read_requests: [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n            nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n            nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n            l1_to_l2_msg_read_requests: [ReadRequest::empty(); MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_CALL],\n            contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n            contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n            public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n            new_note_hashes: [NoteHash::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n            new_nullifiers: [Nullifier::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n            new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n            start_side_effect_counter: 0 as u32,\n            end_side_effect_counter: 0 as u32,\n            unencrypted_logs_hashes: [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL],\n            historical_header: Header::empty(),\n            global_variables: GlobalVariables::empty(),\n            prover_address: AztecAddress::zero(),\n            revert_code: 0 as u8,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty(),\n            transaction_fee: 0,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi = PublicCircuitPublicInputs::empty();\n    let serialized = pcpi.serialize();\n    let deserialized = PublicCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs = PublicCircuitPublicInputs::empty();\n    let hash = inputs.hash();\n\n    // Value from public_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x0933cf2bb384c9733d5a8311bfdc089489c2557df2265026579f9ac2b21d2ef9;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"169":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr","source":"global NULLIFIER_LEAF_PREIMAGE_LENGTH: u64 = 3;\n\nuse crate::{\n    abis::{read_request::ScopedReadRequest, side_effect::Readable}, hash::silo_nullifier,\n    merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}\n};\n\nstruct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u64,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            nullifier : 0,\n            next_nullifier : 0,\n            next_index : 0,\n        }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            dep::std::hash::pedersen_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl Readable for NullifierLeafPreimage {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        let siloed_value = silo_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.nullifier, siloed_value, \"Value of the nullifier leaf does not match read request\");\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u64 }\n    }\n}\n\nimpl Eq for NullifierLeafPreimage {\n  fn eq(self, other: Self) -> bool {\n    (self.nullifier == other.nullifier) &\n    (self.next_nullifier == other.next_nullifier) &\n    (self.next_index == other.next_index)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NullifierLeafPreimage::empty();\n    let serialized = item.serialize();\n    let deserialized = NullifierLeafPreimage::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"170":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_call_stack_item.nr","source":"use crate::abis::{function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs};\nuse crate::address::AztecAddress;\nuse crate::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::traits::Hash;\n\nstruct PublicCallStackItem {\n    contract_address: AztecAddress,\n    public_inputs: PublicCircuitPublicInputs,\n    function_data: FunctionData,\n    // True if this call stack item represents a request to execute a function rather than a\n    // fulfilled execution. Used when enqueuing calls from private to public functions.\n    is_execution_request: bool,\n}\n\nimpl Hash for PublicCallStackItem {\n    fn hash(self) -> Field {\n        let item = if self.is_execution_request {\n            self.as_execution_request()\n        } else {\n            self\n        };\n\n        dep::std::hash::pedersen_hash_with_separator([\n            item.contract_address.to_field(),\n            item.function_data.hash(),\n            item.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl PublicCallStackItem {\n    fn as_execution_request(self) -> Self {\n        let public_inputs = self.public_inputs;\n        let mut request_public_inputs = PublicCircuitPublicInputs::empty();\n        request_public_inputs.call_context = public_inputs.call_context;\n        request_public_inputs.args_hash = public_inputs.args_hash;\n\n        let call_stack_item = PublicCallStackItem {\n            contract_address: self.contract_address,\n            function_data: self.function_data,\n            is_execution_request: true,\n            public_inputs: request_public_inputs\n        };\n        call_stack_item\n    }\n}\n\nmod tests {\n    use crate::{\n        abis::{\n        function_data::FunctionData, function_selector::FunctionSelector, note_hash::NoteHash,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem\n    },\n        address::AztecAddress, constants::GENERATOR_INDEX__CALL_STACK_ITEM, traits::Hash\n    };\n\n    #[test]\n    fn compute_call_stack_item_request_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs = PublicCircuitPublicInputs::empty();\n        public_inputs.new_note_hashes[0] = NoteHash {\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: true, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item request hash\" test\n        let test_data_call_stack_item_request_hash = 0x1f0e71146c5d4a5bdcf517f0063cda7767e51fcb9cebc877feb348a77a7a6b4a;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_request_hash);\n    }\n\n    #[test]\n    fn compute_call_stack_item_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs = PublicCircuitPublicInputs::empty();\n        public_inputs.new_note_hashes[0] = NoteHash {\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: false, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item hash\" test\n        let test_data_call_stack_item_hash = 0x079a2b28b4853de9169d7dc40ac41c6d80b465d82c60195ede91504013f8b11b;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_hash);\n    }\n}\n"},"176":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_data.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize, Empty}\n};\n\nstruct FunctionData {\n    selector : FunctionSelector,\n    is_private : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        (self.is_private == other.is_private)\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_private as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_private: serialized[1] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nimpl Empty for FunctionData {\n    fn empty() -> Self {\n        FunctionData {\n            selector: FunctionSelector::empty(),\n            is_private: false\n        }\n    }\n\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data = FunctionData::empty();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data = FunctionData::empty();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty function data hash\" test\n    let test_data_empty_hash = 0x27b1d0839a5b23baf12a8d195b18ac288fcf401afb2f70b8a4b529ede5fa9fed;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"178":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use dep::std::cmp::Eq;\nuse crate::{\n    constants::KEY_VALIDATION_REQUEST_LENGTH, traits::{Empty, Serialize, Deserialize},\n    grumpkin_point::GrumpkinPoint\n};\n\nstruct KeyValidationRequest {\n    pk_m: GrumpkinPoint,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m))\n            & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest {\n            pk_m: GrumpkinPoint::zero(),\n            sk_app: 0,\n        }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.sk_app,\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: GrumpkinPoint::new(fields[0], fields[1]),\n            sk_app: fields[2],\n        }\n    }\n}\n\n"},"180":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request_and_generator.nr","source":"use dep::std::cmp::Eq;\nuse crate::{\n    address::AztecAddress,\n    abis::validation_requests::{\n    key_validation_request::KeyValidationRequest,\n    scoped_key_validation_request_and_generator::ScopedKeyValidationRequestAndGenerator\n},\n    constants::KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH, traits::{Empty, Serialize, Deserialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct KeyValidationRequestAndGenerator {\n    request: KeyValidationRequest,\n    sk_app_generator: Field,\n}\n\nimpl Eq for KeyValidationRequestAndGenerator {\n    fn eq(self, other: KeyValidationRequestAndGenerator) -> bool {\n        (self.request == other.request) & (self.sk_app_generator == other.sk_app_generator)\n    }\n}\n\nimpl Empty for KeyValidationRequestAndGenerator {\n    fn empty() -> Self {\n        KeyValidationRequestAndGenerator {\n            request: KeyValidationRequest::empty(),\n            sk_app_generator: 0,\n        }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH> for KeyValidationRequestAndGenerator {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH] {\n        array_concat(self.request.serialize(), [self.sk_app_generator])\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH> for KeyValidationRequestAndGenerator {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH]) -> Self {\n        let mut reader = Reader::new(fields);\n        let res = Self {\n            request: reader.read_struct(KeyValidationRequest::deserialize),\n            sk_app_generator: reader.read(),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl KeyValidationRequestAndGenerator {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedKeyValidationRequestAndGenerator {\n        ScopedKeyValidationRequestAndGenerator { request: self, contract_address }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = KeyValidationRequestAndGenerator::empty();\n    let serialized = item.serialize();\n    let deserialized = KeyValidationRequestAndGenerator::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"184":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"},"186":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/append_only_tree_snapshot.nr","source":"use dep::std::cmp::Eq;\n\nstruct AppendOnlyTreeSnapshot {\n    root : Field,\n    // TODO(Alvaro) change this to a u64\n    next_available_leaf_index : u32\n}\n\nglobal APPEND_ONLY_TREE_SNAPSHOT_LENGTH: u64 = 2;\n\nimpl AppendOnlyTreeSnapshot {\n    pub fn serialize(self) -> [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH] {\n        [self.root, self.next_available_leaf_index as Field]\n    }\n\n    pub fn deserialize(serialized: [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH]) -> AppendOnlyTreeSnapshot {\n        AppendOnlyTreeSnapshot { root: serialized[0], next_available_leaf_index: serialized[1] as u32 }\n    }\n\n    pub fn zero() -> Self {\n        Self { root: 0, next_available_leaf_index: 0 }\n    }\n}\n\nimpl Eq for AppendOnlyTreeSnapshot {\n    fn eq(self, other : AppendOnlyTreeSnapshot) -> bool {\n        (self.root == other.root) & (self.next_available_leaf_index == other.next_available_leaf_index)\n    }\n}\n"},"187":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/log_hash.nr","source":"use crate::{\n    abis::side_effect::{Ordered, OrderedValue, Scoped}, address::AztecAddress,\n    constants::{\n    LOG_HASH_LENGTH, NOTE_LOG_HASH_LENGTH, ENCRYPTED_LOG_HASH_LENGTH, SCOPED_LOG_HASH_LENGTH,\n    SCOPED_ENCRYPTED_LOG_HASH_LENGTH\n},\n    traits::{Empty, Serialize, Deserialize}, utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct LogHash {\n    value: Field,\n    counter: u32,\n    length: Field,\n}\n\nimpl Ordered for LogHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for LogHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for LogHash {\n    fn eq(self, other: LogHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.length == other.length) \n    }\n}\n\nimpl Empty for LogHash {\n    fn empty() -> Self {\n        LogHash {\n            value: 0,\n            counter: 0,\n            length: 0,\n        }\n    }\n}\n\nimpl Serialize<LOG_HASH_LENGTH> for LogHash {\n    fn serialize(self) -> [Field; LOG_HASH_LENGTH] {\n        [self.value, self.counter as Field, self.length]\n    }\n}\n\nimpl Deserialize<LOG_HASH_LENGTH> for LogHash {\n    fn deserialize(values: [Field; LOG_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            length: values[2],\n        }\n    }\n}\n\nimpl LogHash {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedLogHash {\n        ScopedLogHash { log_hash: self, contract_address }\n    }\n}\n\nstruct ScopedLogHash {\n    log_hash: LogHash,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<LogHash> for ScopedLogHash {\n    fn inner(self) -> LogHash {\n        self.log_hash\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedLogHash {\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedLogHash {\n    fn value(self) -> Field {\n        self.log_hash.value\n    }\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl Eq for ScopedLogHash {\n    fn eq(self, other: ScopedLogHash) -> bool {\n        (self.log_hash == other.log_hash)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedLogHash {\n    fn empty() -> Self {\n        ScopedLogHash {\n            log_hash: LogHash::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_LOG_HASH_LENGTH> for ScopedLogHash {\n    fn serialize(self) -> [Field; SCOPED_LOG_HASH_LENGTH] {\n       array_concat(self.log_hash.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_LOG_HASH_LENGTH> for ScopedLogHash {\n    fn deserialize(values: [Field; SCOPED_LOG_HASH_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            log_hash: reader.read_struct(LogHash::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nstruct EncryptedLogHash {\n    value: Field,\n    counter: u32,\n    length: Field,\n    randomness: Field,\n}\n\nimpl Ordered for EncryptedLogHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for EncryptedLogHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for EncryptedLogHash {\n    fn eq(self, other: EncryptedLogHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.length == other.length) \n            & (self.randomness == other.randomness) \n    }\n}\n\nimpl Empty for EncryptedLogHash {\n    fn empty() -> Self {\n        EncryptedLogHash {\n            value: 0,\n            counter: 0,\n            length: 0,\n            randomness: 0,\n        }\n    }\n}\n\nimpl Serialize<ENCRYPTED_LOG_HASH_LENGTH> for EncryptedLogHash {\n    fn serialize(self) -> [Field; ENCRYPTED_LOG_HASH_LENGTH] {\n        [self.value, self.counter as Field, self.length, self.randomness]\n    }\n}\n\nimpl Deserialize<ENCRYPTED_LOG_HASH_LENGTH> for EncryptedLogHash {\n    fn deserialize(values: [Field; ENCRYPTED_LOG_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            length: values[2],\n            randomness: values[3],\n        }\n    }\n}\n\nimpl EncryptedLogHash {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedEncryptedLogHash {\n        ScopedEncryptedLogHash { log_hash: self, contract_address }\n    }\n}\n\nstruct ScopedEncryptedLogHash {\n    log_hash: EncryptedLogHash,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<EncryptedLogHash> for ScopedEncryptedLogHash {\n    fn inner(self) -> EncryptedLogHash {\n        self.log_hash\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl ScopedEncryptedLogHash {\n    pub fn expose_to_public(self) -> LogHash {\n        // Hide the secret randomness and counter when exposing to public\n        // Expose as a LogHash rather than EncryptedLogHash to avoid bringing an unnec. 0 value around\n        // The log hash will already be silo'd when we call this\n        LogHash { value: self.log_hash.value, counter: 0, length: self.log_hash.length }\n    }\n}\n\nimpl Ordered for ScopedEncryptedLogHash {\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedEncryptedLogHash {\n    fn value(self) -> Field {\n        self.log_hash.value\n    }\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl Eq for ScopedEncryptedLogHash {\n    fn eq(self, other: ScopedEncryptedLogHash) -> bool {\n        (self.log_hash == other.log_hash)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedEncryptedLogHash {\n    fn empty() -> Self {\n        ScopedEncryptedLogHash {\n            log_hash: EncryptedLogHash::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_ENCRYPTED_LOG_HASH_LENGTH> for ScopedEncryptedLogHash {\n    fn serialize(self) -> [Field; SCOPED_ENCRYPTED_LOG_HASH_LENGTH] {\n       array_concat(self.log_hash.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_ENCRYPTED_LOG_HASH_LENGTH> for ScopedEncryptedLogHash {\n    fn deserialize(values: [Field; SCOPED_ENCRYPTED_LOG_HASH_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            log_hash: reader.read_struct(EncryptedLogHash::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nstruct NoteLogHash {\n    value: Field,\n    counter: u32,\n    length: Field,\n    note_hash_counter: u32,\n}\n\nimpl NoteLogHash {\n    pub fn expose_to_public(self) -> LogHash {\n        // Hide the actual counter and note hash counter when exposing it to the public kernel.\n        // The counter is usually note_hash.counter + 1, so it can be revealing.\n        // Expose as a LogHash rather than NoteLogHash to avoid bringing an unnec. 0 value around\n        LogHash { value: self.value, counter: 0, length: self.length }\n    }\n}\n\nimpl Ordered for NoteLogHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for NoteLogHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for NoteLogHash {\n    fn eq(self, other: NoteLogHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.length == other.length) \n            & (self.note_hash_counter == other.note_hash_counter) \n    }\n}\n\nimpl Empty for NoteLogHash {\n    fn empty() -> Self {\n        NoteLogHash {\n            value: 0,\n            counter: 0,\n            length: 0,\n            note_hash_counter: 0,\n        }\n    }\n}\n\nimpl Serialize<NOTE_LOG_HASH_LENGTH> for NoteLogHash {\n    fn serialize(self) -> [Field; NOTE_LOG_HASH_LENGTH] {\n        [self.value, self.counter as Field, self.length, self.note_hash_counter as Field]\n    }\n}\n\nimpl Deserialize<NOTE_LOG_HASH_LENGTH> for NoteLogHash {\n    fn deserialize(values: [Field; NOTE_LOG_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            length: values[2],\n            note_hash_counter: values[3] as u32,\n        }\n    }\n}\n"},"189":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/note_hash.nr","source":"use crate::{\n    abis::read_request::ScopedReadRequest, address::AztecAddress,\n    abis::side_effect::{Ordered, OrderedValue, Readable, Scoped},\n    constants::{NOTE_HASH_LENGTH, SCOPED_NOTE_HASH_LENGTH}, traits::{Empty, Serialize, Deserialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\nuse dep::std::cmp::Eq;\n\nstruct NoteHash {\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for NoteHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for NoteHash {\n    fn eq(self, other: NoteHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter) \n    }\n}\n\nimpl Empty for NoteHash {\n    fn empty() -> Self {\n        NoteHash {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Serialize<NOTE_HASH_LENGTH> for NoteHash {\n    fn serialize(self) -> [Field; NOTE_HASH_LENGTH] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<NOTE_HASH_LENGTH> for NoteHash {\n    fn deserialize(values: [Field; NOTE_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nimpl NoteHash {\n    pub fn scope(self, nullifier_counter: u32, contract_address: AztecAddress) -> ScopedNoteHash {\n        ScopedNoteHash { note_hash: self, nullifier_counter, contract_address }\n    }\n}\n\nstruct ScopedNoteHash {\n    note_hash: NoteHash,\n    nullifier_counter: u32,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<NoteHash> for ScopedNoteHash {\n    fn inner(self) -> NoteHash {\n        self.note_hash\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedNoteHash {\n    fn counter(self) -> u32 {\n        self.note_hash.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedNoteHash {\n    fn value(self) -> Field {\n        self.note_hash.value\n    }\n    fn counter(self) -> u32 {\n        self.note_hash.counter\n    }\n}\n\nimpl Eq for ScopedNoteHash {\n    fn eq(self, other: ScopedNoteHash) -> bool {\n        (self.note_hash == other.note_hash)\n            & (self.nullifier_counter == other.nullifier_counter)\n            & (self.contract_address == other.contract_address)\n    }\n}\n\nimpl Empty for ScopedNoteHash {\n    fn empty() -> Self {\n        ScopedNoteHash {\n            note_hash: NoteHash::empty(),\n            nullifier_counter: 0,\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_NOTE_HASH_LENGTH> for ScopedNoteHash {\n    fn serialize(self) -> [Field; SCOPED_NOTE_HASH_LENGTH] {\n        array_concat(self.note_hash.serialize(), [self.nullifier_counter as Field, self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_NOTE_HASH_LENGTH> for ScopedNoteHash {\n    fn deserialize(values: [Field; SCOPED_NOTE_HASH_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            note_hash: reader.read_struct(NoteHash::deserialize),\n            nullifier_counter: reader.read_u32(),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl Readable for ScopedNoteHash {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        assert_eq(self.note_hash.value, read_request.value(), \"Value of the note hash does not match read request\");\n        assert_eq(self.contract_address, read_request.contract_address, \"Contract address of the note hash does not match read request\");\n        assert(\n            read_request.counter() > self.note_hash.counter, \"Read request counter must be greater than the counter of the note hash\"\n        );\n        assert(\n            (self.nullifier_counter == 0) | (read_request.counter() < self.nullifier_counter), \"Read request counter must be less than the nullifier counter of the note hash\"\n        );\n    }\n}\n\nimpl ScopedNoteHash {\n    pub fn expose_to_public(self) -> NoteHash {\n        // Hide the actual counter when exposing it to the public kernel.\n        NoteHash { value: self.note_hash.value, counter: 0 }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NoteHash::empty();\n    let serialized = item.serialize();\n    let deserialized = NoteHash::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped() {\n    let item = ScopedNoteHash::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedNoteHash::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"190":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/read_request.nr","source":"use crate::{\n    abis::side_effect::{Ordered, Scoped}, traits::{Empty, Serialize, Deserialize},\n    address::AztecAddress, constants::{READ_REQUEST_LENGTH, SCOPED_READ_REQUEST_LEN},\n    utils::{arrays::array_concat, reader::Reader}\n};\nuse dep::std::cmp::Eq;\n\nstruct ReadRequest {\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for ReadRequest {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for ReadRequest {\n    fn eq(self, read_request: ReadRequest) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n    }\n}\n\nimpl Empty for ReadRequest {\n    fn empty() -> Self {\n        ReadRequest {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_LENGTH> for ReadRequest {\n    fn serialize(self) -> [Field; READ_REQUEST_LENGTH] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_LENGTH> for ReadRequest {\n    fn deserialize(values: [Field; READ_REQUEST_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nimpl ReadRequest {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedReadRequest {\n        ScopedReadRequest { read_request: self, contract_address }\n    }\n}\n\nstruct ScopedReadRequest {\n    read_request: ReadRequest,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<ReadRequest> for ScopedReadRequest {\n    fn inner(self) -> ReadRequest {\n        self.read_request\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Eq for ScopedReadRequest {\n    fn eq(self, other: ScopedReadRequest) -> bool {\n        (self.read_request == other.read_request)\n        & (self.contract_address.eq(other.contract_address))\n    }\n}\n\nimpl Empty for ScopedReadRequest {\n    fn empty() -> Self {\n        ScopedReadRequest {\n            read_request: ReadRequest::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_READ_REQUEST_LEN> for ScopedReadRequest {\n    fn serialize(self) -> [Field; SCOPED_READ_REQUEST_LEN] {\n        array_concat(self.read_request.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_READ_REQUEST_LEN> for ScopedReadRequest {\n    fn deserialize(values: [Field; SCOPED_READ_REQUEST_LEN]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            read_request: reader.read_struct(ReadRequest::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl ScopedReadRequest {\n    pub fn value(self) -> Field {\n        self.read_request.value\n    }\n    pub fn counter(self) -> u32 {\n        self.read_request.counter\n    }\n}\n\n#[test]\nfn serialization_of_empty_read() {\n    let item = ReadRequest::empty();\n    let serialized = item.serialize();\n    let deserialized = ReadRequest::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped() {\n    let item = ScopedReadRequest::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedReadRequest::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"193":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas_fees.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::GAS_FEES_LENGTH, hash::pedersen_hash, traits::{Deserialize, Hash, Serialize, Empty},\n    abis::side_effect::Ordered, utils::reader::Reader\n};\n\nstruct GasFees {\n    fee_per_da_gas: Field,\n    fee_per_l2_gas: Field,\n}\n\nimpl GasFees {\n    pub fn new(fee_per_da_gas: Field, fee_per_l2_gas: Field) -> Self {\n        Self { fee_per_da_gas, fee_per_l2_gas }\n    }\n\n    pub fn default() -> Self {\n        GasFees::new(1, 1)\n    }\n\n    pub fn is_empty(self) -> bool {\n        (self.fee_per_da_gas == 0) & (self.fee_per_l2_gas == 0)\n    }\n}\n\nimpl Serialize<GAS_FEES_LENGTH> for GasFees {\n    fn serialize(self) -> [Field; GAS_FEES_LENGTH] {\n        [self.fee_per_da_gas, self.fee_per_l2_gas]\n    }\n}\n\nimpl Deserialize<GAS_FEES_LENGTH> for GasFees {\n    fn deserialize(serialized: [Field; GAS_FEES_LENGTH]) -> GasFees {\n        GasFees::new(serialized[0], serialized[1])\n    }\n}\n\nimpl Eq for GasFees {\n    fn eq(self, other : GasFees) -> bool {\n        (self.fee_per_da_gas == other.fee_per_da_gas) & (self.fee_per_l2_gas == other.fee_per_l2_gas)\n    }\n}\n\nimpl Empty for GasFees {\n    fn empty() -> Self {\n        GasFees::new(0, 0)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = GasFees::empty();\n    let serialized = item.serialize();\n    let deserialized = GasFees::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"195":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/max_block_number.nr","source":"use crate::{constants::MAX_BLOCK_NUMBER_LENGTH, traits::{Deserialize, Serialize, Empty}};\n\nstruct MaxBlockNumber {\n    _opt: Option<u32>\n}\n\nimpl Empty for MaxBlockNumber {\n    fn empty() -> Self {\n        Self { _opt: Option::none() }\n    }\n}\n\nimpl Eq for MaxBlockNumber {\n    fn eq(self, other: Self) -> bool {\n        self._opt == other._opt\n    }\n}\n\nimpl Serialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn serialize(self) -> [Field; MAX_BLOCK_NUMBER_LENGTH] {\n        [self._opt._is_some as Field, self._opt._value as Field]\n    }\n}\n\nimpl Deserialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn deserialize(serialized: [Field; MAX_BLOCK_NUMBER_LENGTH]) -> MaxBlockNumber {\n        MaxBlockNumber {\n            _opt: Option {\n                _is_some: serialized[0] as bool,\n                _value: serialized[1] as u32,\n            }\n        }\n    }\n}\n\nimpl MaxBlockNumber {\n    pub fn new(max_block_number: u32) -> Self {\n        Self { _opt: Option::some(max_block_number) }\n    }\n\n    pub fn is_none(self) -> bool {\n        self._opt.is_none()\n    }\n\n    pub fn is_some(self) -> bool {\n        self._opt.is_some()\n    }\n\n    pub fn unwrap(self) -> u32 {\n        self._opt.unwrap()\n    }\n\n    pub fn unwrap_unchecked(self) -> u32 {\n        self._opt.unwrap_unchecked()\n    }\n\n    pub fn min(lhs: MaxBlockNumber, rhs: MaxBlockNumber) -> MaxBlockNumber {\n        if rhs.is_none() {\n            lhs // lhs might also be none, but in that case both would be\n        } else {\n            MaxBlockNumber::min_with_u32(lhs, rhs.unwrap_unchecked())\n        }\n    }\n\n    pub fn min_with_u32(lhs: MaxBlockNumber, rhs: u32) -> MaxBlockNumber {\n        if lhs._opt.is_none() {\n            MaxBlockNumber::new(rhs)\n        } else {\n            let lhs_value = lhs._opt.unwrap_unchecked();\n\n            MaxBlockNumber::new(if lhs_value < rhs { lhs_value } else { rhs })\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = MaxBlockNumber::empty();\n    let serialized = item.serialize();\n    let deserialized = MaxBlockNumber::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn zeroed_is_none() {\n    // Large parts of the kernel rely on zeroed to initialize structs. This conveniently matches what `default` does,\n    // and though we should eventually move everything to use `default`, it's good to check for now that both are\n    // equivalent.\n    let a = MaxBlockNumber::empty();\n    assert(a.is_none());\n}\n\n#[test]\nfn serde_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert(b.is_none());\n}\n\n#[test]\nfn serde_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert_eq(b.unwrap(), 13);\n}\n\n#[test(should_fail)]\nfn default_unwrap_panics() {\n    let a = MaxBlockNumber::empty();\n    let _ = a.unwrap();\n}\n\n#[test]\nfn min_default_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::empty();\n\n    assert(MaxBlockNumber::min(a, b).is_none());\n}\n\n#[test]\nfn min_default_some() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::new(13);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_some_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::new(42);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_with_u32_default() {\n    let a = MaxBlockNumber::empty();\n    let b = 42;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 42);\n}\n\n#[test]\nfn min_with_u32_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = 42;\n    let c = 8;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min_with_u32(a, c).unwrap(), 8);\n}\n"},"196":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier.nr","source":"use crate::{\n    abis::{side_effect::{Ordered, OrderedValue, Readable, Scoped}, read_request::ScopedReadRequest},\n    address::AztecAddress, constants::{NULLIFIER_LENGTH, SCOPED_NULLIFIER_LENGTH}, hash::silo_nullifier,\n    traits::{Empty, Hash, Serialize, Deserialize}, utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct Nullifier {\n    value: Field,\n    counter: u32,\n    note_hash: Field,\n}\n\nimpl Ordered for Nullifier {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for Nullifier {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for Nullifier {\n    fn eq(self, other: Nullifier) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.note_hash == other.note_hash) \n    }\n}\n\nimpl Empty for Nullifier {\n    fn empty() -> Self {\n        Nullifier {\n            value: 0,\n            counter: 0,\n            note_hash: 0,\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_LENGTH> for Nullifier {\n    fn serialize(self) -> [Field; NULLIFIER_LENGTH] {\n        [self.value, self.counter as Field, self.note_hash]\n    }\n}\n\nimpl Deserialize<NULLIFIER_LENGTH> for Nullifier {\n    fn deserialize(values: [Field; NULLIFIER_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            note_hash: values[2],\n        }\n    }\n}\n\nimpl Readable for Nullifier {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        // Public kernels output Nullifier instead of ScopedNullifier.\n        // The nullifier value has been siloed.\n        let siloed_request_value = silo_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.value, siloed_request_value, \"Value of the nullifier does not match read request\");\n        assert(\n            read_request.counter() > self.counter, \"Read request counter must be greater than the counter of the nullifier\"\n        );\n    }\n}\n\nimpl Nullifier {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedNullifier {\n        ScopedNullifier { nullifier: self, contract_address }\n    }\n}\n\nstruct ScopedNullifier {\n    nullifier: Nullifier,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<Nullifier> for ScopedNullifier {\n    fn inner(self) -> Nullifier {\n        self.nullifier\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedNullifier {\n    fn counter(self) -> u32 {\n        self.nullifier.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedNullifier {\n    fn value(self) -> Field {\n        self.nullifier.value\n    }\n    fn counter(self) -> u32 {\n        self.nullifier.counter\n    }\n}\n\nimpl Eq for ScopedNullifier {\n    fn eq(self, other: ScopedNullifier) -> bool {\n        (self.nullifier == other.nullifier)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedNullifier {\n    fn empty() -> Self {\n        ScopedNullifier {\n            nullifier: Nullifier::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_NULLIFIER_LENGTH> for ScopedNullifier {\n    fn serialize(self) -> [Field; SCOPED_NULLIFIER_LENGTH] {\n        array_concat(self.nullifier.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_NULLIFIER_LENGTH> for ScopedNullifier {\n    fn deserialize(values: [Field; SCOPED_NULLIFIER_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            nullifier: reader.read_struct(Nullifier::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl Readable for ScopedNullifier {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        assert_eq(self.nullifier.value, read_request.value(), \"Value of the nullifier does not match read request\");\n        assert_eq(self.contract_address, read_request.contract_address, \"Contract address of the nullifier does not match read request\");\n        assert(\n            read_request.counter() > self.nullifier.counter, \"Read request counter must be greater than the counter of the nullifier\"\n        );\n    }\n}\n\nimpl ScopedNullifier {\n    pub fn nullified_note_hash(self) -> Field {\n        self.nullifier.note_hash\n    }\n\n    pub fn expose_to_public(self) -> Nullifier {\n        // Hide the actual counter and note hash when exposing it to the public kernel.\n        Nullifier { value: self.nullifier.value, counter: 0, note_hash: 0 }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = Nullifier::empty();\n    let serialized = item.serialize();\n    let deserialized = Nullifier::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped() {\n    let item = ScopedNullifier::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedNullifier::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"201":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/transaction/tx_context.nr","source":"use crate::{\n    constants::{GENERATOR_INDEX__TX_CONTEXT, TX_CONTEXT_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader,\n    abis::gas_settings::GasSettings\n};\n\n// docs:start:tx-context\nstruct TxContext {\n    chain_id : Field,\n    version : Field,\n    gas_settings: GasSettings,\n}\n// docs:end:tx-context\n\nimpl TxContext {\n    pub fn new(chain_id: Field, version: Field, gas_settings: GasSettings) -> Self {\n        TxContext { chain_id, version, gas_settings }\n    }\n}\n\nimpl Eq for TxContext {\n    fn eq(self, other: Self) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.gas_settings.eq(other.gas_settings))\n    }\n}\n\nimpl Empty for TxContext {\n    fn empty() -> Self {\n        TxContext {\n            chain_id: 0,\n            version: 0,\n            gas_settings: GasSettings::empty(),\n        }\n    }\n}\n\nimpl Serialize<TX_CONTEXT_LENGTH> for TxContext {\n    fn serialize(self) -> [Field; TX_CONTEXT_LENGTH] {\n        let mut fields: BoundedVec<Field, TX_CONTEXT_LENGTH> = BoundedVec::new();\n\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.extend_from_array(self.gas_settings.serialize());\n\n        assert_eq(fields.len(), TX_CONTEXT_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<TX_CONTEXT_LENGTH> for TxContext {\n    fn deserialize(serialized: [Field; TX_CONTEXT_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let context = Self {\n            chain_id: reader.read(),\n            version: reader.read(),\n            gas_settings: reader.read_struct(GasSettings::deserialize),\n        };\n\n        reader.finish();\n        context\n    }\n}\n\nimpl Hash for TxContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__TX_CONTEXT)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context = TxContext::empty();\n    let serialized = context.serialize();\n    let deserialized = TxContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let context = TxContext::empty();\n    let hash = context.hash();\n\n    // Value from tx_context.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x17e4357684c5a4349b4587c95b0b6161dcb4a3c5b02d4eb2ecc3b02c80193261;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"202":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/header.nr","source":"use crate::{\n    abis::{\n    append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    global_variables::{GlobalVariables, GLOBAL_VARIABLES_LENGTH}\n},\n    constants::{GENERATOR_INDEX__BLOCK_HASH, HEADER_LENGTH, STATE_REFERENCE_LENGTH, CONTENT_COMMITMENT_LENGTH},\n    hash::pedersen_hash, state_reference::StateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice, content_commitment::ContentCommitment\n};\n\n// docs:start:header\nstruct Header {\n    last_archive: AppendOnlyTreeSnapshot,\n    content_commitment: ContentCommitment,\n    state: StateReference,\n    global_variables: GlobalVariables,\n    total_fees: Field\n}\n// docs:end:header\n\nimpl Eq for Header {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive) &\n        self.content_commitment.eq(other.content_commitment) &\n        self.state.eq(other.state) &\n        self.global_variables.eq(other.global_variables) &\n        self.total_fees.eq(other.total_fees)\n    }\n}\n\nimpl Serialize<HEADER_LENGTH> for Header {\n    fn serialize(self) -> [Field; HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, HEADER_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.content_commitment.serialize());\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n        fields.push(self.total_fees);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<HEADER_LENGTH> for Header {\n    fn deserialize(serialized: [Field; HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let content_commitment_fields = arr_copy_slice(serialized, [0; CONTENT_COMMITMENT_LENGTH], offset);\n        offset = offset + CONTENT_COMMITMENT_LENGTH;\n\n        let state_fields = arr_copy_slice(serialized, [0; STATE_REFERENCE_LENGTH], offset);\n        offset = offset + STATE_REFERENCE_LENGTH;\n\n        let global_variables_fields = arr_copy_slice(serialized, [0; GLOBAL_VARIABLES_LENGTH], offset);\n        offset = offset + GLOBAL_VARIABLES_LENGTH;\n\n        let total_fees = serialized[offset];\n\n        Header {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            content_commitment: ContentCommitment::deserialize(content_commitment_fields),\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n            total_fees\n        }\n    }\n}\n\nimpl Empty for Header {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            content_commitment: ContentCommitment::empty(),\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n            total_fees: 0\n        }\n    }\n}\n\nimpl Hash for Header {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header = Header::empty();\n    let serialized = header.serialize();\n    let deserialized = Header::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header = Header::empty();\n    let _hashed = header.hash();\n}\n\n#[test]\nfn empty_hash_is_zero() {\n    let header = Header::empty();\n    let hash = header.hash();\n\n    // Value from new_contract_data.test.ts \"computes empty hash\" test\n    let test_data_empty_hash = 0x124e8c40a6eca2e3ad10c04050b01a3fad00df3cea47b13592c7571b6914c7a7;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"21":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes = x.to_le_bytes(32);\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes = x.to_le_radix(256, num_bytes);\n    let y_bytes = y.to_le_radix(256, num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    let borrow = lte_16_hint(alo, blo);\n\n    let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n    let rhi = ahi - bhi - (borrow as Field);\n\n    rlo.assert_max_bit_size(128);\n    rhi.assert_max_bit_size(128);\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Take hints of the decomposition\n        let (xlo, xhi) = decompose_hint(x);\n\n        // Range check the limbs\n        xlo.assert_max_bit_size(128);\n        xhi.assert_max_bit_size(128);\n\n        // Check that the decomposition is correct\n        assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n        // Assert that the decomposition of P is greater than the decomposition of x\n        assert_gt_limbs((PLO, PHI), (xlo, xhi));\n        (xlo, xhi)\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else  {\n        // Take a hint of the comparison and verify it\n        if lt_32_hint(a, b) {\n            assert_gt(b, a);\n            false\n        } else {\n            assert_gt(a, b);\n            true\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose_hint, decompose, compute_lt, assert_gt, gt, lt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"22":{"path":"std/field.nr","source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n"},"227":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes = field.to_be_bytes(31);\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2 = field.to_be_bytes(31);\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n"},"229":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"struct Reader<N> {\n    data: [Field; N],\n    offset: u64,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"231":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\nstruct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u64,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            slot: 0,\n            value: 0,\n            next_slot: 0,\n            next_index: 0,\n        }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            dep::std::hash::pedersen_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"233":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::pedersen_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    pedersen_hash([storage_slot, key.to_field()], 0)\n}\n"},"234":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use dep::std::cmp::Eq;\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, N>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<N> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<N> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<N> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let mut result = [0; N];\n        let bytes: [u8; N] = self.as_bytes();\n        for i in 0..N {\n            result[i] = field_from_bytes([bytes[i];1], true);\n        }\n        result\n    }\n}\n\n// docs:start:deserialize\ntrait Deserialize<N> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize"},"235":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\nglobal U8_SERIALIZED_LEN: Field = 1;\nglobal U32_SERIALIZED_LEN: Field = 1;\nglobal U64_SERIALIZED_LEN: Field = 1;\nglobal U128_SERIALIZED_LEN: Field = 1;\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; 1] {\n        [self.to_integer()]\n    }\n\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n"},"236":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/partial_state_reference.nr","source":"use crate::{\n    abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot, constants::PARTIAL_STATE_REFERENCE_LENGTH,\n    traits::{Deserialize, Empty, Serialize}\n};\n\nstruct PartialStateReference {\n    note_hash_tree: AppendOnlyTreeSnapshot,\n    nullifier_tree: AppendOnlyTreeSnapshot,\n    public_data_tree: AppendOnlyTreeSnapshot,\n}\n\nimpl Eq for PartialStateReference {\n    fn eq(self, other: PartialStateReference) -> bool {\n        self.note_hash_tree.eq(other.note_hash_tree) &\n        self.nullifier_tree.eq(other.nullifier_tree) &\n        self.public_data_tree.eq(other.public_data_tree)\n    }\n}\n\nimpl Serialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn serialize(self) -> [Field; PARTIAL_STATE_REFERENCE_LENGTH] {\n        let serialized_note_hash_tree = self.note_hash_tree.serialize();\n        let serialized_nullifier_tree = self.nullifier_tree.serialize();\n        let serialized_public_data_tree = self.public_data_tree.serialize();\n\n        [\n            serialized_note_hash_tree[0], \n            serialized_note_hash_tree[1],\n            serialized_nullifier_tree[0],\n            serialized_nullifier_tree[1],\n            serialized_public_data_tree[0],\n            serialized_public_data_tree[1],\n        ]\n    }\n}\n\nimpl Deserialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn deserialize(serialized: [Field; PARTIAL_STATE_REFERENCE_LENGTH]) -> PartialStateReference {\n        PartialStateReference {\n            note_hash_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[0], serialized[1]]\n            ),\n            nullifier_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[2], serialized[3]]\n            ),\n            public_data_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[4], serialized[5]]\n            ),\n        }\n    }\n}\n\nimpl Empty for PartialStateReference {\n    fn empty() -> Self {\n        Self {\n            note_hash_tree: AppendOnlyTreeSnapshot::zero(),\n            nullifier_tree: AppendOnlyTreeSnapshot::zero(),\n            public_data_tree: AppendOnlyTreeSnapshot::zero(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let partial = PartialStateReference::empty();\n    let _serialized = partial.serialize();\n    let _deserialized = PartialStateReference::deserialize(_serialized);\n}\n"},"239":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/content_commitment.nr","source":"use crate::{\n    constants::CONTENT_COMMITMENT_LENGTH, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nstruct ContentCommitment {\n  tx_tree_height: Field,\n  txs_effects_hash: Field,\n  in_hash: Field,\n  out_hash: Field,\n}\n\nimpl Serialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn serialize(self) -> [Field; CONTENT_COMMITMENT_LENGTH] {\n    let mut fields: BoundedVec<Field, CONTENT_COMMITMENT_LENGTH> = BoundedVec::new();\n\n    fields.push(self.tx_tree_height);\n    fields.push(self.txs_effects_hash);\n    fields.push(self.in_hash);\n    fields.push(self.out_hash);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn deserialize(serialized: [Field; CONTENT_COMMITMENT_LENGTH]) -> Self {\n    let tx_tree_height = serialized[0];\n\n    let txs_effects_hash = serialized[1];\n\n    let in_hash = serialized[2];\n\n    let out_hash = serialized[3];\n\n    Self {\n      tx_tree_height,\n      txs_effects_hash,\n      in_hash,\n      out_hash,\n    }\n  }\n}\n\nimpl Empty for ContentCommitment {\n  fn empty() -> Self {\n    Self {\n      tx_tree_height: 0,\n      txs_effects_hash: 0,\n      in_hash: 0,\n      out_hash: 0,\n    }\n  }\n}\n\nimpl Eq for ContentCommitment {\n  fn eq(self, other: Self) -> bool {\n    (self.tx_tree_height == other.tx_tree_height)\n      & (self.txs_effects_hash == other.txs_effects_hash)\n      & (self.in_hash == other.in_hash)\n      & (self.out_hash == other.out_hash)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let empty = ContentCommitment::empty();\n    let serialized = empty.serialize();\n    let deserialized = ContentCommitment::deserialize(serialized);\n\n    assert(empty.eq(deserialized));\n}\n"},"240":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{\n    aztec_address::AztecAddress, eth_address::EthAddress, partial_address::PartialAddress,\n    public_keys_hash::PublicKeysHash\n},\n    contract_class_id::ContractClassId,\n    constants::{GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA, CONTRACT_INSTANCE_LENGTH},\n    traits::{Deserialize, Hash, Serialize}\n};\n\nstruct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"241":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/utils.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: u64) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"242":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    contract_class_id::ContractClassId, hash::poseidon2_hash, grumpkin_point::GrumpkinPoint,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash([pub_keys_hash.to_field(), partial_address.to_field(), GENERATOR_INDEX__CONTRACT_ADDRESS_V1])\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x1b6ead051e7b42665064ca6cf1ec77da0a36d86e00d1ff6e44077966c0c3a9fa;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"244":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr","source":"use crate::{\n    address::{eth_address::EthAddress, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, hash::pedersen_hash, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            pedersen_hash(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"245":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr","source":"use crate::{\n    address::{\n    eth_address::EthAddress, salted_initialization_hash::SaltedInitializationHash,\n    aztec_address::AztecAddress\n},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::pedersen_hash, traits::{ToField, FromField, Serialize, Deserialize}\n};\n\nglobal PARTIAL_ADDRESS_LENGTH = 1;\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n       PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            pedersen_hash(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"246":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr","source":"use crate::{\n    constants::ETH_ADDRESS_LENGTH, hash::pedersen_hash,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n"},"247":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr","source":"// Utility function to console.log data in the acir simulator\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n\n#[oracle(debugLog)]\nfn debug_log_oracle<M, N>(_msg: str<M>, args: [Field]) {}\n\n/// NOTE: call this with a str<N> msg of form\n/// \"some string with {0} and {1} ... {N}\"\n/// and an array of N field which will be formatted\n/// into the string in the simulator.\n/// Example:\n/// debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n/// debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\nunconstrained pub fn debug_log_format<M, N>(msg: str<M>, args: [Field; N]) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n/// NOTE: call this with a str<N> msg of length > 1\n/// Example:\n/// `debug_log(\"blah blah this is a debug string\");`\nunconstrained pub fn debug_log<N>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n"},"248":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::address::{AztecAddress, EthAddress};\nuse crate::recursion::verification_key::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage;\nuse crate::contract_class_id::ContractClassId;\nuse crate::abis::log_hash::LogHash;\nuse crate::traits::is_empty;\nuse crate::utils::{uint256::U256, field::field_from_bytes_32_trunc};\nuse crate::constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n};\nuse crate::traits::Hash;\nuse crate::messaging::l2_to_l1_message::L2ToL1Message;\nuse crate::merkle_tree::root::root_from_sibling_path;\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn compute_note_hash_nonce(first_nullifier: Field, note_hash_index: u64) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        note_hash_index as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        note_hash\n    ],\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH\n    )\n}\n\npub fn silo_note_hash(address: AztecAddress, unique_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_encrypted_log(address: AztecAddress, randomness: Field, log_hash: Field) -> Field {\n    // TODO: Using 0 GENERATOR_INDEX here as interim before we move to posiedon\n    // NB: A unique separator will be needed for masked_contract_address\n    let mut masked_contract_address = pedersen_hash([address.to_field(), randomness], 0);\n    if randomness == 0 {\n        // In some cases, we actually want to reveal the contract address we are siloing with:\n        // e.g. 'handshaking' contract w/ known address\n        // An app providing randomness = 0 signals to not mask the address.\n        masked_contract_address = address.to_field();\n    }\n    accumulate_sha256([masked_contract_address, log_hash])\n}\n\npub fn silo_unencrypted_log(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    chain_id: Field,\n    message: L2ToL1Message\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, message.recipient.to_field(), chain_id, message.content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes = input[offset].to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly. \npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<N>(inputs: [Field; N]) -> Field {\n    dep::std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), 0, 0, L2ToL1Message::empty());\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let message = L2ToL1Message { recipient: EthAddress::from_field(3), content: 5, counter: 1234 };\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), 2, 4, message);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n"},"252":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/grumpkin_point.nr","source":"use crate::{traits::{Serialize, Deserialize, Hash}, hash::poseidon2_hash};\nuse dep::std::cmp::Eq;\n\nglobal GRUMPKIN_POINT_SERIALIZED_LEN: Field = 2;\n\n// TODO(https://github.com/noir-lang/noir/issues/4931)\nstruct GrumpkinPoint {\n    x: Field,\n    y: Field,\n}\n\nimpl Serialize<GRUMPKIN_POINT_SERIALIZED_LEN> for GrumpkinPoint {\n    fn serialize(self) -> [Field; GRUMPKIN_POINT_SERIALIZED_LEN] {\n        [self.x, self.y]\n    }\n}\n\nimpl Deserialize<GRUMPKIN_POINT_SERIALIZED_LEN> for GrumpkinPoint {\n    fn deserialize(serialized: [Field; GRUMPKIN_POINT_SERIALIZED_LEN]) -> Self {\n        Self {\n            x: serialized[0],\n            y: serialized[1],\n        }\n    }\n}\n\nimpl Eq for GrumpkinPoint {\n    fn eq(self, point: GrumpkinPoint) -> bool {\n        (point.x == self.x) & (point.y == self.y)\n    }\n}\n\nimpl Hash for GrumpkinPoint {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl GrumpkinPoint {\n    pub fn new(x: Field, y: Field) -> Self {\n        Self { x, y }\n    }\n\n    pub fn zero() -> Self {\n        Self { x: 0, y: 0 }\n    }\n\n    pub fn is_zero(self) -> bool {\n        (self.x == 0) & (self.y == 0)\n    }\n\n    // TODO(David): Would be quite careful here as (0,0) is not a point\n    // on the curve. A boolean flag may be the better approach here,\n    // would also cost less constraints. It seems like we don't need to \n    // group arithmetic either. \n    fn assert_is_zero(self) {\n        assert(self.x == 0);\n        assert(self.y == 0);\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 64] {\n        let mut result = [0 as u8; 64];\n        let x_bytes = self.x.to_be_bytes(32);\n        let y_bytes = self.y.to_be_bytes(32);\n        for i in 0..32 {\n            result[i] = x_bytes[i];\n            result[i + 32] = y_bytes[i];\n        }\n        result\n    }\n}\n"},"256":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/messaging/l2_to_l1_message.nr","source":"use crate::{\n    address::{AztecAddress, EthAddress},\n    constants::{L2_TO_L1_MESSAGE_LENGTH, SCOPED_L2_TO_L1_MESSAGE_LENGTH},\n    abis::side_effect::{Ordered, Scoped}, traits::{Deserialize, Empty, Serialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\n// Note: Not to be confused with L2ToL1Msg in Solidity\nstruct L2ToL1Message {\n    recipient: EthAddress,\n    content: Field,\n    counter: u32,\n}\n\nimpl Ordered for L2ToL1Message {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Empty for L2ToL1Message {\n    fn empty() -> Self {\n        Self {\n            recipient: EthAddress::empty(),\n            content: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Eq for L2ToL1Message {\n    fn eq(self, other: Self) -> bool {\n        (self.recipient == other.recipient) & (self.content == other.content) & (self.counter == other.counter)\n    }\n}\n\nimpl Serialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn serialize(self) -> [Field; L2_TO_L1_MESSAGE_LENGTH] {\n        [self.recipient.to_field(), self.content, self.counter as Field]\n    }\n}\n\nimpl Deserialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn deserialize(values: [Field; L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        Self {\n            recipient: EthAddress::from_field(values[0]),\n            content: values[1],\n            counter: values[2] as u32,\n        }\n    }\n}\n\nimpl L2ToL1Message {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedL2ToL1Message {\n        ScopedL2ToL1Message { message: self, contract_address }\n    }\n}\n\nstruct ScopedL2ToL1Message {\n    message: L2ToL1Message,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<L2ToL1Message> for ScopedL2ToL1Message {\n    fn inner(self) -> L2ToL1Message {\n        self.message\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedL2ToL1Message {\n    fn counter(self) -> u32 {\n        self.message.counter\n    }\n}\n\nimpl Eq for ScopedL2ToL1Message {\n    fn eq(self, other: ScopedL2ToL1Message) -> bool {\n        (self.message == other.message)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedL2ToL1Message {\n    fn empty() -> Self {\n        ScopedL2ToL1Message {\n            message: L2ToL1Message::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_L2_TO_L1_MESSAGE_LENGTH> for ScopedL2ToL1Message {\n    fn serialize(self) -> [Field; SCOPED_L2_TO_L1_MESSAGE_LENGTH] {\n        array_concat(self.message.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_L2_TO_L1_MESSAGE_LENGTH> for ScopedL2ToL1Message {\n    fn deserialize(values: [Field; SCOPED_L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            message: reader.read_struct(L2ToL1Message::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\n#[test]\nfn serialization_of_empty_l2() {\n    let item = L2ToL1Message::empty();\n    let serialized = item.serialize();\n    let deserialized = L2ToL1Message::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped_l2() {\n    let item = ScopedL2ToL1Message::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedL2ToL1Message::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"259":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/noir-protocol-circuits/crates/types/src/state_reference.nr","source":"use crate::{\n    abis::append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    constants::{PARTIAL_STATE_REFERENCE_LENGTH, STATE_REFERENCE_LENGTH},\n    partial_state_reference::PartialStateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nstruct StateReference {\n    l1_to_l2_message_tree: AppendOnlyTreeSnapshot,\n    partial: PartialStateReference,\n}\n\nimpl Eq for StateReference {\n    fn eq(self, other: StateReference) -> bool {\n        self.l1_to_l2_message_tree.eq(other.l1_to_l2_message_tree) &\n        self.partial.eq(other.partial)\n    }\n}\n\nimpl Serialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn serialize(self) -> [Field; STATE_REFERENCE_LENGTH] {\n        let mut fields: BoundedVec<Field, STATE_REFERENCE_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.l1_to_l2_message_tree.serialize());\n        fields.extend_from_array(self.partial.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn deserialize(serialized: [Field; STATE_REFERENCE_LENGTH]) -> StateReference {\n        let mut offset = 0;\n\n        let l1_to_l2_message_tree_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let partial_fields = arr_copy_slice(serialized, [0; PARTIAL_STATE_REFERENCE_LENGTH], offset);\n\n        StateReference {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::deserialize(l1_to_l2_message_tree_fields),\n            partial: PartialStateReference::deserialize(partial_fields),\n        }\n    }\n}\n\nimpl Empty for StateReference {\n    fn empty() -> Self {\n        Self {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::zero(),\n            partial: PartialStateReference::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let state = StateReference::empty();\n    let _serialized = state.serialize();\n    let _deserialized = StateReference::deserialize(_serialized);\n}\n"},"28":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\nglobal RATE: u32 = 3;\n\nstruct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n\n    pub fn hash<N>(input: [Field; N], message_size: u64) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) -> [Field; RATE] {\n        // zero-pad the cache\n        for i in 0..RATE {\n            if i >= self.cache_size {\n                self.cache[i] = 0;\n            }\n        }\n        // add the cache into sponge state\n        for i in 0..RATE {\n            self.state[i] += self.cache[i];\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n        // return `RATE` number of field elements from the sponge state.\n        let mut result = [0; RATE];\n        for i in 0..RATE {\n            result[i] = self.state[i];\n        }\n        result\n    }\n\n    fn absorb(&mut self, input: Field) {\n        if (!self.squeeze_mode) & (self.cache_size == RATE) {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            let _ = self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else if (!self.squeeze_mode) & (self.cache_size != RATE) {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        } else if self.squeeze_mode {\n            // If we're in squeeze mode, switch to absorb mode and add the input into the cache.\n            // N.B. I don't think this code path can be reached?!\n            self.cache[0] = input;\n            self.cache_size = 1;\n            self.squeeze_mode = false;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        if self.squeeze_mode & (self.cache_size == 0) {\n            // If we're in squeze mode and the cache is empty, there is nothing left to squeeze out of the sponge!\n            // Switch to absorb mode.\n            self.squeeze_mode = false;\n            self.cache_size = 0;\n        }\n        if !self.squeeze_mode {\n            // If we're in absorb mode, apply sponge permutation to compress the cache, populate cache with compressed\n            // state and switch to squeeze mode. Note: this code block will execute if the previous `if` condition was\n            // matched\n            let new_output_elements = self.perform_duplex();\n            self.squeeze_mode = true;\n            for i in 0..RATE {\n                self.cache[i] = new_output_elements[i];\n            }\n            self.cache_size = RATE;\n        }\n        // By this point, we should have a non-empty cache. Pop one item off the top of the cache and return it.\n        let result = self.cache[0];\n        for i in 1..RATE {\n            if i < self.cache_size {\n                self.cache[i - 1] = self.cache[i];\n            }\n        }\n        self.cache_size -= 1;\n        self.cache[self.cache_size] = 0;\n        result\n    }\n\n    fn hash_internal<N>(input: [Field; N], in_len: u64, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\nstruct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field)*18446744073709551616;    // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field){\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher {\n            _state: &[],\n        }\n    }\n}\n"},"29":{"path":"std/hash.nr","source":"mod poseidon;\nmod mimc;\nmod poseidon2;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::sha256::{digest, sha256_var};\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<N>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(input: [Field; N], separator: u32) -> Field {}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes(32).as_array();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<N>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<N>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, N> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n"},"3":{"path":"std/cmp.nr","source":"// docs:start:eq-trait\ntrait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\nimpl Eq for Field { fn eq(self, other: Field) -> bool { self == other } }\n\nimpl Eq for u64 { fn eq(self, other: u64) -> bool { self == other } }\nimpl Eq for u32 { fn eq(self, other: u32) -> bool { self == other } }\nimpl Eq for u8 { fn eq(self, other: u8) -> bool { self == other } }\nimpl Eq for u1 { fn eq(self, other: u1) -> bool { self == other } }\n\nimpl Eq for i8 { fn eq(self, other: i8) -> bool { self == other } }\nimpl Eq for i32 { fn eq(self, other: i32) -> bool { self == other } }\nimpl Eq for i64 { fn eq(self, other: i64) -> bool { self == other } }\n\nimpl Eq for () { fn eq(_self: Self, _other: ()) -> bool { true } }\nimpl Eq for bool { fn eq(self, other: bool) -> bool { self == other } }\n\nimpl<T, N> Eq for [T; N] where T: Eq {\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0 .. self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T] where T: Eq {\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0 .. self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<N> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B) where A: Eq, B: Eq {\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C) where A: Eq, B: Eq, C: Eq {\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D) where A: Eq, B: Eq, C: Eq, D: Eq {\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E) where A: Eq, B: Eq, C: Eq, D: Eq, E: Eq {\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3) & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\nstruct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n// docs:start:ord-trait\ntrait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n\nimpl<T, N> Ord for [T; N] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0 .. self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0 .. self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B) where A: Ord, B: Ord {\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C) where A: Ord, B: Ord, C: Ord {\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D) where A: Ord, B: Ord, C: Ord, D: Ord {\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E) where A: Ord, B: Ord, C: Ord, D: Ord, E: Ord {\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v1 } else { v2 }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v2 } else { v1 }\n}\n\nmod cmp_tests {\n    use crate::cmp::{min, max};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"},"31":{"path":"std/merkle.nr","source":"// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<N>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n"},"35":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<N, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n"},"4":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: u64,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new() -> Self {\n        let zeroed = crate::unsafe::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: u64) -> T {\n        assert(index < self.len);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: u64) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> u64 {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u64 {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn from_array<Len>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::unsafe::zeroed();\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, MaxLen> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        \n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, MaxLen, Len> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen>  {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n    // TODO: Allow imports from \"super\"\n    use crate::collections::bounded_vec::BoundedVec;\n\n    #[test]\n    fn empty_equality() {\n        let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n        let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n        assert_eq(bounded_vec1, bounded_vec2);\n    }\n\n    #[test]\n    fn inequality() {\n        let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n        let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n        bounded_vec1.push(1);\n        bounded_vec2.push(2);\n\n        assert(bounded_vec1 != bounded_vec2);\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n}\n"},"44":{"path":"std/uint128.nr","source":"use crate::ops::{Add, Sub, Mul, Div, Rem, Not, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\nuse crate::println;\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\nglobal pow63 : Field = 9223372036854775808; // 2^63;\nstruct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_be_bytes(8);\n        let hi = self.hi.to_be_bytes(8);\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_le_bytes(8);\n        let hi = self.hi.to_le_bytes(8);\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<N>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn uconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    fn decode_ascii(ascii: u8) -> Field {\n        if ascii < 58 {\n            ascii - 48\n        } else {\n            let ascii = ascii + 32 * (U128::uconstrained_check_is_upper_ascii(ascii) as u8);\n            assert(ascii >= 97); // enforce >= 'a'\n            assert(ascii <= 102); // enforce <= 'f'\n            ascii - 87\n        } as Field\n    }\n\n    // TODO: Replace with a faster version. \n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q,r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;  \n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi*b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo*b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo+self.hi)*(b.lo+b.hi) - low + carry\n        } else {\n            self.lo*b.hi + self.hi*b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        let (q,r) = self.unconstrained_div(b);\n        let a = b * q + r;\n        assert_eq(self, a);\n        assert(r < b);\n        q\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        let (q,r) = self.unconstrained_div(b);\n        let a = b * q + r;\n        assert_eq(self, a);\n        assert(r < b);\n        r\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n        \n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 { \n    fn not(self) -> U128 {\n        U128 {\n            lo: (!(self.lo as u64)) as Field,\n            hi: (!(self.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitOr for U128 { \n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 { \n    fn shl(self, other: u8) -> U128 { \n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits = (other as Field).to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    } \n}\n\nimpl Shr for U128 { \n    fn shr(self, other: u8) -> U128 { \n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits = (other as Field).to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    } \n}\n\nmod tests {\n    use crate::uint128::{U128, pow64, pow63};\n\n    #[test]\n    fn test_not() {\n        let num = U128::from_u64s_le(0, 0);\n        let not_num = num.not();\n\n        let max_u64: Field = pow64 - 1;\n        assert_eq(not_num.hi, max_u64);\n        assert_eq(not_num.lo, max_u64);\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a= a.to_le_bytes();\n        let be_bytes_a= a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b= U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c= U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d= U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e= U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f= U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded= U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b:Field= a.to_integer();\n        let c= b.to_le_bytes(17);\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a= U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b= U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c= U128::one();\n        let d= U128::from_u64s_le(0x0, 0x1);\n        let (q,r) = a.unconstrained_div(b);\n        assert_eq(q, c);\n        assert_eq(r, d);\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        let (c,d ) = a.unconstrained_div(b);\n        assert_eq((c, d), (a, U128::zero()));\n\n        // Check where b is a multiple of a\n        let (c,d) = b.unconstrained_div(a);\n        assert_eq((c, d), (U128::zero(), b));\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        let (c,d)= a.unconstrained_div(b);\n        assert_eq((c, d), (U128::zero(), U128::zero()));\n\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        let (c,d )= a.unconstrained_div(b);\n        assert_eq((c, d), (U128::one(), U128::zero()));\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start:Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start:Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start:Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start:Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(), U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff))\n        );\n    }\n}\n"},"47":{"path":"/Users/jack-sw/Codes/aztec/aztec-aa-examples/contracts/validators/passkey/src/ecdsa_public_key_note.nr","source":"use dep::aztec::prelude::{AztecAddress, FunctionSelector, NoteHeader, NoteInterface, NoteGetterOptions, PrivateContext};\n\nuse dep::aztec::{\n    note::utils::compute_note_hash_for_consumption, keys::getters::get_nsk_app,\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, grumpkin_point::GrumpkinPoint, hash::poseidon2_hash}\n};\n\nglobal ECDSA_PUBLIC_KEY_NOTE_LEN: Field = 5;\n// ECDSA_PUBLIC_KEY_NOTE_LEN * 32 + 32(storage_slot as bytes) + 32(note_type_id as bytes)\nglobal ECDSA_PUBLIC_KEY_NOTE_BYTES_LEN: Field = 5 * 32 + 64;\n\n// Stores an ECDSA public key composed of two 32-byte elements\n// TODO: Do we need to include a nonce, in case we want to read/nullify/recreate with the same pubkey value?\n#[aztec(note)]\nstruct EcdsaPublicKeyNote {\n    x: [u8; 32],\n    y: [u8; 32],\n    // We store the npk_m_hash only to get the secret key to compute the nullifier\n    npk_m_hash: Field,\n}\n\nimpl NoteInterface<ECDSA_PUBLIC_KEY_NOTE_LEN, ECDSA_PUBLIC_KEY_NOTE_BYTES_LEN> for EcdsaPublicKeyNote {\n    // Cannot use the automatic serialization since x and y don't fit. Serialize the note as 5 fields where:\n    // [0] = x[0..31] (upper bound excluded)\n    // [1] = x[31]\n    // [2] = y[0..31]\n    // [3] = y[31]\n    // [4] = npk_m_hash\n    fn serialize_content(self) -> [Field; ECDSA_PUBLIC_KEY_NOTE_LEN] {\n        let mut x: Field = 0;\n        let mut y: Field = 0;\n        let mut mul: Field = 1;\n\n        for i in 1..32 {\n          let byte_x: Field = self.x[31 - i] as Field;\n          x = x + (byte_x * mul);\n          let byte_y: Field = self.y[31 - i] as Field;\n          y = y + (byte_y * mul);\n          mul *= 256;\n        }\n\n        let last_x = self.x[31] as Field;\n        let last_y = self.y[31] as Field;\n        \n        [x, last_x, y, last_y, self.npk_m_hash]\n    }\n\n    // Cannot use the automatic deserialization for the aforementioned reasons\n    fn deserialize_content(serialized_note: [Field; ECDSA_PUBLIC_KEY_NOTE_LEN]) -> EcdsaPublicKeyNote {\n        let mut x: [u8; 32] = [0; 32];\n        let mut y: [u8; 32] = [0; 32];\n\n        let part_x = serialized_note[0].to_be_bytes(32);\n        for i in 0..31 {\n            x[i] = part_x[i + 1];\n        }\n        x[31] = serialized_note[1].to_be_bytes(32)[31];\n\n        let part_y = serialized_note[2].to_be_bytes(32);\n        for i in 0..31 {\n            y[i] = part_y[i + 1];\n        }\n        y[31] = serialized_note[3].to_be_bytes(32)[31];\n\n        EcdsaPublicKeyNote { x, y, npk_m_hash: serialized_note[4], header: NoteHeader::empty() }\n    }\n\n   fn compute_nullifier(self, context: &mut PrivateContext) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash([\n            note_hash_for_nullify,\n            secret,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        ])\n    }\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash([\n            note_hash_for_nullify,\n            secret,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        ])\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    fn broadcast(self, context: &mut PrivateContext, slot: Field, ovpk_m: GrumpkinPoint, ivpk_m: GrumpkinPoint) {\n        context.encrypt_and_emit_note(\n            (*context).this_address(),\n            slot,\n            Self::get_note_type_id(),\n            ovpk_m,\n            ivpk_m,\n            self,\n        );\n    }\n}\n\nimpl EcdsaPublicKeyNote {\n    pub fn new(x: [u8; 32], y: [u8; 32], npk_m_hash: Field) -> Self {\n        EcdsaPublicKeyNote { x, y, npk_m_hash, header: NoteHeader::empty() }\n    }\n}"},"48":{"path":"/Users/jack-sw/Codes/aztec/aztec-aa-examples/contracts/validators/passkey/src/main.nr","source":"mod ecdsa_public_key_note;\n\n// Account contract that uses ECDSA signatures for authentication on the same curve as Ethereum.\n// The signing key is stored in an immutable private note and should be different from the signing key.\ncontract EcdsaP256Account {\n    use dep::aztec::prelude::{AztecAddress, FunctionSelector, NoteHeader, NoteGetterOptions, PrivateContext, PrivateImmutable};\n\n    use dep::aztec::protocol_types::abis::call_context::CallContext;\n    use dep::std;\n\n    use dep::authwit::{\n        entrypoint::{app::AppPayload, fee::FeePayload}, account::AccountActions,\n        auth_witness::get_auth_witness\n    };\n\n    use crate::ecdsa_public_key_note::EcdsaPublicKeyNote;\n\n    #[aztec(storage)]\n    struct Storage {\n        public_key: PrivateImmutable<EcdsaPublicKeyNote>,\n    }\n\n    global ACCOUNT_ACTIONS_STORAGE_SLOT = 2;\n\n    // Creates a new account out of an ECDSA public key to use for signature verification\n    #[aztec(private)]\n    #[aztec(initializer)]\n    fn constructor(signing_pub_key_x: [u8; 32], signing_pub_key_y: [u8; 32]) {\n        let this = context.this_address();\n        let header = context.get_header();\n        let this_npk_m_hash = header.get_npk_m_hash(&mut context, this);\n        let this_ovpk_m = header.get_ivpk_m(&mut context, context.this_address());\n        let this_ivpk_m = header.get_ivpk_m(&mut context, context.this_address());\n\n        let mut pub_key_note = EcdsaPublicKeyNote::new(signing_pub_key_x, signing_pub_key_y, this_npk_m_hash);\n        storage.public_key.initialize(&mut pub_key_note, this_ovpk_m, this_ivpk_m);\n    }\n\n    // Note: If you globally change the entrypoint signature don't forget to update default_entrypoint.ts\n    #[aztec(private)]\n    fn entrypoint(app_payload: AppPayload, fee_payload: FeePayload) {\n        let actions = AccountActions::init(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.entrypoint(app_payload, fee_payload);\n    }\n\n    #[aztec(private)]\n    #[aztec(noinitcheck)]\n    fn spend_private_authwit(inner_hash: Field) -> Field {\n        let actions = AccountActions::init(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.spend_private_authwit(inner_hash)\n    }\n\n    #[aztec(public)]\n    fn spend_public_authwit(inner_hash: Field) -> Field {\n        let actions = AccountActions::init(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.spend_public_authwit(inner_hash)\n    }\n\n    #[aztec(private)]\n    #[aztec(internal)]\n    fn cancel_authwit(outer_hash: Field) {\n        context.push_new_nullifier(outer_hash, 0);\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn approve_public_authwit(outer_hash: Field) {\n        let actions = AccountActions::init(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.approve_public_authwit(outer_hash)\n    }\n\n    #[contract_library_method]\n    fn is_valid_impl(context: &mut PrivateContext, outer_hash: Field) -> bool {\n        // Load public key from storage\n        let storage = Storage::init(context);\n        let public_key = storage.public_key.get_note();\n\n        // Load auth witness\n        let witness: [Field; 64] = get_auth_witness(outer_hash);\n        let mut signature: [u8; 64] = [0; 64];\n        for i in 0..64 {\n            signature[i] = witness[i] as u8;\n        }\n\n        // Verify payload signature using Ethereum's signing scheme\n        // Note that noir expects the hash of the message/challenge as input to the ECDSA verification.\n        let outer_hash_bytes: [u8; 32] = outer_hash.to_be_bytes(32).as_array();\n        let hashed_message: [u8; 32] = std::hash::sha256(outer_hash_bytes);\n        let verification = std::ecdsa_secp256r1::verify_signature(public_key.x, public_key.y, signature, hashed_message);\n        assert(verification == true);\n\n        true\n    }\n}\n"},"50":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/authwit/src/auth.nr","source":"use dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::{GENERATOR_INDEX__AUTHWIT_INNER, GENERATOR_INDEX__AUTHWIT_OUTER}, hash::pedersen_hash\n};\nuse dep::aztec::{prelude::Deserialize, context::{PrivateContext, PublicContext, gas::GasOpts}, hash::hash_args_array};\n\nglobal IS_VALID_SELECTOR = 0xabf64ad4; // 4 first bytes of keccak256(\"IS_VALID()\")\n\n// docs:start:assert_current_call_valid_authwit\n// Assert that `on_behalf_of` have authorized the current call with a valid authentication witness\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let function_selector = FunctionSelector::from_signature(\"spend_private_authwit(Field)\");\n    let inner_hash = compute_inner_authwit_hash([context.msg_sender().to_field(), context.selector().to_field(), context.args_hash]);\n    let result: Field = context.call_private_function(on_behalf_of, function_selector, [inner_hash]).unpack_into();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n// docs:end:assert_current_call_valid_authwit\n\n// docs:start:assert_current_call_valid_authwit_public\n// Assert that `on_behalf_of` have authorized the current call in a public context\npub fn assert_current_call_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress) {\n    let function_selector = FunctionSelector::from_signature(\"spend_public_authwit(Field)\");\n    let inner_hash = compute_inner_authwit_hash(\n        [(*context).msg_sender().to_field(), (*context).selector().to_field(), (*context).get_args_hash()]\n    );\n    let result: Field = context.call_public_function(\n        on_behalf_of,\n        function_selector,\n        [inner_hash].as_slice(),\n        GasOpts::default()\n    ).deserialize_into();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n// docs:start:compute_call_authwit_hash\n// Compute the message hash to be used by an authentication witness \npub fn compute_call_authwit_hash<N>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N]\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash = compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_outer_authwit_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_call_authwit_hash\n\npub fn compute_inner_authwit_hash<N>(args: [Field; N]) -> Field {\n    pedersen_hash(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\npub fn compute_outer_authwit_hash(\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    inner_hash: Field\n) -> Field {\n    pedersen_hash(\n        [\n        consumer.to_field(),\n        chain_id,\n        version,\n        inner_hash\n    ],\n        GENERATOR_INDEX__AUTHWIT_OUTER\n    )\n}\n"},"52":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/authwit/src/auth_witness.nr","source":"#[oracle(getAuthWitness)]\nfn get_auth_witness_oracle<N>(_message_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn get_auth_witness<N>(message_hash: Field) -> [Field; N] {\n    get_auth_witness_oracle(message_hash)\n}\n"},"53":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/authwit/src/entrypoint/fee.nr","source":"use dep::aztec::prelude::PrivateContext;\nuse dep::aztec::protocol_types::{constants::GENERATOR_INDEX__FEE_PAYLOAD, hash::pedersen_hash, traits::{Hash, Serialize}};\nuse crate::entrypoint::function_call::FunctionCall;\n\n// 2 * 5 (FUNCTION_CALL_SIZE) + 2\nglobal FEE_PAYLOAD_SIZE: Field = 12;\n\n// 2 * 98 (FUNCTION_CALL_SIZE_IN_BYTES) + 32\nglobal FEE_PAYLOAD_SIZE_IN_BYTES: Field = 228;\n\nglobal MAX_FEE_FUNCTION_CALLS = 2;\n\n// docs:start:fee-payload-struct\nstruct FeePayload {\n  function_calls: [FunctionCall; MAX_FEE_FUNCTION_CALLS],\n  nonce: Field,\n  is_fee_payer: bool,\n}\n// docs:end:fee-payload-struct\n\nimpl Serialize<FEE_PAYLOAD_SIZE> for FeePayload {\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; FEE_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, FEE_PAYLOAD_SIZE> = BoundedVec::new();\n    for i in 0..MAX_FEE_FUNCTION_CALLS {\n      fields.extend_from_array(self.function_calls[i].serialize());\n    }\n    fields.push(self.nonce);\n    fields.push(self.is_fee_payer as Field);\n    fields.storage\n  }\n}\n\nimpl Hash for FeePayload {\n  fn hash(self) -> Field {\n    pedersen_hash(\n      self.serialize(),\n      GENERATOR_INDEX__FEE_PAYLOAD\n    )\n  }\n}\n\nimpl FeePayload {\n    fn to_be_bytes(self) -> [u8; FEE_PAYLOAD_SIZE_IN_BYTES] {\n        let mut bytes: BoundedVec<u8, FEE_PAYLOAD_SIZE_IN_BYTES> = BoundedVec::new();\n\n        for i in 0..MAX_FEE_FUNCTION_CALLS {\n            bytes.extend_from_array(self.function_calls[i].to_be_bytes());\n        }\n        bytes.extend_from_slice(self.nonce.to_be_bytes(32));\n        bytes.push(self.is_fee_payer as u8);\n\n        bytes.storage\n    }\n\n    fn execute_calls(self, context: &mut PrivateContext) {\n        for call in self.function_calls {\n            if !call.target_address.is_zero() {\n                if call.is_public {\n                    context.call_public_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                } else {\n                    let _result = context.call_private_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                }\n            }\n        }\n        if self.is_fee_payer {\n            context.set_as_fee_payer();\n        }\n    }\n}\n"},"54":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/authwit/src/entrypoint/app.nr","source":"use dep::aztec::prelude::PrivateContext;\nuse dep::aztec::protocol_types::{constants::GENERATOR_INDEX__SIGNATURE_PAYLOAD, hash::pedersen_hash, traits::{Hash, Serialize}};\n\nuse crate::entrypoint::function_call::{FunctionCall, FUNCTION_CALL_SIZE_IN_BYTES};\n\n// FUNCTION_CALL_SIZE * ACCOUNT_MAX_CALLS + 1\nglobal APP_PAYLOAD_SIZE: u64 = 21;\n// FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS + 32\nglobal APP_PAYLOAD_SIZE_IN_BYTES: u64 = 424;\n\nglobal ACCOUNT_MAX_CALLS: u64 = 4;\n\n// Note: If you change the following struct you have to update default_entrypoint.ts\n// docs:start:app-payload-struct\nstruct AppPayload {\n  function_calls: [FunctionCall; ACCOUNT_MAX_CALLS],\n  nonce: Field,\n}\n// docs:end:app-payload-struct\n\nimpl Serialize<APP_PAYLOAD_SIZE> for AppPayload {\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; APP_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, APP_PAYLOAD_SIZE> = BoundedVec::new();\n    for call in self.function_calls {\n      fields.extend_from_array(call.serialize());\n    }\n    fields.push(self.nonce);\n    fields.storage\n  }\n}\n\nimpl Hash for AppPayload {\n  fn hash(self) -> Field {\n    pedersen_hash(\n      self.serialize(),\n      GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    )\n  }\n}\n\nimpl AppPayload {\n    // Serializes the payload as an array of bytes. Useful for hashing with sha256.\n    fn to_be_bytes(self) -> [u8; APP_PAYLOAD_SIZE_IN_BYTES] {\n        let mut bytes: BoundedVec<u8, APP_PAYLOAD_SIZE_IN_BYTES> = BoundedVec::new();\n\n        for i in 0..ACCOUNT_MAX_CALLS {\n            bytes.extend_from_array(self.function_calls[i].to_be_bytes());\n        }\n        bytes.extend_from_slice(self.nonce.to_be_bytes(32));\n\n        bytes.storage\n    }\n\n    // Executes all private and public calls\n    // docs:start:entrypoint-execute-calls\n    fn execute_calls(self, context: &mut PrivateContext) {\n        for call in self.function_calls {\n            if !call.target_address.is_zero() {\n                if call.is_public {\n                    context.call_public_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                } else {\n                    let _result = context.call_private_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                }\n            }\n        }\n    }\n    // docs:end:entrypoint-execute-calls\n}\n"},"56":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/authwit/src/account.nr","source":"use dep::aztec::context::{PrivateContext, PublicContext};\nuse dep::aztec::state_vars::{Map, PublicMutable};\nuse dep::aztec::protocol_types::{address::AztecAddress, abis::function_selector::FunctionSelector, hash::pedersen_hash};\n\nuse crate::entrypoint::{app::AppPayload, fee::FeePayload};\nuse crate::auth::{IS_VALID_SELECTOR, compute_outer_authwit_hash};\n\nstruct AccountActions<Context> {\n  context: Context,\n  is_valid_impl: fn(&mut PrivateContext, Field) -> bool,\n  approved_action: Map<Field, PublicMutable<bool, Context>, Context>,\n}\n\nimpl<Context> AccountActions<Context> {\n    pub fn init(\n        context: Context,\n        approved_action_storage_slot: Field,\n        is_valid_impl: fn(&mut PrivateContext, Field) -> bool\n    ) -> Self {\n        AccountActions {\n            context,\n            is_valid_impl,\n            approved_action: Map::new(\n                context,\n                approved_action_storage_slot,\n                |context, slot| {\n          PublicMutable::new(context, slot)\n        }\n            )\n        }\n    }\n}\n\nimpl AccountActions<&mut PrivateContext> {\n    // docs:start:entrypoint\n    pub fn entrypoint(self, app_payload: AppPayload, fee_payload: FeePayload) {\n        let valid_fn = self.is_valid_impl;\n\n        let fee_hash = fee_payload.hash();\n        assert(valid_fn(self.context, fee_hash));\n        fee_payload.execute_calls(self.context);\n        self.context.end_setup();\n\n        let app_hash = app_payload.hash();\n        assert(valid_fn(self.context, app_hash));\n        app_payload.execute_calls(self.context);\n    }\n    // docs:end:entrypoint\n\n    // docs:start:spend_private_authwit\n    pub fn spend_private_authwit(self, inner_hash: Field) -> Field {\n        // The `inner_hash` is \"siloed\" with the `msg_sender` to ensure that only it can \n        // consume the message.\n        // This ensures that contracts cannot consume messages that are not intended for them.\n        let message_hash = compute_outer_authwit_hash(\n            self.context.msg_sender(),\n            self.context.chain_id(),\n            self.context.version(),\n            inner_hash\n        );\n        let valid_fn = self.is_valid_impl;\n        assert(valid_fn(self.context, message_hash) == true, \"Message not authorized by account\");\n        self.context.push_new_nullifier(message_hash, 0);\n        IS_VALID_SELECTOR\n    }\n    // docs:end:spend_private_authwit\n}\n\nimpl AccountActions<&mut PublicContext> {\n    // docs:start:spend_public_authwit\n    pub fn spend_public_authwit(self, inner_hash: Field) -> Field {\n        // The `inner_hash` is \"siloed\" with the `msg_sender` to ensure that only it can \n        // consume the message.\n        // This ensures that contracts cannot consume messages that are not intended for them.\n        let message_hash = compute_outer_authwit_hash(\n            self.context.msg_sender(),\n            self.context.chain_id(),\n            self.context.version(),\n            inner_hash\n        );\n        let is_valid = self.approved_action.at(message_hash).read();\n        assert(is_valid == true, \"Message not authorized by account\");\n        self.context.push_new_nullifier(message_hash, 0);\n        IS_VALID_SELECTOR\n    }\n    // docs:end:spend_public_authwit\n\n    // docs:start:approve_public_authwit\n    pub fn approve_public_authwit(self, message_hash: Field) {\n        self.approved_action.at(message_hash).write(true);\n    }\n    // docs:end:approve_public_authwit\n}\n"},"60":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/aztec/src/note/note_getter.nr","source":"use dep::protocol_types::{constants::{MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH}};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, MAX_NOTES_PER_PAGE, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, Comparator, NoteStatus, PropertySelector},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request\n};\nuse crate::oracle;\n\nmod test;\n\nfn extract_property_value_from_selector<N>(\n    serialized_note: [Field; N],\n    selector: PropertySelector\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note. \n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value = serialized_note[selector.index].to_be_bytes(32);\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, N, M>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<N>(serialized_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        // Values are computed ahead of time because circuits evaluate all branches\n        let is_equal = value_field == select.value.to_field();\n        let is_lt = value_field.lt(select.value.to_field());\n\n        if (select.comparator == Comparator.EQ) {\n            assert(is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.NEQ) {\n            assert(!is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LT) {\n            assert(is_lt, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LTE) {\n            assert(is_lt | is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GT) {\n            assert(!is_lt & !is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GTE) {\n            assert(!is_lt, \"Mismatch return note field.\");\n        }\n    }\n}\n\nfn check_notes_order<N>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N, M>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> Note where Note: NoteInterface<N, M> {\n    let note = get_note_internal(storage_slot);\n\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    context.push_note_hash_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, M, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, M, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N, M> {\n    let opt_notes = get_notes_internal(storage_slot, options);\n\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nfn constrain_get_notes_internal<Note, N, M, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, M, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N, M> {\n    let mut returned_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..filtered_notes.len() {\n        let opt_note = filtered_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n\n            // The below code is used to collapse a sparse array into one where the values are guaranteed to be at the \n            // front of the array. This is highly useful because the caller knows that the returned array won't have\n            // more than option.limits notes, and can therefore loop over this limit value instead of the entire array,\n            // resulting in a smaller circuit and faster proving times.\n            // We write at returned_notes[num_notes] because num_notes is only advanced when we have a value in \n            // filtered_notes.\n            returned_notes[num_notes] = Option::some(note);\n            num_notes += 1;\n        };\n    }\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Got more notes than limit.\");\n    }\n\n    assert(num_notes != 0, \"Cannot return zero notes\");\n\n    returned_notes\n}\n\nunconstrained fn get_note_internal<Note, N, M>(storage_slot: Field) -> Note where Note: NoteInterface<N, M> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, M, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, M, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N, M> {\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    )\n}\n\nunconstrained pub fn view_notes<Note, N, M>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N, M>\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] where Note: NoteInterface<N, M> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n"},"62":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr","source":"use dep::protocol_types::grumpkin_point::GrumpkinPoint;\nuse crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::NoteInterface,\n    utils::{compute_note_hash_for_insertion, compute_note_hash_for_consumption}\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, N, M>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    ovpk_m: GrumpkinPoint,\n    ivpk_m: GrumpkinPoint\n) where Note: NoteInterface<N, M> {\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    // TODO: change this to note.set_header(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    // TODO: Strong typing required because of https://github.com/noir-lang/noir/issues/4088\n    let serialized_note: [Field; N] = Note::serialize_content(*note);\n    assert(\n        notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        inner_note_hash,\n        note_hash_counter\n    )\n        == 0\n    );\n\n    context.push_new_note_hash(inner_note_hash);\n\n    Note::broadcast(*note, context, storage_slot, ovpk_m, ivpk_m);\n}\n\npub fn create_note_hash_from_public<Note, N, M>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N, M> {\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    // TODO: change this to note.set_header(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N, M>(\n    context: &mut PrivateContext,\n    note: Note\n) where Note: NoteInterface<N, M> {\n    let mut nullifier = 0;\n    let mut consumed_note_hash: Field = 0;\n    nullifier = note.compute_nullifier(context);\n\n    // We also need the note hash corresponding to the \"nullifier\"\n    let header = note.get_header();\n    // `consumed_note_hash` is used to inform the kernel which pending note hash\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // note hash) in which case `consumed_note_hash` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.note_hash_counter != 0) {\n        // TODO(1718): Can we reuse the note hash computed in `compute_nullifier`?\n        consumed_note_hash = compute_note_hash_for_consumption(note);\n    }\n\n    let nullifier_counter = context.side_effect_counter;\n    assert(notify_nullified_note(nullifier, consumed_note_hash, nullifier_counter) == 0);\n\n    context.push_new_nullifier(nullifier, consumed_note_hash)\n}\n"},"63":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{\n    GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__INNER_NOTE_HASH\n},\n    hash::pedersen_hash, utils::arr_copy_slice\n};\n\nfn compute_siloed_hash(contract_address: AztecAddress, unique_note_hash: Field) -> Field {\n    let inputs = [contract_address.to_field(), unique_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_NOTE_HASH)\n}\n\nfn compute_unique_hash(nonce: Field, inner_note_hash: Field) -> Field {\n    let inputs = [nonce, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\nfn compute_inner_note_hash<Note, N, M>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    let note_hash = note.compute_note_content_hash();\n\n    pedersen_hash(\n        [header.storage_slot, note_hash],\n        GENERATOR_INDEX__INNER_NOTE_HASH\n    )\n}\n\nfn compute_unique_note_hash<Note, N, M>(note_with_header: Note) -> Field where Note: NoteInterface<N, M> {\n    let header = note_with_header.get_header();\n\n    let inner_note_hash = compute_inner_note_hash(note_with_header);\n\n    compute_unique_hash(header.nonce, inner_note_hash)\n}\n\nfn compute_siloed_note_hash<Note, N, M>(note_with_header: Note) -> Field where Note: NoteInterface<N, M> {\n    let header = note_with_header.get_header();\n\n    let unique_note_hash = if (header.nonce == 0) {\n        // If nonce is zero, that means we are reading a public note.\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n        // Remove this once notes added from public also include nonces.\n        compute_inner_note_hash(note_with_header)\n    } else {\n        compute_unique_note_hash(note_with_header)\n    };\n\n    compute_siloed_hash(header.contract_address, unique_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N, M>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N, M> {\n    let header = note_with_header.get_header();\n    let inner_nullifier = note_with_header.compute_nullifier(context);\n\n    let input = [header.contract_address.to_field(), inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_insertion<Note, N, M>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    compute_inner_note_hash(note)\n}\n\npub fn compute_note_hash_for_read_request<Note, N, M>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n\n    if (header.nonce != 0) {\n        compute_unique_note_hash(note)\n    } else {\n        compute_inner_note_hash(note)\n    }\n}\n\npub fn compute_note_hash_for_consumption<Note, N, M>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    // There are 3 cases for reading a note intended for consumption:\n    // 1. The note was inserted in this transaction, and is transient.\n    // 2. The note was inserted in a previous transaction, and was inserted in public\n    // 3. The note was inserted in a previous transaction, and was inserted in private\n\n    if (header.note_hash_counter != 0) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note)\n    } else {\n        // If a note is not transient, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the siloed_note_hash which has already been hashed with\n        // nonce and then contract address. This hash will match the existing leaf in the note hash\n        // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_siloed_note_hash(note)\n        // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n        // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n        // nullification, it is not strictly necessary to silo the note hash before computing\n        // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n        // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n        // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n        // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n        // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n    }\n}\n\npub fn compute_note_hash_and_nullifier<T, N, M, S>(\n    // docs:start:compute_note_hash_and_nullifier_args\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    serialized_note: [Field; S] // docs:end:compute_note_hash_and_nullifier_args\n) -> [Field; 4] where T: NoteInterface<N, M> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    // TODO: change this to note.set_header(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    T::set_header((&mut note), note_header);\n\n    let inner_note_hash = compute_inner_note_hash(note);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    // Should always be calling compute_unique_hash() once notes added from public also include nonces.\n    let unique_note_hash = if note_header.nonce != 0 {\n        compute_unique_hash(note_header.nonce, inner_note_hash)\n    } else {\n        inner_note_hash\n    };\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = note.compute_nullifier_without_context();\n    // docs:start:compute_note_hash_and_nullifier_returns\n    [inner_note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_nullifier_returns\n}\n"},"65":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/aztec/src/note/note_header.nr","source":"use dep::protocol_types::address::AztecAddress;\nuse dep::protocol_types::traits::{Empty, Eq, Serialize};\n\nstruct NoteHeader {\n    contract_address: AztecAddress,\n    nonce: Field,\n    storage_slot: Field,\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    // Check the nonce to see whether a note is transient or not.\n    note_hash_counter: u32, // a note_hash_counter of 0 means non-transient\n}\n\nimpl Empty for NoteHeader {\n    fn empty() -> Self {\n        NoteHeader { contract_address: AztecAddress::zero(), nonce: 0, storage_slot: 0, note_hash_counter: 0 }\n    }\n}\n\nimpl Eq for NoteHeader {\n    fn eq(self, other: Self) -> bool {\n        (self.contract_address == other.contract_address) & \n        (self.nonce == other.nonce) & \n        (self.storage_slot == other.storage_slot)& \n        (self.note_hash_counter == other.note_hash_counter)\n    }\n}\n\nimpl NoteHeader {\n    pub fn new(contract_address: AztecAddress, nonce: Field, storage_slot: Field) -> Self {\n        NoteHeader { contract_address, nonce, storage_slot, note_hash_counter: 0 }\n    }\n}\n\nimpl Serialize<4> for NoteHeader {\n    fn serialize(self) -> [Field; 4] {\n        [self.contract_address.to_field(), self.nonce, self.storage_slot, self.note_hash_counter as Field]\n    }\n}\n"},"75":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::traits::{Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::inputs::public_context_inputs::PublicContextInputs;\nuse crate::context::gas::GasOpts;\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs) -> Self {\n        PublicContext { inputs }\n    }\n\n    pub fn storage_address(self) -> AztecAddress {\n        storage_address()\n    }\n    pub fn fee_per_l2_gas(self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(self) -> Field {\n        fee_per_da_gas()\n    }\n    /**\n    * Emit a log with the given event selector and message.\n    *\n    * @param event_selector The event selector for the log.\n    * @param message The message to emit in the log.\n    * Should be automatically convertible to [Field; N]. For example str<N> works with\n    * one char per field. Otherwise you can use CompressedString.\n    */\n    pub fn emit_unencrypted_log_with_selector<T>(&mut self, event_selector: Field, log: T) {\n        emit_unencrypted_log(event_selector, log);\n    }\n    pub fn note_hash_exists(self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n    pub fn l1_to_l2_msg_exists(self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn block_number(self) -> Field {\n        block_number()\n    }\n\n    fn timestamp(self) -> u64 {\n        timestamp()\n    }\n\n    fn transaction_fee(self) -> Field {\n        transaction_fee()\n    }\n\n    fn nullifier_exists(self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn emit_unencrypted_log<T, N, M>(&mut self, log: T) {\n        let event_selector = 5; // Matches current PublicContext.\n        self.emit_unencrypted_log_with_selector(event_selector, log);\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0);\n    }\n\n    fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        temporary_function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            temporary_function_selector.to_field()\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        temporary_function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            temporary_function_selector.to_field()\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        assert(false, \"'delegate_call_public_function' not implemented!\");\n        FunctionReturns::new([0; RETURNS_COUNT])\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        // Cannot nullify pending commitments in AVM, so `nullified_commitment` is not used\n        emit_nullifier(nullifier);\n    }\n    fn msg_sender(self) -> AztecAddress {\n        sender()\n    }\n    fn this_address(self) -> AztecAddress {\n        address()\n    }\n    fn chain_id(self) -> Field {\n        chain_id()\n    }\n    fn version(self) -> Field {\n        version()\n    }\n    fn selector(self) -> FunctionSelector {\n        FunctionSelector::from_field(self.inputs.selector)\n    }\n    fn get_args_hash(self) -> Field {\n        self.inputs.args_hash\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    let MAX_POSSIBLE_FIELD: Field = 0 - 1;\n    [\n        user_gas.l2_gas.unwrap_or(MAX_POSSIBLE_FIELD),\n        user_gas.da_gas.unwrap_or(MAX_POSSIBLE_FIELD)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/6420): reconsider.\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log<T>(event_selector: Field, message: T) {\n    emit_unencrypted_log_opcode(event_selector, message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<RET_SIZE>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<RET_SIZE>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(PublicContextInputs::empty())\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nfn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nfn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nfn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nfn portal_opcode() -> EthAddress {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nfn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nfn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeTransactionFee)]\nfn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nfn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nfn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nfn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nfn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nfn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nfn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nfn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nfn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nfn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nfn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(amvOpcodeEmitUnencryptedLog)]\nfn emit_unencrypted_log_opcode<T>(event_selector: Field, message: T) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nfn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nfn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCall)]\nfn call_opcode<RET_SIZE>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nfn call_static_opcode<RET_SIZE>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\nstruct FunctionReturns<N> {\n    values: [Field; N]\n}\n\nimpl<N> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn assert_empty(returns: FunctionReturns<0>) {\n        assert(returns.values.len() == 0);\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n"},"77":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message,\n    hash::{hash_args_array, ArgsHasher, compute_unencrypted_log_hash},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    note::{note_interface::NoteInterface, utils::compute_note_hash_for_insertion},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{\n    emit_encrypted_log, emit_encrypted_note_log, compute_encrypted_log,\n    emit_contract_class_unencrypted_log_private_internal, emit_unencrypted_log_private_internal\n},\n    logs_traits::{LensForEncryptedLog, ToBytesForUnencryptedLog},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, set_public_teardown_function_call_internal,\n    parse_public_call_stack_item_from_oracle\n}\n}\n};\nuse dep::protocol_types::{\n    hash::sha256_to_field,\n    abis::{\n    caller_context::CallerContext, function_selector::FunctionSelector,\n    max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    grumpkin_private_key::GrumpkinPrivateKey, grumpkin_point::GrumpkinPoint, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::{is_empty, Empty},\n    utils::arrays::find_index\n};\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_note_hashes: BoundedVec<NoteHash, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<Nullifier, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_function_hash: Field,\n    new_l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            public_teardown_function_hash: 0,\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.new_nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            public_teardown_function_hash: self.public_teardown_function_hash,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Ending setup at counter {0}\",\n            [self.side_effect_counter as Field]\n        );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one \n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n    // --> might be a better approach to force devs to make a public function call that emits the log if needed then\n    // it would be less easy to accidentally leak information.\n    // If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\n    pub fn emit_unencrypted_log<T, N, M>(&mut self, log: T) where T: ToBytesForUnencryptedLog<N, M> {\n        let event_selector = 5; // TODO: compute actual event selector.\n        let contract_address = self.this_address();\n        let counter = self.next_counter();\n        let log_slice = log.to_be_bytes_arr();\n        let log_hash = compute_unencrypted_log_hash(contract_address, event_selector, log);\n        // 44 = addr (32) + selector (4) + raw log len (4) + processed log len (4)\n        let len = 44 + log_slice.len().to_field();\n        let side_effect = LogHash { value: log_hash, counter, length: len };\n        self.unencrypted_logs_hashes.push(side_effect);\n        // call oracle\n        let _void = emit_unencrypted_log_private_internal(contract_address, event_selector, log, counter);\n    }\n\n    // This fn exists separately from emit_unencrypted_log because sha hashing the preimage\n    // is too large to compile (16,200 fields, 518,400 bytes) => the oracle hashes it\n    // It is ONLY used with contract_class_registerer_contract since we already assert correctness:\n    // - Contract class -> we will commit to the packed bytecode (currently a TODO)\n    // - Private function -> we provide a membership proof\n    // - Unconstrained function -> we provide a membership proof\n    // Ordinary logs are not protected by the above so this fn shouldn't be called by anything else\n    pub fn emit_contract_class_unencrypted_log<N>(&mut self, log: [Field; N]) {\n        let event_selector = 5; // TODO: compute actual event selector.\n        let contract_address = self.this_address();\n        let counter = self.next_counter();\n        let log_hash = emit_contract_class_unencrypted_log_private_internal(contract_address, event_selector, log, counter);\n        // 44 = addr (32) + selector (4) + raw log len (4) + processed log len (4)\n        let len = 44 + N * 32;\n        let side_effect = LogHash { value: log_hash, counter, length: len };\n        self.unencrypted_logs_hashes.push(side_effect);\n    }\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn encrypt_and_emit_log<N, M>(\n        &mut self,\n        contract_address: AztecAddress,\n        randomness: Field, // Secret random value used later for masked_contract_address\n        event_type_id: Field,\n        ovpk_m: GrumpkinPoint,\n        ivpk_m: GrumpkinPoint,\n        preimage: [Field; N]\n    ) where [Field; N]: LensForEncryptedLog<N, M> {\n        let ovsk_app = self.request_ovsk_app(ovpk_m.hash());\n\n        // We are currently just encrypting it EXACTLY the same way as if it was a note.\n        let counter = self.next_counter();\n        let encrypted_log: [u8; M] = compute_encrypted_log(\n            contract_address,\n            randomness,\n            event_type_id,\n            ovsk_app,\n            ovpk_m,\n            ivpk_m,\n            preimage\n        );\n        emit_encrypted_log(contract_address, randomness, encrypted_log, counter);\n        let len = 32 + 32 + 64 + 48 + 48 + 176 + 64 + (preimage.len() as Field * 32) + 16 + 4;\n        let log_hash = sha256_to_field(encrypted_log);\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n    }\n\n    pub fn encrypt_and_emit_note<Note, N, NB, M>(\n        &mut self,\n        contract_address: AztecAddress,\n        storage_slot: Field,\n        note_type_id: Field,\n        ovpk_m: GrumpkinPoint,\n        ivpk_m: GrumpkinPoint,\n        note: Note\n    ) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n        let note_hash_counter = note.get_header().note_hash_counter;\n        let note_exists_index = find_index(\n            self.new_note_hashes.storage,\n            |n: NoteHash| n.counter == note_hash_counter\n        );\n        assert(\n            note_exists_index != MAX_NEW_NOTE_HASHES_PER_CALL, \"Can only emit a note log for an existing note.\"\n        );\n        let preimage = note.serialize_content();\n        let counter = self.next_counter();\n\n        let ovsk_app = self.request_ovsk_app(ovpk_m.hash());\n\n        // TODO(#1139 | #6408): perform encryption in the circuit\n        let encrypted_log: [u8; M] = compute_encrypted_log(\n            contract_address,\n            storage_slot,\n            note_type_id,\n            ovsk_app,\n            ovpk_m,\n            ivpk_m,\n            preimage\n        );\n        emit_encrypted_note_log(note_hash_counter, encrypted_log, counter);\n\n        // Current unoptimized size of the encrypted log\n        // incoming_tag (32 bytes)\n        // outgoing_tag (32 bytes)\n        // eph_pk (64 bytes)\n        // incoming_header (48 bytes)\n        // outgoing_header (48 bytes)\n        // outgoing_body (176 bytes)\n        // incoming_body_fixed (64 bytes)\n        // incoming_body_variable (N * 32 bytes + 16 bytes padding) \n        // len of processed log (4 bytes)\n        let len = 32 + 32 + 64 + 48 + 48 + 176 + 64 + (preimage.len() as Field * 32) + 16 + 4;\n\n        let log_hash = sha256_to_field(encrypted_log);\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, start_side_effect_counter);\n        assert_eq(item.public_inputs.start_side_effect_counter, start_side_effect_counter);\n        let end_side_effect_counter = item.public_inputs.end_side_effect_counter;\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        let mut caller_context = CallerContext::empty();\n        caller_context.is_static_call = self.inputs.call_context.is_static_call;\n        if is_delegate_call {\n            caller_context.msg_sender = self.inputs.call_context.msg_sender;\n            caller_context.storage_contract_address = self.inputs.call_context.storage_contract_address;\n        }\n        self.private_call_requests.push(\n            PrivateCallRequest { hash: item.hash(), caller_context, start_side_effect_counter, end_side_effect_counter }\n        );\n\n        PackedReturns::new(item.public_inputs.returns_hash)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = parse_public_call_stack_item_from_oracle(fields);\n        self.validate_call_stack_item_from_oracle(\n            item,\n            contract_address,\n            function_selector,\n            args_hash,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = self.side_effect_counter + 1;\n        self.public_call_stack_hashes.push(item.hash());\n    }\n\n    pub fn set_public_teardown_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = parse_public_call_stack_item_from_oracle(fields);\n        self.validate_call_stack_item_from_oracle(\n            item,\n            contract_address,\n            function_selector,\n            args_hash,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = self.side_effect_counter + 1;\n        self.public_teardown_function_hash = item.hash();\n    }\n\n    fn validate_call_stack_item_from_oracle(\n        self,\n        item: PublicCallStackItem,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            public_teardown_function_hash: 0,\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"93":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::{\n    grumpkin_point::GrumpkinPoint,\n    abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH}\n};\n\n#[oracle(getKeyValidationRequest)]\nfn get_key_validation_request_oracle(_pk_m_hash: Field, _key_index: Field) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(npk_m_hash: Field, key_index: Field) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub fn get_key_validation_request(pk_m_hash: Field, key_index: Field) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n\n"},"94":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_call_stack_item::PrivateCallStackItem},\n    address::AztecAddress, constants::PRIVATE_CALL_STACK_ITEM_LENGTH\n};\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> PrivateCallStackItem {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    PrivateCallStackItem::deserialize(fields)\n}\n"},"95":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _inner_note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    inner_note_hash: Field,\n    counter: u32\n) -> Field {\n    notify_created_note_oracle(\n        storage_slot,\n        note_type_id,\n        serialized_note,\n        inner_note_hash,\n        counter\n    )\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(\n    _nullifier: Field,\n    _inner_note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n    counter: u32\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash, counter)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, N, NB, M, S, NS>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N, NB> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u64;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u64 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u64 = 2; // nonce & note_hash_counter.\n            let read_offset: u64 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            // TODO: change this to note.set_header(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n            Note::set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n// Only ever use this in private!\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n// Only ever use this in private!\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n"},"96":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"#[oracle(packReturns)]\nfn pack_returns_oracle<N>(_returns: [Field]) -> Field {}\n\nunconstrained pub fn pack_returns(returns: [Field]) {\n    let _unused = pack_returns_oracle(returns);\n}\n\n#[oracle(unpackReturns)]\nfn unpack_returns_oracle<N>(_return_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn unpack_returns<N>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n"},"97":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use crate::keys::PublicKeys;\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, grumpkin_point::GrumpkinPoint};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nfn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 9] {}\n\nunconstrained fn get_public_keys_and_partial_address_oracle_wrapper(address: AztecAddress) -> [Field; 9] {\n    get_public_keys_and_partial_address_oracle(address)\n}\n\nfn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle_wrapper(address);\n\n    let keys = PublicKeys {\n        npk_m: GrumpkinPoint::new(result[0], result[1]),\n        ivpk_m: GrumpkinPoint::new(result[2], result[3]),\n        ovpk_m: GrumpkinPoint::new(result[4], result[5]),\n        tpk_m: GrumpkinPoint::new(result[6], result[7])\n    };\n\n    let partial_address = PartialAddress::from_field(result[8]);\n\n    (keys, partial_address)\n}\n"},"98":{"path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.42.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{\n    abis::{\n    function_selector::FunctionSelector, public_call_stack_item::PublicCallStackItem,\n    function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs,\n    call_context::CallContext, read_request::ReadRequest, note_hash::NoteHash, nullifier::Nullifier,\n    log_hash::LogHash, global_variables::GlobalVariables, gas::Gas\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    messaging::l2_to_l1_message::L2ToL1Message, header::Header, address::AztecAddress,\n    utils::reader::Reader,\n    constants::{\n    MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH\n}\n};\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nfn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\npub fn parse_public_call_stack_item_from_oracle(fields: [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH]) -> PublicCallStackItem {\n    let mut reader = Reader::new(fields);\n\n    // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n    // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n    let item = PublicCallStackItem {\n        contract_address: AztecAddress::from_field(reader.read()),\n        function_data: FunctionData { selector: FunctionSelector::from_field(reader.read()), is_private: false },\n        public_inputs: PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            returns_hash: 0,\n            note_hash_read_requests: [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n            nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n            nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n            l1_to_l2_msg_read_requests: [ReadRequest::empty(); MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_CALL],\n            contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n            contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n            public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n            new_note_hashes: [NoteHash::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n            new_nullifiers: [Nullifier::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n            new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n            start_side_effect_counter: 0,\n            end_side_effect_counter: 0,\n            unencrypted_logs_hashes: [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL],\n            historical_header: Header::empty(),\n            global_variables: GlobalVariables::empty(),\n            prover_address: AztecAddress::zero(),\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty(),\n            transaction_fee: 0\n        },\n        is_execution_request: true\n    };\n    reader.finish();\n\n    item\n}\n"}}}