use dep::aztec::prelude::{AztecAddress, PrivateContext};
use dep::aztec::protocol_types::grumpkin_point::GrumpkinPoint;

global SIGNATURE_LEN = 64;
global KEY_LEN = 32;

pub fn get_viewing_pubkeys(context: &mut PrivateContext, address: AztecAddress) -> (GrumpkinPoint, GrumpkinPoint) {
    let header = context.get_header();
    let npk_m_hash = header.get_npk_m_hash(context, address);
    let ovpk_m = header.get_ovpk_m(context, address);
    let ivpk_m = header.get_ivpk_m(context, address);
    (ovpk_m, ivpk_m)
}

pub fn get_viewing_pubkeys_and_npkm_hash(context: &mut PrivateContext, address: AztecAddress) -> (GrumpkinPoint, GrumpkinPoint, Field) {
    let header = context.get_header();
    let npk_m_hash = header.get_npk_m_hash(context, address);
    let ovpk_m = header.get_ovpk_m(context, address);
    let ivpk_m = header.get_ivpk_m(context, address);
    (ovpk_m, ivpk_m, npk_m_hash)
}

pub fn extract_signature_64(witness: [Field; 500], base: Field) -> pub [u8;SIGNATURE_LEN] {
    let mut signature: [u8;SIGNATURE_LEN] = [0;SIGNATURE_LEN];
    let ceil = base + SIGNATURE_LEN;
    let mut sig_index: u64 = 0;
    for i in 0..witness.len() {
        if i > base as u64 & i <= ceil as u64 {
            signature[sig_index] = witness[i] as u8;
            sig_index = sig_index + 1;
        }
    }

    signature
}

pub fn extract_pubkeys_32(witness: [Field; 500]) -> pub ([u8;KEY_LEN], [u8;KEY_LEN]) {
    let mut x: [u8;KEY_LEN] = [0;KEY_LEN];
    let mut y: [u8;KEY_LEN] = [0;KEY_LEN];

    for i in 0..witness.len() {
        if i < 32 as u64 {
            x[i] = witness[i] as u8;
            y[i] = witness[i + 32] as u8;
        }   
    }

    (x, y)
}

pub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {
    let mut v = 1;
    let mut ret = 0 as Field;

    for i in 0..32 {
        ret = ret + (bytes32[i] as Field) * v;
        v = v * 256;
    }

    ret
}

pub fn u8_to_u8_32(arr: [u8]) -> [u8; 32] {
    let mut as_field: [u8; 32] = [0 as u8; 32];
    for i in 0..32 {
        as_field[i] = arr[i];
    }
    as_field
}

#[test]
fn test_extract_signature_64() {
    // mode 0
    // let array: [Field;500] = [1,188,59,25,252,230,248,175,61,93,32,249,179,194,212,81,8,192,29,232,61,222,48,108,16,237,129,110,32,36,67,192,72,180,167,180,27,45,37,28,193,203,143,45,71,116,178,137,235,43,29,10,207,35,40,49,85,2,108,209,172,189,143,53,163,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
    // let signature = extract_signature_64(array, 0);

    // mode 1
    let array: [Field;500] = [1,200,188,59,25,252,230,248,175,61,93,32,249,179,194,212,81,8,192,29,232,61,222,48,108,16,237,129,110,32,36,67,192,72,180,167,180,27,45,37,28,193,203,143,45,71,116,178,137,235,43,29,10,207,35,40,49,85,2,108,209,172,189,143,53,163,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
    let signature = extract_signature_64(array, 1);

    assert(signature[0] == 188, "index 0 should be 188");
    assert(signature[63] == 163, "index 63 should be 163");
    
    // for i in 0..64 {
    //     dep::std::println(signature[i]);
    // }

}

// #[test]
// fn test_extract_pubkeys_32() {
//     // mode 0
//     // let array: [Field;500] = [1,188,59,25,252,230,248,175,61,93,32,249,179,194,212,81,8,192,29,232,61,222,48,108,16,237,129,110,32,36,67,192,72,180,167,180,27,45,37,28,193,203,143,45,71,116,178,137,235,43,29,10,207,35,40,49,85,2,108,209,172,189,143,53,163,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
//     // let (pub_key_x, pub_key_y) = extract_pubkeys_32(array, 0);

//     // mode 1
//     let array: [Field;500] = [1,200,188,59,25,252,230,248,175,61,93,32,249,179,194,212,81,8,192,29,232,61,222,48,108,16,237,129,110,32,36,67,192,72,180,167,180,27,45,37,28,193,203,143,45,71,116,178,137,235,43,29,10,207,35,40,49,85,2,108,209,172,189,143,53,163,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
//     let (pub_key_x, pub_key_y) = extract_pubkeys_32(array, 1);

//     dep::std::println(pub_key_x[0]);
//     dep::std::println(pub_key_x[31]);
//     dep::std::println(pub_key_y[0]);
//     dep::std::println(pub_key_y[31]);

//     assert(pub_key_x[0] == 188, "first index for x 0 should be 188");
//     assert(pub_key_x[31] == 72, "last index for x 63 should be 72");
//     assert(pub_key_y[0] == 180, "first indext for y should be 180");
//     assert(pub_key_y[31] == 163, "last index 63 for y should be 163");
    
//     // for i in 0..64 {
//     //     dep::std::println(signature[i]);
//     // }

// }